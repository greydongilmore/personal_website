<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Greydon Gilmore</title>
    <link>https://greydongilmore.github.io/</link>
      <atom:link href="https://greydongilmore.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Greydon Gilmore</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Â© 2025 Greydon Gilmore</copyright><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate>
    <image>
      <url>https://greydongilmore.github.io/media/icon_hu5403136dfb5484a5cb3dfe5767696fab_109253_512x512_fill_lanczos_center_3.png</url>
      <title>Greydon Gilmore</title>
      <link>https://greydongilmore.github.io/</link>
    </image>
    
    <item>
      <title>Data Processing Intro</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/03_01_data_preprocessing/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/03_01_data_preprocessing/</guid>
      <description>&lt;p&gt;Data pre-processing techniques generally refer to the addition, deletion, or transformation of training set data. Different models have different sensitivities to the type of predictors in the model; &lt;em&gt;how&lt;/em&gt; the predictors enter the model is also important. Transformations of the data to reduce the impact of data skewness or outliers can lead to significant improvements in performance.&lt;/p&gt;
&lt;p&gt;In general, the work required to make your dataset easy to analyze.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to use column names&lt;/li&gt;
&lt;li&gt;Fixing inconsistent variables&lt;/li&gt;
&lt;li&gt;Merging with other datasets&lt;/li&gt;
&lt;li&gt;Reshaping (melt, pivot, ect..)&lt;/li&gt;
&lt;li&gt;Dealing with missing values&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ML Basics Intro</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/04_01_ml_basics/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/04_01_ml_basics/</guid>
      <description>&lt;h1 id=&#34;what-is-machine-learning&#34;&gt;What &lt;em&gt;is&lt;/em&gt; machine learning?&lt;/h1&gt;
&lt;p&gt;Here&amp;rsquo;s a working definition: &lt;strong&gt;machine learning is the field of science/engineering that seeks to build systems capable of learning from experience.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a very broad definition, and in practice, the set of activities that get labeled &amp;ldquo;machine learning&amp;rdquo; is pretty heterogeneous. However, two elements are common to nearly all machine learning applications: (a) the emphasis is on developing algorithms that can learn (semi-)autonomously from data, rather than static rule-based systems that must be explicitly designed or updated by humans; and (b) algorithm evaluation focuses heavily on the ability to meet objective quantitative targets.&lt;/p&gt;
&lt;p&gt;Fundamentally, machine learning involves building mathematical models to help understand data. &amp;ldquo;Learning&amp;rdquo; enters the fray when we give these models tunable parameters that can be adapted to observed data; in this way the program can be considered to be &amp;ldquo;learning&amp;rdquo; from the data. Once these models have been fit to previously seen data, they can be used to predict and understand aspects of newly observed data.&lt;/p&gt;
&lt;p&gt;Within the subsequent subsections we will cover the basics of machine learning including terminology and basic principles.&lt;/p&gt;
&lt;h2 id=&#34;exploratory-data-analysis&#34;&gt;Exploratory Data Analysis&lt;/h2&gt;
&lt;p&gt;In exploratory data analysis (EDA), a major component of the data science lifecycle, we summarize, visualize, and transform data in order to understand them more deeply. Through exploratory data analysis we seek to deeply understand our data. Maintaining &amp;ldquo;a state of flexibility&amp;rdquo; helps us know what to look for. Fluency with our computational tools allows us to conduct our search. In this chapter, we emphasize the necessary attitude as we introduce increasingly sophisticated tools. Although EDA varies between domains of study, we almost always begin EDA by understanding:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The data types of columns and the granularity of rows in the dataset.&lt;/li&gt;
&lt;li&gt;The distributions of quantitative data and measures of center and spread.&lt;/li&gt;
&lt;li&gt;Relationships between quantities in the dataset.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Operations in Python</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/01_01_python_basics_operations/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/01_01_python_basics_operations/</guid>
      <description>&lt;p&gt;The following are simple operations you can perform within python. We start with very basic operations and work up to more complex operations such as defining functions and methods&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Task Performed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;Addition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;Subtraction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;division&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;mod&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;multiplication&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;floor division&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;to the power of&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;arithmetic-operations&#34;&gt;Arithmetic Operations&lt;/h2&gt;
&lt;p&gt;The following are simple math expressions that can be done in Python.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Addition
1 + 1

# Multiplication
1 * 3

# Division
1 / 2

# Square
2 ** 4

# Find remainder - called modulus
4 % 2

# Find remainder - called modulus
5 % 2

# BEDMAS
(2 + 3) * (5 + 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;variable-assignment&#34;&gt;Variable Assignment&lt;/h2&gt;
&lt;p&gt;A name that is used to denote something or a value is called a variable. When assigning variables, the variable name should be something meaningful. This way you will remeber what it is for. Variables can not start with a number or special character. In python, variables can be declared and values can be assigned to it as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# I prefer sepearting words in a variable with &#39;_&#39;, you can also use camelCase
name_of_var = 2
nameOfVar = 2

# Assign numbers to variables. These are now objects in Python.
x = 2
y = 3

# Since they are objects you can now use them to perform operations
z = x + y
z

# Multiple variables can be assigned with the same value at once
x = y = 1
print (x,y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;strings&#34;&gt;Strings&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# When using strings you can use single quotes or double quotes
&#39;single quotes&#39;
&amp;quot;double quotes&amp;quot;

# If you want a string to contain an apostrophe then use double quotes around the string...
&amp;quot; wrap lot&#39;s of other quotes&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&#39;single quotes&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;printing-variables&#34;&gt;Printing variables&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = &#39;hello&#39;

# Use the built-in function to print variables/objects out
print(x)

# Use the format function to set the values within the string enclosed by curly braces {}
num = 12
name = &#39;Sam&#39;

# Either of these methods work...
print(&#39;My number is: {one}, and my name is: {two}&#39;.format(one=num,two=name))
print(&#39;My number is: {}, and my name is: {}&#39;.format(num,name))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lists&#34;&gt;Lists&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# With only integers
[1,2,3]

# With integers and strings
[&#39;hi&#39;,1,[1,2]]

# Adding new values to a list
my_list = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]
my_list.append(&#39;d&#39;)
print(my_list)

# Indexing a list by the items index
my_list[0]

# Indexing using a slice notation :
my_list[1:]

# Replace existing values in list
my_list[0] = &#39;NEW&#39;
print(my_list)

# You can create nested lists as well
nest = [1,2,3,[4,5,[&#39;target&#39;]]]
nest[3]
nest[3][2]
nest[3][2][0]

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]
[&#39;NEW&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]





&#39;target&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dictionaries&#34;&gt;Dictionaries&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = {&#39;key1&#39;:&#39;item1&#39;,&#39;key2&#39;:&#39;item2&#39;}
d

d[&#39;key1&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;booleans&#34;&gt;Booleans&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;True
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tuples&#34;&gt;Tuples&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t = (1,2,3)
t[0]

# You can not assign items to a tuple like you can with a list
t[0] = &#39;NEW&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sets&#34;&gt;Sets&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{1,2,3}

{1,2,3,1,2,1,2,3,3,3,3,2,2,2,1,1,2}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{1, 2, 3}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;relational-operators&#34;&gt;Relational Operators&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Task Performed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;True, if it is equal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;True, if not equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;less than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;greater than&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;less than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;greater than or equal to&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# False statements
1 &amp;gt; 2
&#39;hi&#39; == &#39;bye&#39;

# True statements
1 &amp;lt; 2
1 &amp;gt;= 1
1 &amp;lt;= 4
1 == 1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;logic-operators&#34;&gt;Logic Operators&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Using &#39;and&#39; to indicate both conditions need to be True
(1 &amp;gt; 2) and (2 &amp;lt; 3)

# Using &#39;or&#39; to indicate only one conditions needs to be True
(1 &amp;gt; 2) or (2 &amp;lt; 3)

# You can have as many conditional statements as you want
(1 == 2) or (2 == 3) or (4 == 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ifelif-else-statements&#34;&gt;if,elif, else Statements&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# IF statement
if 1 &amp;lt; 2:
    print(&#39;Yep!&#39;)
    
# IF ELSE statement
if 1 &amp;lt; 2:
    print(&#39;first&#39;)
else:
    print(&#39;last&#39;)

if 1 &amp;gt; 2:
    print(&#39;first&#39;)
else:
    print(&#39;last&#39;)

# IF, ELIF, ELSE statement
if 1 == 2:
    print(&#39;first&#39;)
elif 3 == 3:
    print(&#39;middle&#39;)
else:
    print(&#39;Last&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Yep!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;for-loops&#34;&gt;For Loops&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;seq = [1,2,3,4,5]
for item in seq:
    print(item)
    
for item in seq:
    print(&#39;Yep&#39;)

# You can name the iterator whatever you like
for jelly in seq:
    print(jelly+jelly)
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;while-loops&#34;&gt;While Loops&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;i = 1
while i &amp;lt; 5:
    print(&#39;i is: {}&#39;.format(i))
    i = i+1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;i is: 1
i is: 2
i is: 3
i is: 4
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;range-function&#34;&gt;range() function&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;range(5)

# Great for using in For loops
for i in range(5):
    print(i)

# You can use it to create lists
list(range(5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;range(0, 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;list-comprehension&#34;&gt;List comprehension&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = [1,2,3,4]

# Perform operations within a For loop and append the outputs to a list object
out = []
for item in x:
    out.append(item**2)
print(out)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A very useful technique in Python is the one line for loop:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[item**2 for item in x]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;defining-functions&#34;&gt;Defining functions&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def my_func(param1=&#39;default&#39;):
    &amp;quot;&amp;quot;&amp;quot;
    Docstring goes here.
    &amp;quot;&amp;quot;&amp;quot;
    print(param1)

# To call your function you need to include brackets at the end
my_func

my_func()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that you have defined your function with an input you can provide new inputs to the function to perform an operation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# You can either call the defined input varible for your function
my_func(param1=&#39;new param&#39;)

# Or you can just provide the input, remember if you have multiple function inputs the position of these inputs matter!
my_func(&#39;new param&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;new param
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Use the &#39;Return&#39; function to return a value from within your function and assign it to a variable
def square(x):
    return x**2

out = square(2)
print(out)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;lambda-map-and-filter&#34;&gt;Lambda, map and filter&lt;/h2&gt;
&lt;p&gt;Instead of writing a function you can use the lambda function instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def times2(var):
    return var*2

times2(2)

# lambda
lambda var: var*2

# map
seq = [1,2,3,4,5]
map(times2,seq)

# Combining lambda and map together you get
list(map(times2,seq))

# Here is more detail
list(map(lambda var: var*2,seq))

# Using the filter function to return values that meet a condition
filter(lambda item: item%2 == 0,seq)
list(filter(lambda item: item%2 == 0,seq))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[2, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;methods&#34;&gt;Methods&lt;/h2&gt;
&lt;p&gt;One of the most useful aspects of the Python language is that everything is an object and has inherent methods.&lt;/p&gt;
&lt;h3 id=&#34;string-methods&#34;&gt;string methods&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Assign &#39;st&#39; to be a string
st = &#39;hello my name is Sam&#39;

# A string type in Python has several methods
# To return all lowercase
st.lower()

# All uppercase
st.upper()

# Split the string at white spaces
st.split()

# You can use the split method to split at a character you want
tweet = &#39;Go Sports! #Sports&#39;
tweet.split(&#39;#&#39;)

# You can return only the part of the string you want after the split method
tweet.split(&#39;#&#39;)[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dictionary-methods&#34;&gt;dictionary methods&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;d = {&#39;key1&#39;: &#39;item1&#39;, &#39;key2&#39;: &#39;item2&#39;}

# Print the keys in a dictionary
d.keys()

# Print the items in a dictionary
d.items()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dict_keys([&#39;key1&#39;, &#39;key2&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;list-methods&#34;&gt;list methods&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lst = [1,2,3]

lst.pop()
lst

# Find a value within a list
&#39;x&#39; in [1,2,3]

&#39;x&#39; in [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Over and Underfitting</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/11_01_overfitting_underfitting/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/11_01_overfitting_underfitting/</guid>
      <description>&lt;p&gt;We ended the last section observing some puzzling behavior: the performance of our linear regression model appeared to &lt;em&gt;decrease&lt;/em&gt; with increasing sample size, which is probably not what we would have intuitively expected. In this section, we&amp;rsquo;ll explore the reasons for, and implications of, this important phenomenon.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# our core libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# scikit-learn stuff we&#39;ve already encountered
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get a better understanding of what&amp;rsquo;s going on, we&amp;rsquo;ll set aside our relatively complex personality dataset in this section in favor of simpler bivariate examples. Once we&amp;rsquo;re comfortable with the key ideas, we&amp;rsquo;ll bring the data back and explore it some more in the next sections.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start by sampling some data from a noisy function where the underlying functional form is quadratic.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# we wrap the data generation code in a function so we can call
# it again later.
def make_xy(n, sd=0.5):
    &#39;&#39;&#39; Generate x and y variables from a fixed quadratic function,
    adding noise. &#39;&#39;&#39;
    x = np.random.normal(size=n)
    y = (0.7 * x) ** 2 + 0.1 * x + np.random.normal(10, sd, size=n)
    return x, y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# fix the random number generator so we get reproducible results
np.random.seed(10)

x, y = make_xy(30)
plt.scatter(x, y);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./11_01_overfitting_underfitting_4_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Suppose we try to fit these data with a linear model&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;est = LinearRegression()
est.fit(x[:, None], y)

x_range = np.linspace(x.min(), x.max(), 100)
reg_line = est.predict(x_range[:, None])

plt.scatter(x, y)
plt.plot(x_range, reg_line);
mse = mean_squared_error(y, est.predict(x[:, None]))
plt.title(f&amp;quot;Mean squared error: {mse:.2f}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./11_01_overfitting_underfitting_6_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The fit looks&amp;hellip; meh. It seems pretty clear that our linear regression model is &lt;em&gt;underfitting&lt;/em&gt; the dataâmeaning, there are clear patterns in the data that the fitted model fails to describe.&lt;/p&gt;
&lt;p&gt;What can we do about this? Well, the problem here is that our model is insufficiently flexible; our straight regression line can&amp;rsquo;t bend itself to fit the contours of the observed data. Clearly, the solution is to use a more flexible estimator! A linear fit won&amp;rsquo;t cut itâwe need to fit &lt;em&gt;curves&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Just to make sure we don&amp;rsquo;t underfit again, let&amp;rsquo;s use a &lt;em&gt;really&lt;/em&gt; flexible estimatorâspecifically, 10th degree polynomial regression.&lt;/p&gt;
&lt;p&gt;This is also a good opportunity to introduce a helpful object in scikit-learn called a &lt;code&gt;Pipeline&lt;/code&gt;. The idea behind a &lt;code&gt;Pipeline&lt;/code&gt; is that we can stack arbitrarily many transformation steps together in a sequence, and then cap them off with an estimator of our choice. The whole pipeline will then behave like a single estimatorâi.e., we only need to call &lt;code&gt;fit()&lt;/code&gt; and &lt;code&gt;predict()&lt;/code&gt; once. This will allow us to introduce a preprocessing step before the &lt;code&gt;LinearRegression&lt;/code&gt; model gets our data, in which we create a bunch of polynomial features (by taking &lt;code&gt;x**2&lt;/code&gt;, &lt;code&gt;x**3&lt;/code&gt;, &lt;code&gt;x**4&lt;/code&gt;, and so onâall the way up to &lt;code&gt;x**10&lt;/code&gt;). We&amp;rsquo;ll make use of scikit-learn&amp;rsquo;s handy &lt;code&gt;PolynomialFeatures&lt;/code&gt; transformer, which can be found in the &lt;a href=&#34;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.preprocessing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;preprocessing&lt;/code&gt; module&lt;/a&gt; (there are all kinds of other useful data preprocessing tools in there).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the result of our second model-fitting exercise:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline

# wrap the pipeline creation process in a function, so we can
# conveniently parameterize the degree of the polynomial.
def make_pipeline(degree=1): 
    # Polynomial regression is just linear regression with polynomial
    # features, so we can use scikit-learn&#39;s PolyNomialFeatures helper
    # to generate an expanded design matrix as an extra pipeline step
    # before model estimation.
    polynomial_features = PolynomialFeatures(degree=degree, include_bias=False)
    
    # Construct an sklearn Pipeline, which behaves like a single Estimator.
    pipeline = Pipeline([
        (&amp;quot;polynomial_features&amp;quot;, polynomial_features),
        (&amp;quot;linear_regression&amp;quot;, LinearRegression())
    ])
    return pipeline
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can initialize a pipeline with &lt;code&gt;degree=10&lt;/code&gt;, and fit it to our toy data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# play with this!
DEGREE = 10

pipeline = make_pipeline(DEGREE)

pipeline.fit(x[:, None], y)
reg_line = pipeline.predict(x_range[:, None])

plt.scatter(x, y)
plt.plot(x_range, reg_line)
mse = mean_squared_error(y, pipeline.predict(x[:, None]))
plt.title(f&amp;quot;Mean squared error: {mse:.2f}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./11_01_overfitting_underfitting_10_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;On paper, this model fits the data much better than the first model, in the sense that it reduces the mean squared error relative to the simpler linear model. But, much as it seemed clear that the previous model was underfitting, it should now be intuitively obvious to you that the 10th-degree polynomial model is &lt;em&gt;overfitting&lt;/em&gt;. That is, the line of best fit bends in some fairly unnatural ways in order to capture individual data points. While this helps reduce the error in &lt;em&gt;these&lt;/em&gt; particular data, it&amp;rsquo;s hard to imagine that the same line would still be very close to the data if we sampled from the same distribution a second or third time.&lt;/p&gt;
&lt;p&gt;We can test this intuition by doing exactly that: we sample some more data from the same process, and see how well our fitted model predicts the new scores.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;test_x, test_y = make_xy(30)

plt.scatter(test_x, test_y)

# Update the x range
x_range = np.linspace(test_x.min(), test_x.max(), 100)
reg_line = pipeline.predict(x_range[:, None])
plt.plot(x_range, reg_line)

mse = mean_squared_error(y, pipeline.predict(test_x[:, None]))
plt.title(f&amp;quot;Mean squared error: {mse:.2f}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./11_01_overfitting_underfitting_12_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s&amp;hellip; not so good. We can see that the fitted model generates wildly off-base predictions for new observations outside its original training range (though, if we zoomed in, we&amp;rsquo;d find that it&amp;rsquo;s not so hot for observations within the original range either).&lt;/p&gt;
&lt;p&gt;Of course, since we created the data-generating process ourselves, and know the ground truth in this case, we may as well go ahead and fit the data with the correct functional form, which i this case is a polynomial with degree 2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Call our pipeline-generation function
pipeline = make_pipeline(2)

# Fit to the training data
pipeline.fit(x[:, None], y)

# Predict values for range of x
x_range = np.linspace(x.min(), x.max(), 100)
reg_line = pipeline.predict(x_range[:, None])

# Plot
plt.scatter(x, y)
plt.plot(x_range, reg_line)
mse = mean_squared_error(y, pipeline.predict(x[:, None]))
plt.title(f&amp;quot;Mean squared error: {mse:.2f}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./11_01_overfitting_underfitting_14_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;There, that looks much better.&lt;/p&gt;
&lt;p&gt;Of course, in the real world, we rarely know the ground truth (if we did, we wouldn&amp;rsquo;t need to fit a model in the first place!). So we&amp;rsquo;d have to navigate between the two extremes of overfitting and underfitting in some other way. Finding this delicate balance is one of the central problems of machine learningâperhaps &lt;em&gt;the&lt;/em&gt; central problem. For any given dataset, a more flexible model will be able to capture more nuanced, subtle patterns in the data. The cost of flexibility, however, is that such a model is also more likely to hallucinateâi.e., to fit patterns in the data that are only there because of noise, and won&amp;rsquo;t generalize to new samples. Conversely, a less flexible model is only capable of fitting simple patterns in the data. This means it will avoid chasing down rabbit holes full of spurious patterns; but it does so at the cost of missing out on a lot of &lt;em&gt;real&lt;/em&gt; patterns.&lt;/p&gt;
&lt;p&gt;One way to think about this is that, as an analyst, the choice you face is almost never between &lt;em&gt;good&lt;/em&gt; models and &lt;em&gt;bad&lt;/em&gt; models, but rather, between lazy and energetic ones (later on, we&amp;rsquo;ll also see that there are many different ways to be lazy or energetic). In the above example, the straight line is a lazy model: it has only one degree of freedom to play with, and if it can&amp;rsquo;t fit the data well with that one degree of variation, it doesn&amp;rsquo;t care. It&amp;rsquo;ll just sigh and go back to the couch to watch Game of Thrones.&lt;/p&gt;
&lt;p&gt;The 10th-degree polynomial, by contrast, is hyperactive and prone to conspiracy theories: it sees patterns &lt;em&gt;everywhere&lt;/em&gt;, and is very interested in convincing you that all of the conspiracies are real.&lt;/p&gt;
&lt;p&gt;Getting it right in any given situation requires you to strike a balance between these two extremes. Unfortunately, the precise point of optimality varies on a case-by-case basis, so there is, as they say in machine learning, &lt;a href=&#34;https://en.wikipedia.org/wiki/No_free_lunch_theorem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;no free lunch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Later on, we&amp;rsquo;ll connect the ideas of overfitting vs. underfitting (or, relatedly, flexibility vs. stability) to another key conceptâthe &lt;em&gt;bias-variance tradeoff&lt;/em&gt;. For now though, let&amp;rsquo;s hone our intuitions about overfitting and underfitting by interactively playing with our polynomial regression model a bit more.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;##### provides interactive widget support
from ipywidgets import interact

def plot_fit(n=30, sd=0.5, degree=1, seed=500, show_fit=True):
    np.random.seed(seed)

    x, y = make_xy(n, sd)
    x_test, y_test = make_xy(n, sd)

    pipeline = make_pipeline(degree)
    pipeline.fit(x[:, None], y)
    fig, axes = plt.subplots(1, 2, sharex=True, sharey=True, figsize=(12, 5))
    axes[0].scatter(x, y)
    all_x = np.r_[x, x_test]
    x_range = np.linspace(all_x.min(), all_x.max(), 100)
    mse = mean_squared_error(y, pipeline.predict(x[:, None]))
    axes[0].set_title(f&amp;quot;Training sample (MSE = {mse:.2f})&amp;quot;, fontsize=16);

    axes[1].scatter(x_test, y_test, color=&#39;g&#39;)
    mse = mean_squared_error(y_test,pipeline.predict(x_test[:, None]))
    axes[1].set_title(f&amp;quot;Test sample (MSE = {mse:.2f})&amp;quot;, fontsize=16);
    
    if show_fit:
        reg_line = pipeline.predict(x_range[:, None])
        axes[0].plot(x_range, reg_line)
        axes[1].plot(x_range, reg_line, &#39;g&#39;)

# uncomment next line for static version
# plot_fit(degree=10)

interact(plot_fit, n=(10, 500, 10), sd=(0, 5, 0.1), degree=(1, 20), seed=(1, 1000, 1), show_fit=True);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;interactive(children=(IntSlider(value=30, description=&#39;n&#39;, max=500, min=10, step=10), FloatSlider(value=0.5, dâ¦
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Plotting Intro</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_01_plotting/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_01_plotting/</guid>
      <description>&lt;h2 id=&#34;visualising-data&#34;&gt;Visualising Data&lt;/h2&gt;
&lt;p&gt;The purpose of scientific computation is insight not numbers: To understand the meaning of the (many) numbers we compute, we often need postprocessing, statistical analysis and graphical visualisation of our data. The ensuing sections will outline the  use of plotting tools within Python, mainly Matplotlib, Pandas and Plotly.&lt;/p&gt;
&lt;h2 id=&#34;matplotlib&#34;&gt;Matplotlib&lt;/h2&gt;
&lt;p&gt;The Python library Matplotlib is a python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments. Matplotlib tries to make easy things easy and hard things possible. You can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc, with just a few lines of code.&lt;/p&gt;
&lt;p&gt;For more detailed information, check these links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.matplotlib.org&#34; target=&#34;_blank&#34;&gt;The project web page for matplotlib.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matplotlib/matplotlib&#34; target=&#34;_blank&#34;&gt;The source code for matplotlib.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://matplotlib.org/gallery.html&#34; target=&#34;_blank&#34;&gt;A large gallery showcaseing various types of plots matplotlib can create.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.loria.fr/~rougier/teaching/matplotlib&#34; target=&#34;_blank&#34;&gt;A good matplotlib tutorial.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scipy-lectures.github.io/matplotlib/matplotlib.html&#34; target=&#34;_blank&#34;&gt;Another good matplotlib reference.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Time Series Intro</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/21_01_timeseries_analysis/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/21_01_timeseries_analysis/</guid>
      <description>&lt;p&gt;Time series analysis refers to the analysis of change in the trend of the data over a period of time. Time series analysis has a variety of applications. One such application is the prediction of the future value of an item based on its past values. Future stock price prediction is probably the best example of such an application. In this tutorial, we will see how we can perform time series analysis with the help of Keras. We will be predicting the future stock prices of the Apple Company (AAPL), based on its stock prices of the past 5 years.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Crunching</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/21_02_timeseries_analysis/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/21_02_timeseries_analysis/</guid>
      <description>&lt;p&gt;The data that we are going to use for this article will be downloaded from Yahoo Finance. For training our algorithm, we will be using the Apple stock prices for the past 5 years. To perform this task we will first define a function that will work to scrape the Yahoo finance website.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
import requests
import re
from datetime import datetime, timedelta
from io import StringIO

###############################################################################
#                   Data Scraping Class for Yahoo Finance                     #
###############################################################################
class YahooFinanceHistory:
    timeout = 2
    crumb_link = &#39;https://finance.yahoo.com/quote/{0}/history?p={0}&#39;
    crumble_regex = r&#39;CrumbStore&amp;quot;:{&amp;quot;crumb&amp;quot;:&amp;quot;(.*?)&amp;quot;}&#39;
    quote_link = &#39;https://query1.finance.yahoo.com/v7/finance/download/{quote}?period1={dfrom}&amp;amp;period2={dto}&amp;amp;interval=1d&amp;amp;events=history&amp;amp;crumb={crumb}&#39;

    def __init__(self, symbol, days_back=7):
        self.symbol = symbol
        self.session = requests.Session()
        self.dt = timedelta(days=days_back)

    def get_crumb(self):
        response = self.session.get(self.crumb_link.format(self.symbol), timeout=self.timeout)
        response.raise_for_status()
        match = re.search(self.crumble_regex, response.text)
        if not match:
            raise ValueError(&#39;Could not get crumb from Yahoo Finance&#39;)
        else:
            self.crumb = match.group(1)

    def get_quote(self):
        if not hasattr(self, &#39;crumb&#39;) or len(self.session.cookies) == 0:
            self.get_crumb()
        now = datetime.utcnow()
        dateto = int(now.timestamp())
        datefrom = int((now - self.dt).timestamp())
        url = self.quote_link.format(quote=self.symbol, dfrom=datefrom, dto=dateto, crumb=self.crumb)
        response = self.session.get(url)
        response.raise_for_status()
        return pd.read_csv(StringIO(response.text), parse_dates=[&#39;Date&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;stock = &#39;AMD&#39;

df = YahooFinanceHistory(stock, days_back=2000).get_quote()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.tail()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;Open&lt;/th&gt;
      &lt;th&gt;High&lt;/th&gt;
      &lt;th&gt;Low&lt;/th&gt;
      &lt;th&gt;Close&lt;/th&gt;
      &lt;th&gt;Adj Close&lt;/th&gt;
      &lt;th&gt;Volume&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1375&lt;/th&gt;
      &lt;td&gt;2019-11-21&lt;/td&gt;
      &lt;td&gt;40.419998&lt;/td&gt;
      &lt;td&gt;40.709999&lt;/td&gt;
      &lt;td&gt;38.639999&lt;/td&gt;
      &lt;td&gt;39.520000&lt;/td&gt;
      &lt;td&gt;39.520000&lt;/td&gt;
      &lt;td&gt;88069400&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1376&lt;/th&gt;
      &lt;td&gt;2019-11-22&lt;/td&gt;
      &lt;td&gt;39.360001&lt;/td&gt;
      &lt;td&gt;39.889999&lt;/td&gt;
      &lt;td&gt;38.189999&lt;/td&gt;
      &lt;td&gt;39.150002&lt;/td&gt;
      &lt;td&gt;39.150002&lt;/td&gt;
      &lt;td&gt;56931900&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1377&lt;/th&gt;
      &lt;td&gt;2019-11-25&lt;/td&gt;
      &lt;td&gt;39.500000&lt;/td&gt;
      &lt;td&gt;40.169998&lt;/td&gt;
      &lt;td&gt;39.490002&lt;/td&gt;
      &lt;td&gt;39.790001&lt;/td&gt;
      &lt;td&gt;39.790001&lt;/td&gt;
      &lt;td&gt;45769500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1378&lt;/th&gt;
      &lt;td&gt;2019-11-26&lt;/td&gt;
      &lt;td&gt;39.299999&lt;/td&gt;
      &lt;td&gt;39.480000&lt;/td&gt;
      &lt;td&gt;38.810001&lt;/td&gt;
      &lt;td&gt;38.990002&lt;/td&gt;
      &lt;td&gt;38.990002&lt;/td&gt;
      &lt;td&gt;43603300&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1379&lt;/th&gt;
      &lt;td&gt;2019-11-27&lt;/td&gt;
      &lt;td&gt;39.459999&lt;/td&gt;
      &lt;td&gt;39.759998&lt;/td&gt;
      &lt;td&gt;39.070000&lt;/td&gt;
      &lt;td&gt;39.410000&lt;/td&gt;
      &lt;td&gt;39.410000&lt;/td&gt;
      &lt;td&gt;33630100&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

df_plot = df
#setting index as date
df_plot[&#39;Date&#39;] = pd.to_datetime(df_plot.Date,format=&#39;%Y-%m-%d&#39;)
df_plot.index = df_plot[&#39;Date&#39;]

#plot
plt.figure(figsize=(16,8));
plt.plot(df_plot[&#39;Close&#39;], label=&#39;Close Price history&#39;);
plt.title(&#39;{} 5 Year Stock Price&#39;.format(stock), fontweight=&#39;bold&#39;, fontsize=16);
plt.xlabel(&#39;Days&#39;, fontweight=&#39;bold&#39;);
plt.ylabel(&#39;Price (USD)&#39;, fontweight=&#39;bold&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/21/01_timeseries_analysis_4_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;You can see that the trend is highly non-linear and it is very difficult to capture the trend using this information. This is where the power of &lt;strong&gt;Long Short-Term Memory network&lt;/strong&gt; (LSTM) can be utilized. LSTM is a type of recurrent neural network capable of remembering the past information and while predicting the future values, it takes this past information into account.&lt;/p&gt;
&lt;h2 id=&#34;predicting-future-stock-prices&#34;&gt;Predicting Future Stock Prices&lt;/h2&gt;
&lt;p&gt;Stock price prediction is similar to any other machine learning problem where we are given a set of features and we have to predict a corresponding value. We will perform the same steps as we do perform in order to solve any machine learning problem.&lt;/p&gt;
&lt;p&gt;As a rule of thumb, whenever you use a neural network, you should normalize or scale your data. We will use &lt;strong&gt;MinMaxScaler&lt;/strong&gt; class from the &lt;em&gt;sklearn.preprocessing&lt;/em&gt; library to scale our data between 0 and 1.&lt;/p&gt;
&lt;p&gt;As mentioned earlier, in a time series problems, we have to predict a value at time T, based on the data from days T-N where N can be any number of steps. In this tutorial, we are going to predict the opening stock price of the data based on the opening stock prices for the past 60 days (&lt;em&gt;prediction_window_size&lt;/em&gt;). I have tried and tested different numbers and found that the best results are obtained when past 60 time steps are used. You can try different numbers and see how your algorithm performs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

# Number of days to use for prediction
prediction_window_size = 60

# Creating dataframe
data = df.sort_index(ascending=True, axis=0)
new_data = pd.DataFrame(index=range(0,len(df)),columns=[&#39;Date&#39;, &#39;Close&#39;])
for i in range(0,len(data)):
    new_data[&#39;Date&#39;][i] = data[&#39;Date&#39;][i]
    new_data[&#39;Close&#39;][i] = data[&#39;Close&#39;][i]

# Setting index
new_data.index = new_data.Date
new_data.drop(&#39;Date&#39;, axis=1, inplace=True)

# Converting dataset into x_train and y_train
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(new_data.values)

x_train, y_train = [], []
for i in range(prediction_window_size, len(scaled_data)):
    x_train.append(scaled_data[i-prediction_window_size:i,0])
    y_train.append(scaled_data[i,0])

x_train, y_train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the script above we create two lists: x_train (features) and y_train (labels). There are 1380 records in the scaled_data data. We execute a loop that starts from 61st record and stores all the previous 60 records to the feature_set list. The 61st record is stored in the y_train labels list. We need to convert both the x_train and the y_train lists to numpy arrays before we can use it for training.&lt;/p&gt;
&lt;p&gt;In order to train LSTM on our data, we need to convert our data into the shape accepted by the LSTM. We need to convert our data into three-dimensional format. The first dimension is the number of records or rows in the dataset which is 1320 in our case. The second dimension is the number of time steps which is 60 while the last dimension is the number of indicators. Since we are only using one feature, i.e Close, the number of indicators will be one.&lt;/p&gt;
&lt;h2 id=&#34;create-and-fit-lstm-network&#34;&gt;Create and Fit LSTM Network&lt;/h2&gt;
&lt;p&gt;We have preprocessed our data and have converted it into the desired format. Now is the time to create our LSTM. The LSTM model that we are going to create will be a sequential model with multiple layers. We will add four LSTM layers to our model followed by a dense layer that predicts the future stock price.&lt;/p&gt;
&lt;p&gt;In the script below we imported the &lt;strong&gt;Sequential&lt;/strong&gt; class from &lt;em&gt;keras.models&lt;/em&gt; library and &lt;strong&gt;Dense&lt;/strong&gt;, &lt;strong&gt;LSTM&lt;/strong&gt;, and &lt;strong&gt;Dropout&lt;/strong&gt; classes from &lt;em&gt;keras.layers&lt;/em&gt; library. To add a layer to the sequential model, the add method is used. Inside the add method, we passed our LSTM layer. The first parameter to the LSTM layer is the number of neurons or nodes that we want in the layer. The second parameter is return_sequences, which is set to true since we will add more layers to the model. The first parameter to the input_shape is the number of time steps while the last parameter is the number of indicators.&lt;/p&gt;
&lt;h3 id=&#34;creating-lstm-and-dropout-layers&#34;&gt;Creating LSTM and Dropout Layers&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s now add a dropout layer to our model. Dropout layer is added to avoid over-fitting, which is a phenomenon where a machine learning model performs better on the training data compared to the test data. We will then add three more LSTM and dropout layers to our model.&lt;/p&gt;
&lt;h3 id=&#34;creating-dense-layer&#34;&gt;Creating Dense Layer&lt;/h3&gt;
&lt;p&gt;To make our model more robust, we add a dense layer at the end of the model. The number of neurons in the dense layer will be set to 1 since we want to predict a single value in the output.&lt;/p&gt;
&lt;h3 id=&#34;model-compilation&#34;&gt;Model Compilation&lt;/h3&gt;
&lt;p&gt;Finally, we need to compile our LSTM before we can train it on the training data. The following script compiles the our model. We call the compile method on the Sequential model object which is &amp;ldquo;model&amp;rdquo; in our case. We use the mean squared error as loss function and to reduce the loss or to optimize the algorithm, we use the adam optimizer.&lt;/p&gt;
&lt;h3 id=&#34;algorithm-training&#34;&gt;Algorithm Training&lt;/h3&gt;
&lt;p&gt;Now is the time to train the model that we defined. To do so, we call the &lt;strong&gt;fit&lt;/strong&gt; method on the model and pass it our training features and labels. Depending upon your hardware, model training can take some time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM

# Initialising the RNN
model = Sequential()

# Adding the first LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1], 1)))
model.add(Dropout(0.2))

# Adding a second LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

# Adding a third LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50, return_sequences = True))
model.add(Dropout(0.2))

# Adding a fourth LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50))
model.add(Dropout(0.2))

# Adding the output layer
model.add(Dense(units = 1))

# Compiling the RNN
model.compile(optimizer = &#39;adam&#39;, loss = &#39;mean_squared_error&#39;)

# Fitting the RNN to the Training set
model.fit(x_train, y_train, epochs = 100, batch_size = 32,verbose=0);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;testing-our-lstm&#34;&gt;Testing our LSTM&lt;/h2&gt;
&lt;p&gt;We have successfully trained our LSTM, now is the time to test the performance of our algorithm on the test set by predicting the opening stock prices for one full year. However, as we did with the training data, we need to convert our test data in the right format.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# predicting 246 values, using past 60 from the train data
total_prediction_days = 365
inputs = new_data[-(total_prediction_days+prediction_window_size):].values
inputs = inputs.reshape(-1,1)
inputs = scaler.transform(inputs)

X_test = []
for i in range(prediction_window_size, inputs.shape[0]):
    X_test.append(inputs[i-prediction_window_size:i,0])

X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;making-predictions&#34;&gt;Making Predictions&lt;/h3&gt;
&lt;p&gt;Now is the time to see the magic. We preprocessed our test data and now we can use it to make predictions. To do so, we simply need to call the &lt;strong&gt;predict&lt;/strong&gt; method on the model that we trained. Since we scaled our data, the predictions made by the LSTM are also scaled. We need to reverse the scaled prediction back to their actual values. To do so, we can use the &lt;strong&gt;Ã¬nverse_transform&lt;/strong&gt; method of the scaler object we created during training. Take a look at the following script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;closing_price = model.predict(X_test)
closing_price = scaler.inverse_transform(closing_price)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;how-did-we-do&#34;&gt;How Did We Do?&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Split data into test and train sets
data_idx = len(new_data) - len(closing_price)
train.loc[:,0] = new_data[:data_idx]
valid.loc[:,0] = new_data[data_idx:]
valid.loc[:,&#39;Predictions&#39;] = closing_price
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(figsize=(10,6))
plt1 = ax.plot(train[&#39;Close&#39;]);
plt2 = ax.plot(valid[[&#39;Close&#39;, &#39;Predictions&#39;]]);
plt.title(&#39;{} Closing Price&#39;.format(stock), fontweight=&#39;bold&#39;, fontsize=16)
plt.xlabel(&#39;Days&#39;, fontweight=&#39;bold&#39;)
plt.ylabel(&#39;Price (USD)&#39;, fontweight=&#39;bold&#39;)
plt.legend(plt2, (&#39;Actual&#39;, &#39;Prediction&#39;), loc=&#39;center left&#39;, bbox_to_anchor=(1, 0.5));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/21/01_timeseries_analysis_15_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;y_pred = (closing_price &amp;gt; 0.5)
valid_true = new_data.values[-len(closing_price):]
rms = np.sqrt(np.mean(np.power((valid_true-closing_price),2)))



trade_dataset_temp = df
trade_dataset_temp[&#39;y_pred&#39;] = np.NaN
trade_dataset_temp.iloc[(len(trade_dataset_temp) - len(y_pred)):,-1:] = y_pred

trade_dataset = trade_dataset_temp.dropna()
trade_dataset[&#39;Tomorrows Returns&#39;] = 0.
trade_dataset[&#39;Tomorrows Returns&#39;] = np.log(trade_dataset[&#39;Close&#39;]/trade_dataset[&#39;Close&#39;].shift(1))
trade_dataset[&#39;Tomorrows Returns&#39;] = trade_dataset[&#39;Tomorrows Returns&#39;].shift(-1)
trade_dataset[&#39;Strategy Returns&#39;] = 0.
trade_dataset[&#39;Strategy Returns&#39;] = np.where(trade_dataset[&#39;y_pred&#39;] == True, trade_dataset[&#39;Tomorrows Returns&#39;], - trade_dataset[&#39;Tomorrows Returns&#39;])
trade_dataset[&#39;Cumulative Market Returns&#39;] = np.cumsum(trade_dataset[&#39;Tomorrows Returns&#39;])
trade_dataset[&#39;Cumulative Strategy Returns&#39;] = np.cumsum(trade_dataset[&#39;Strategy Returns&#39;])
plt.figure(figsize=(10,5))
plt.plot(trade_dataset[&#39;Cumulative Market Returns&#39;], color=&#39;r&#39;, label=&#39;Market Returns&#39;)
plt.plot(trade_dataset[&#39;Cumulative Strategy Returns&#39;], color=&#39;g&#39;, label=&#39;Strategy Returns&#39;)
plt.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/21/01_timeseries_analysis_16_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Loading</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/03_02_data_preprocessing/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/03_02_data_preprocessing/</guid>
      <description>&lt;p&gt;To learn how to do machine learning we&amp;rsquo;re going to need some data to work with. To facilitate learning and experimentation, scikit-learn includes a &lt;a href=&#34;https://scikit-learn.org/stable/datasets/index.html&#34; target=&#34;_blank&#34;&gt;datasets&lt;/a&gt; module containing a number of widely-used toy datasets. Here&amp;rsquo;s how we could load the (in)famous &lt;a href=&#34;https://en.wikipedia.org/wiki/Iris_flower_data_set&#34; target=&#34;_blank&#34;&gt;Iris dataset&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn import datasets

# Load a dictionary (technically, a Bunch) containing the data
iris = datasets.load_iris()

# &#39;data&#39; and &#39;target&#39; contains the feature data and classes, respectively
X, y = iris[&#39;data&#39;], iris[&#39;target&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;X&lt;/code&gt; contains feature information for 150 individual Iris flowers drawn from 3 different species. &lt;code&gt;y&lt;/code&gt; contains the true class information for all flowers. If we want to inspect the features in a tabular form, we can easily load the data into a pandas &lt;code&gt;DataFrame&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Here we&#39;re importing the pandas package, which we&#39;ll use extensively
# for data manipulation. In future sections, we&#39;ll put the core imports
# at the top of the notebook, which is the convention in Python.
import pandas as pd

# Initialize a new pandas DataFrame from the X matrix and the feature names
data = pd.DataFrame(X, columns=iris[&#39;feature_names&#39;])
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sepal length (cm)&lt;/th&gt;
      &lt;th&gt;sepal width (cm)&lt;/th&gt;
      &lt;th&gt;petal length (cm)&lt;/th&gt;
      &lt;th&gt;petal width (cm)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;5.1&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4.9&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;4.7&lt;/td&gt;
      &lt;td&gt;3.2&lt;/td&gt;
      &lt;td&gt;1.3&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4.6&lt;/td&gt;
      &lt;td&gt;3.1&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;In principle, we could use the iris dataset (or one of the other datasets bundled with scikit-learn) for many of the examples we&amp;rsquo;ll work through. But the iris dataset has some limitationsâmost notably, it&amp;rsquo;s fairly small (only 150 rows and 4 features), and has nothing to do with real world applications. Instead, we&amp;rsquo;ll use data that should be of interest to many individuals: house pricing dataset and time-series stock prices. The housing price dataset consists of various house features along with the sales price of the home. The time-series stock price datasets will be harvested from Yahoo finance.&lt;/p&gt;
&lt;p&gt;We will first make use of the house pricing dataset to learn the basics of machine learning. We&amp;rsquo;ll use &lt;a href=&#34;https://pandas.pydata.org/&#34; target=&#34;_blank&#34;&gt;pandas&lt;/a&gt;âthe reference data analysis library in Pythonâto do this. Pandas provides us with a fairly magical &lt;code&gt;read_csv&lt;/code&gt; function that can read in almost any kind of tabular data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# read_csv is a workhorse function that can read almost any kind of
# plain-text format. The returned object is a pandas DataFrame.

all_data = pd.read_csv(&#39;data/house_prices.csv&#39;, sep=&#39;,&#39;, index_col=0).reset_index(drop=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;representing-the-data&#34;&gt;Representing the data&lt;/h2&gt;
&lt;p&gt;Once the data have been read in, we can take a look at the first few rows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# head() display the first few rows of the dataset.
all_data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;MSSubClass&lt;/th&gt;
      &lt;th&gt;MSZoning&lt;/th&gt;
      &lt;th&gt;LotFrontage&lt;/th&gt;
      &lt;th&gt;LotArea&lt;/th&gt;
      &lt;th&gt;Street&lt;/th&gt;
      &lt;th&gt;Alley&lt;/th&gt;
      &lt;th&gt;LotShape&lt;/th&gt;
      &lt;th&gt;LandContour&lt;/th&gt;
      &lt;th&gt;Utilities&lt;/th&gt;
      &lt;th&gt;LotConfig&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;PoolArea&lt;/th&gt;
      &lt;th&gt;PoolQC&lt;/th&gt;
      &lt;th&gt;Fence&lt;/th&gt;
      &lt;th&gt;MiscFeature&lt;/th&gt;
      &lt;th&gt;MiscVal&lt;/th&gt;
      &lt;th&gt;MoSold&lt;/th&gt;
      &lt;th&gt;YrSold&lt;/th&gt;
      &lt;th&gt;SaleType&lt;/th&gt;
      &lt;th&gt;SaleCondition&lt;/th&gt;
      &lt;th&gt;SalePrice&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;RL&lt;/td&gt;
      &lt;td&gt;65.0&lt;/td&gt;
      &lt;td&gt;8450&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Reg&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;Inside&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2008&lt;/td&gt;
      &lt;td&gt;WD&lt;/td&gt;
      &lt;td&gt;Normal&lt;/td&gt;
      &lt;td&gt;208500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;RL&lt;/td&gt;
      &lt;td&gt;80.0&lt;/td&gt;
      &lt;td&gt;9600&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;Reg&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;FR2&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2007&lt;/td&gt;
      &lt;td&gt;WD&lt;/td&gt;
      &lt;td&gt;Normal&lt;/td&gt;
      &lt;td&gt;181500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;RL&lt;/td&gt;
      &lt;td&gt;68.0&lt;/td&gt;
      &lt;td&gt;11250&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;IR1&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;Inside&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;2008&lt;/td&gt;
      &lt;td&gt;WD&lt;/td&gt;
      &lt;td&gt;Normal&lt;/td&gt;
      &lt;td&gt;223500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;RL&lt;/td&gt;
      &lt;td&gt;60.0&lt;/td&gt;
      &lt;td&gt;9550&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;IR1&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;Corner&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2006&lt;/td&gt;
      &lt;td&gt;WD&lt;/td&gt;
      &lt;td&gt;Abnorml&lt;/td&gt;
      &lt;td&gt;140000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;60&lt;/td&gt;
      &lt;td&gt;RL&lt;/td&gt;
      &lt;td&gt;84.0&lt;/td&gt;
      &lt;td&gt;14260&lt;/td&gt;
      &lt;td&gt;Pave&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;IR1&lt;/td&gt;
      &lt;td&gt;Lvl&lt;/td&gt;
      &lt;td&gt;AllPub&lt;/td&gt;
      &lt;td&gt;FR2&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;2008&lt;/td&gt;
      &lt;td&gt;WD&lt;/td&gt;
      &lt;td&gt;Normal&lt;/td&gt;
      &lt;td&gt;250000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows Ã 80 columns&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As we can see, the data are tabular. Every row represents a different house, and every column represents a different variable. In machine learning terminology, we typically refer to the rows and columns as &lt;em&gt;samples&lt;/em&gt; and &lt;em&gt;features&lt;/em&gt;, respectively. We can thus think of our data as a two-dimensional &lt;em&gt;n&lt;/em&gt; (samples) x &lt;em&gt;p&lt;/em&gt; (features) matrix. The vast majority of algorithms implemented in the scikit-learn and keras packages expect to receive numerical matrices of this kind as their primary inputs. (Note that some of the columns in our datasetâe.g., &amp;ldquo;MSZoning&amp;rdquo; and &amp;ldquo;LotShape&amp;rdquo;âcontains strings or categorical values, so we need to pre-process these columns). One option would be to recode these columns into a numerical form before we could make proper use of them by defining different levels. The other option would be to just remove them. Since we have 80 features, we will just remove them for now. The original dataset consists of 80 columns and 1460 samples.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Matplotlib</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_02_plotting_matplotlib/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_02_plotting_matplotlib/</guid>
      <description>&lt;p&gt;Matplotlib is the &amp;ldquo;grandfather&amp;rdquo; library of data visualization with Python. It was created by John Hunter. He created it to try to replicate MatLab&amp;rsquo;s (another programming language) plotting capabilities in Python. So if you happen to be familiar with matlab, matplotlib will feel natural to you.&lt;/p&gt;
&lt;p&gt;It is an excellent 2D and 3D graphics library for generating scientific figures.&lt;/p&gt;
&lt;p&gt;Some of the major Pros of Matplotlib are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generally easy to get started for simple plots&lt;/li&gt;
&lt;li&gt;Support for custom labels and texts&lt;/li&gt;
&lt;li&gt;Great control of every element in a figure&lt;/li&gt;
&lt;li&gt;High-quality output in many formats&lt;/li&gt;
&lt;li&gt;Very customizable in general&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Matplotlib allows you to create reproducible figures programmatically. Let&amp;rsquo;s learn how to use it! Before continuing this lecture, I encourage you just to explore the official &lt;a href=&#34;http://matplotlib.org/&#34; target=&#34;_blank&#34;&gt;Matplotlib&lt;/a&gt; web page.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ll need to install matplotlib first with either:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pip install matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;importing&#34;&gt;Importing&lt;/h2&gt;
&lt;p&gt;Import the &lt;code&gt;matplotlib.pyplot&lt;/code&gt; module under the name &lt;code&gt;plt&lt;/code&gt; (the tidy way):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You&amp;rsquo;ll also need to use this line to see plots in the notebook:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That line is only for jupyter notebooks, if you are using another editor, you&amp;rsquo;ll use: &lt;strong&gt;plt.show()&lt;/strong&gt; at the end of all your plotting commands to have the figure pop up in another window.&lt;/p&gt;
&lt;h2 id=&#34;basic-example&#34;&gt;Basic Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s walk through a very simple example using two numpy arrays. You can also use lists, but most likely you&amp;rsquo;ll be passing numpy arrays or pandas columns (which essentially also behave like arrays).&lt;/p&gt;
&lt;p&gt;** The data we want to plot:**&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
x = np.linspace(0, 5, 11)
y = x ** 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5,  5. ])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;y
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([  0.  ,   0.25,   1.  ,   2.25,   4.  ,   6.25,   9.  ,  12.25,
        16.  ,  20.25,  25.  ])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;basic-matplotlib-commands&#34;&gt;Basic Matplotlib Commands&lt;/h2&gt;
&lt;p&gt;We can create a very simple line plot using the following ( I encourage you to pause and use Shift+Tab along the way to check out the document strings for the functions we are using).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.plot(x, y, &#39;r&#39;) # &#39;r&#39; is the color red
plt.xlabel(&#39;X Axis Title Here&#39;)
plt.ylabel(&#39;Y Axis Title Here&#39;)
plt.title(&#39;String Title Here&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_10_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;creating-multiplots-on-same-canvas&#34;&gt;Creating Multiplots on Same Canvas&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# plt.subplot(nrows, ncols, plot_number)
plt.subplot(1,2,1)
plt.plot(x, y, &#39;r--&#39;) # More on color options later
plt.subplot(1,2,2)
plt.plot(y, x, &#39;g*-&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_12_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;matplotlib-object-oriented-method&#34;&gt;Matplotlib Object Oriented Method&lt;/h1&gt;
&lt;p&gt;Now that we&amp;rsquo;ve seen the basics, let&amp;rsquo;s break it all down with a more formal introduction of Matplotlib&amp;rsquo;s Object Oriented API. This means we will instantiate figure objects and then call methods or attributes from that object.&lt;/p&gt;
&lt;h2 id=&#34;introduction-to-the-object-oriented-method&#34;&gt;Introduction to the Object Oriented Method&lt;/h2&gt;
&lt;p&gt;The main idea in using the more formal Object Oriented method is to create figure objects and then just call methods or attributes off of that object. This approach is nicer when dealing with a canvas that has multiple plots on it.&lt;/p&gt;
&lt;p&gt;To begin we create a figure instance. Then we can add axes to that figure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Create Figure (empty canvas)
fig = plt.figure()

# Add set of axes to figure
axes = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # left, bottom, width, height (range 0 to 1)

# Plot on that set of axes
axes.plot(x, y, &#39;b&#39;)
axes.set_xlabel(&#39;Set X Label&#39;) # Notice the use of set_ to begin methods
axes.set_ylabel(&#39;Set y Label&#39;)
axes.set_title(&#39;Set Title&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.text.Text at 0x111c85198&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_16_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Code is a little more complicated, but the advantage is that we now have full control of where the plot axes are placed, and we can easily add more than one axis to the figure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Creates blank canvas
fig = plt.figure()

axes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes
axes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # inset axes

# Larger Figure Axes 1
axes1.plot(x, y, &#39;b&#39;)
axes1.set_xlabel(&#39;X_label_axes2&#39;)
axes1.set_ylabel(&#39;Y_label_axes2&#39;)
axes1.set_title(&#39;Axes 2 Title&#39;)

# Insert Figure Axes 2
axes2.plot(y, x, &#39;r&#39;)
axes2.set_xlabel(&#39;X_label_axes2&#39;)
axes2.set_ylabel(&#39;Y_label_axes2&#39;)
axes2.set_title(&#39;Axes 2 Title&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_18_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;subplots&#34;&gt;subplots()&lt;/h2&gt;
&lt;p&gt;The plt.subplots() object will act as a more automatic axis manager.&lt;/p&gt;
&lt;p&gt;Basic use cases:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Use similar to plt.figure() except use tuple unpacking to grab fig and axes
fig, axes = plt.subplots()

# Now use the axes object to add stuff to plot
axes.plot(x, y, &#39;r&#39;)
axes.set_xlabel(&#39;x&#39;)
axes.set_ylabel(&#39;y&#39;)
axes.set_title(&#39;title&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_20_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Then you can specify the number of rows and columns when creating the subplots() object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Empty canvas of 1 by 2 subplots
fig, axes = plt.subplots(nrows=1, ncols=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_22_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Axes is an array of axes to plot on
axes
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([&amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x111f0f8d0&amp;gt;,
       &amp;lt;matplotlib.axes._subplots.AxesSubplot object at 0x1121f5588&amp;gt;], dtype=object)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can iterate through this array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for ax in axes:
    ax.plot(x, y, &#39;b&#39;)
    ax.set_xlabel(&#39;x&#39;)
    ax.set_ylabel(&#39;y&#39;)
    ax.set_title(&#39;title&#39;)

# Display the figure object    
fig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_25_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;A common issue with matplolib is overlapping subplots or figures. We ca use &lt;strong&gt;fig.tight_layout()&lt;/strong&gt; or &lt;strong&gt;plt.tight_layout()&lt;/strong&gt; method, which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(nrows=1, ncols=2)

for ax in axes:
    ax.plot(x, y, &#39;g&#39;)
    ax.set_xlabel(&#39;x&#39;)
    ax.set_ylabel(&#39;y&#39;)
    ax.set_title(&#39;title&#39;)

fig    
plt.tight_layout()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_27_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;figure-size-aspect-ratio-and-dpi&#34;&gt;Figure size, aspect ratio and DPI&lt;/h3&gt;
&lt;p&gt;Matplotlib allows the aspect ratio, DPI and figure size to be specified when the Figure object is created. You can use the &lt;code&gt;figsize&lt;/code&gt; and &lt;code&gt;dpi&lt;/code&gt; keyword arguments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;figsize&lt;/code&gt; is a tuple of the width and height of the figure in inches&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dpi&lt;/code&gt; is the dots-per-inch (pixel per inch).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(8,4), dpi=100)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.figure.Figure at 0x11228ea58&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same arguments can also be passed to layout managers, such as the &lt;code&gt;subplots&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(figsize=(12,3))

axes.plot(x, y, &#39;r&#39;)
axes.set_xlabel(&#39;x&#39;)
axes.set_ylabel(&#39;y&#39;)
axes.set_title(&#39;title&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_32_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;saving-figures&#34;&gt;Saving figures&lt;/h2&gt;
&lt;p&gt;Matplotlib can generate high-quality output in a number formats, including PNG, JPG, EPS, SVG, PGF and PDF.&lt;/p&gt;
&lt;p&gt;To save a figure to a file we can use the &lt;code&gt;savefig&lt;/code&gt; method in the &lt;code&gt;Figure&lt;/code&gt; class:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig.savefig(&amp;quot;filename.png&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we can also optionally specify the DPI and choose between different output formats:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig.savefig(&amp;quot;filename.png&amp;quot;, dpi=200)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;legends-labels-and-titles&#34;&gt;Legends, labels and titles&lt;/h2&gt;
&lt;p&gt;Now that we have covered the basics of how to create a figure canvas and add axes instances to the canvas, let&amp;rsquo;s look at how decorate a figure with titles, axis labels, and legends.&lt;/p&gt;
&lt;h3 id=&#34;figure-titles&#34;&gt;Figure titles&lt;/h3&gt;
&lt;p&gt;A title can be added to each axis instance in a figure. To set the title, use the &lt;code&gt;set_title&lt;/code&gt; method in the axes instance:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax.set_title(&amp;quot;title&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;axis-labels&#34;&gt;Axis labels&lt;/h3&gt;
&lt;p&gt;Similarly, with the methods &lt;code&gt;set_xlabel&lt;/code&gt; and &lt;code&gt;set_ylabel&lt;/code&gt;, we can set the labels of the X and Y axes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax.set_xlabel(&amp;quot;x&amp;quot;)
ax.set_ylabel(&amp;quot;y&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;legends&#34;&gt;Legends&lt;/h3&gt;
&lt;p&gt;You can use the &lt;strong&gt;label=&amp;ldquo;label text&amp;rdquo;&lt;/strong&gt; keyword argument when plots or other objects are added to the figure, and then using the &lt;strong&gt;legend&lt;/strong&gt; method without arguments to add the legend to the figure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()

ax = fig.add_axes([0,0,1,1])

ax.plot(x, x**2, label=&amp;quot;x**2&amp;quot;)
ax.plot(x, x**3, label=&amp;quot;x**3&amp;quot;)
ax.legend()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.legend.Legend at 0x113a3d8d0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_45_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Notice how are legend overlaps some of the actual plot!&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;legend&lt;/strong&gt; function takes an optional keyword argument &lt;strong&gt;loc&lt;/strong&gt; that can be used to specify where in the figure the legend is to be drawn. The allowed values of &lt;strong&gt;loc&lt;/strong&gt; are numerical codes for the various places the legend can be drawn. See the &lt;a href=&#34;http://matplotlib.org/users/legend_guide.html#legend-location&#34; target=&#34;_blank&#34;&gt;documentation page&lt;/a&gt; for details. Some of the most common &lt;strong&gt;loc&lt;/strong&gt; values are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Lots of options....

ax.legend(loc=1) # upper right corner
ax.legend(loc=2) # upper left corner
ax.legend(loc=3) # lower left corner
ax.legend(loc=4) # lower right corner

# .. many more options are available

# Most common to choose
ax.legend(loc=0) # let matplotlib decide the optimal location
fig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_47_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;colors-with-the-color-parameter&#34;&gt;Colors with the color= parameter&lt;/h3&gt;
&lt;p&gt;We can also define colors by their names or RGB hex codes and optionally provide an alpha value using the &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;alpha&lt;/code&gt; keyword arguments. Alpha indicates opacity.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

ax.plot(x, x+1, color=&amp;quot;blue&amp;quot;, alpha=0.5) # half-transparant
ax.plot(x, x+2, color=&amp;quot;#8B008B&amp;quot;)        # RGB hex code
ax.plot(x, x+3, color=&amp;quot;#FF8C00&amp;quot;)        # RGB hex code 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&amp;lt;matplotlib.lines.Line2D at 0x112179390&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_50_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;line-and-marker-styles&#34;&gt;Line and marker styles&lt;/h3&gt;
&lt;p&gt;To change the line width, we can use the &lt;code&gt;linewidth&lt;/code&gt; or &lt;code&gt;lw&lt;/code&gt; keyword argument. The line style can be selected using the &lt;code&gt;linestyle&lt;/code&gt; or &lt;code&gt;ls&lt;/code&gt; keyword arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(figsize=(12,6))

ax.plot(x, x+1, color=&amp;quot;red&amp;quot;, linewidth=0.25)
ax.plot(x, x+2, color=&amp;quot;red&amp;quot;, linewidth=0.50)
ax.plot(x, x+3, color=&amp;quot;red&amp;quot;, linewidth=1.00)
ax.plot(x, x+4, color=&amp;quot;red&amp;quot;, linewidth=2.00)

# possible linestype options â-â, âââ, â-.â, â:â, âstepsâ
ax.plot(x, x+5, color=&amp;quot;green&amp;quot;, lw=3, linestyle=&#39;-&#39;)
ax.plot(x, x+6, color=&amp;quot;green&amp;quot;, lw=3, ls=&#39;-.&#39;)
ax.plot(x, x+7, color=&amp;quot;green&amp;quot;, lw=3, ls=&#39;:&#39;)

# custom dash
line, = ax.plot(x, x+8, color=&amp;quot;black&amp;quot;, lw=1.50)
line.set_dashes([5, 10, 15, 10]) # format: line length, space length, ...

# possible marker symbols: marker = &#39;+&#39;, &#39;o&#39;, &#39;*&#39;, &#39;s&#39;, &#39;,&#39;, &#39;.&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, ...
ax.plot(x, x+ 9, color=&amp;quot;blue&amp;quot;, lw=3, ls=&#39;-&#39;, marker=&#39;+&#39;)
ax.plot(x, x+10, color=&amp;quot;blue&amp;quot;, lw=3, ls=&#39;--&#39;, marker=&#39;o&#39;)
ax.plot(x, x+11, color=&amp;quot;blue&amp;quot;, lw=3, ls=&#39;-&#39;, marker=&#39;s&#39;)
ax.plot(x, x+12, color=&amp;quot;blue&amp;quot;, lw=3, ls=&#39;--&#39;, marker=&#39;1&#39;)

# marker size and color
ax.plot(x, x+13, color=&amp;quot;purple&amp;quot;, lw=1, ls=&#39;-&#39;, marker=&#39;o&#39;, markersize=2)
ax.plot(x, x+14, color=&amp;quot;purple&amp;quot;, lw=1, ls=&#39;-&#39;, marker=&#39;o&#39;, markersize=4)
ax.plot(x, x+15, color=&amp;quot;purple&amp;quot;, lw=1, ls=&#39;-&#39;, marker=&#39;o&#39;, markersize=8, markerfacecolor=&amp;quot;red&amp;quot;)
ax.plot(x, x+16, color=&amp;quot;purple&amp;quot;, lw=1, ls=&#39;-&#39;, marker=&#39;s&#39;, markersize=8, 
        markerfacecolor=&amp;quot;yellow&amp;quot;, markeredgewidth=3, markeredgecolor=&amp;quot;green&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_53_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;control-over-axis-appearance&#34;&gt;Control over axis appearance&lt;/h3&gt;
&lt;p&gt;In this section we will look at controlling axis sizing properties in a matplotlib figure.&lt;/p&gt;
&lt;h2 id=&#34;plot-range&#34;&gt;Plot range&lt;/h2&gt;
&lt;p&gt;We can configure the ranges of the axes using the &lt;code&gt;set_ylim&lt;/code&gt; and &lt;code&gt;set_xlim&lt;/code&gt; methods in the axis object, or &lt;code&gt;axis(&#39;tight&#39;)&lt;/code&gt; for automatically getting &amp;ldquo;tightly fitted&amp;rdquo; axes ranges:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(1, 3, figsize=(12, 4))

axes[0].plot(x, x**2, x, x**3)
axes[0].set_title(&amp;quot;default axes ranges&amp;quot;)

axes[1].plot(x, x**2, x, x**3)
axes[1].axis(&#39;tight&#39;)
axes[1].set_title(&amp;quot;tight axes&amp;quot;)

axes[2].plot(x, x**2, x, x**3)
axes[2].set_ylim([0, 60])
axes[2].set_xlim([2, 5])
axes[2].set_title(&amp;quot;custom axes range&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_58_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h1 id=&#34;special-plot-types&#34;&gt;Special Plot Types&lt;/h1&gt;
&lt;p&gt;There are many specialized plots we can create, such as barplots, histograms, scatter plots, and much more. Most of these type of plots we will actually create using seaborn, a statistical plotting library for Python. But here are a few examples of these type of plots:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.scatter(x,y)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.collections.PathCollection at 0x1122be438&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_60_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from random import sample
data = sample(range(1, 1000), 100)
plt.hist(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(array([ 14.,  11.,   9.,  12.,   6.,   7.,  13.,  13.,   6.,   9.]),
 array([  28. ,  123.5,  219. ,  314.5,  410. ,  505.5,  601. ,  696.5,
         792. ,  887.5,  983. ]),
 &amp;lt;a list of 10 Patch objects&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_61_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = [np.random.normal(0, std, 100) for std in range(1, 4)]

# rectangular box plot
plt.boxplot(data,vert=True,patch_artist=True);   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/01_plotting_matplotlib_62_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ML Categories</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/04_02_ml_basics_categories/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/04_02_ml_basics_categories/</guid>
      <description>&lt;h1 id=&#34;machine-learning-categories&#34;&gt;Machine Learning Categories&lt;/h1&gt;
&lt;p&gt;At the most fundamental level, machine learning can be categorized into two main types: supervised learning and unsupervised learning&lt;/p&gt;
&lt;h2 id=&#34;supervised-learning&#34;&gt;Supervised learning&lt;/h2&gt;
&lt;p&gt;Learning is supervised whenever we know the true values that our model is trying to predict, and hence, are in a position to &amp;ldquo;supervise&amp;rdquo; the learning process by quantifying prediction accuracy and making iterative adjustments.&lt;/p&gt;
&lt;p&gt;Some examples of supervised learning problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Determining whether or not incoming email is spam&lt;/li&gt;
&lt;li&gt;Predicting a person&amp;rsquo;s age from personality scores&lt;/li&gt;
&lt;li&gt;Diagnosing schizophrenia based on genetic markers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within the class of supervised learning problems, we can draw a further distinction between &lt;strong&gt;classification&lt;/strong&gt; problems and &lt;strong&gt;regression&lt;/strong&gt; problems. In both cases, the goal is to develop a predictive model that recovers the true labels as accurately as possible. The difference between the two lies in the nature of the labels: in classification, the labels are discrete; in regression, they&amp;rsquo;re continuous.&lt;/p&gt;
&lt;p&gt;For example, suppose someone hands us the following data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
# scikit-learn has some handy utilities for generating structure data
from sklearn.datasets import make_blobs

X, y = make_blobs(n_samples=50, centers=2,
                  random_state=1, cluster_std=1)
point_style = dict(cmap=&#39;Paired&#39;, s=len(X))
plt.scatter(*X.T,c=y, **point_style);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/04/04_02_ml_basics_categories_1_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;With supervised learning we are provided labels for the data so we can have an idea of what the difference between custers.&lt;/p&gt;
&lt;h2 id=&#34;unsupervised-learning&#34;&gt;Unsupervised learning&lt;/h2&gt;
&lt;p&gt;Learning is unsupervised when there&amp;rsquo;s no ground truth or right answer, and the goal is just to learn some useful structure from the data. The learning algorithm receives no direct guidance about how well it&amp;rsquo;s performing.&lt;/p&gt;
&lt;p&gt;For example, suppose someone hands us the following data, with no further explanation and no labels:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# scikit-learn has some handy utilities for generating structure data

X, y = make_blobs(n_samples=50, centers=2,
                  random_state=1, cluster_std=1)
plt.scatter(*X.T);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/04/04_02_ml_basics_categories_3_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;It would be natural to think that these data are generated from three distinct &lt;em&gt;clusters&lt;/em&gt;. But since the data are unlabeled, we don&amp;rsquo;t know for a fact that this assignment is correct; we&amp;rsquo;re inferring the grouping in an unsupervised way, based on whatever principle are built into our estimation method (e.g., our visual system&amp;rsquo;s tendency to group objects together based on proximity). The lack of access to the ground truthâand often, it&amp;rsquo;s not even clear that there &lt;em&gt;is&lt;/em&gt; any ground truthâunderscores the difficulty of the unsupervised learning challenge.&lt;/p&gt;
&lt;h2 id=&#34;classification&#34;&gt;Classification&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s look at classification. In this case, the target labels we&amp;rsquo;re trying to predict are discrete (or categorical). For example, building a model that takes a structural brain image as input and outputs a prediction about whether the brain belongs to a dog or a cat is a classification problem, because the output is discrete: each brain belongs to one of the two classes (or categories), and no brain ever takes on an an intermediate value (though our classifiers can certainly make a graded or probabilistic prediction about which class a brain belongs to).&lt;/p&gt;
&lt;p&gt;In practice, we can often turn regression problems into classification problems by discretizing the data in some way. To make the point really clear, let&amp;rsquo;s continue with the last plot within the unsupervised section. Here we have two-dimensional data: that is, we have two features for each point, represented by the (x,y) positions of the points on the plane. In addition, we have one of three class labels for each point, here represented by the colors of the points. From these features and labels, we would like to create a model that will let us decide whether a new point should be labeled color 1, color 2 or color 3.&lt;/p&gt;
&lt;p&gt;There are a number of possible models for such a classification task, but here we will use an extremely simple one. We will make the assumption that the two groups can be separated by drawing a straight line through the plane between them, such that points on each side of the line fall in the same group. Here the model is a quantitative version of the statement &amp;ldquo;a straight line separates the classes&amp;rdquo;, while the model parameters are the particular numbers describing the location and orientation of that line for our data. The optimal values for these model parameters are learned from the data (this is the &amp;ldquo;learning&amp;rdquo; in machine learning), which is often called training the model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
from sklearn.svm import SVC

X, y = make_blobs(n_samples=50, centers=2,
                  random_state=1, cluster_std=1)

# fit the support vector classifier model
clf = SVC(kernel=&#39;linear&#39;)
clf.fit(X, y)

# Get contours describing the model
xx = np.linspace(-12, 1, 10)
yy = np.linspace(-7, 7, 10)
xy1, xy2 = np.meshgrid(xx, yy)
Z = np.array([clf.decision_function([t])
              for t in zip(xy1.flat, xy2.flat)]).reshape(xy1.shape)

# plot points and model
fig, ax = plt.subplots(figsize=(8, 6));
line_style = dict(levels = [-1.0, 0.0, 1.0],
                  linestyles = [&#39;dashed&#39;, &#39;solid&#39;, &#39;dashed&#39;],
                  colors = &#39;gray&#39;, linewidths=1)
ax.scatter(X[:, 0], X[:, 1], c=y, **point_style);
ax.contour(xy1, xy2, Z, **line_style);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/04/04_02_ml_basics_categories_6_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Numpy</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/01_02_python_basics_numpy/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/01_02_python_basics_numpy/</guid>
      <description>&lt;p&gt;NumPy (or Numpy) is a Linear Algebra Library for Python, the reason it is so important for Data Science with Python is that almost all of the libraries in the PyData Ecosystem rely on NumPy as one of their main building blocks.&lt;/p&gt;
&lt;p&gt;Numpy is also incredibly fast, as it has bindings to C libraries. For more info on why you would want to use Arrays instead of lists, check out this great &lt;a href=&#34;http://stackoverflow.com/questions/993984/why-numpy-instead-of-python-lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StackOverflow post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We will only learn the basics of NumPy, to get started we need to install it!&lt;/p&gt;
&lt;h2 id=&#34;using-numpy&#34;&gt;Using NumPy&lt;/h2&gt;
&lt;p&gt;Once you&amp;rsquo;ve installed NumPy you can import it as a library:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Numpy has many built-in functions and capabilities. We won&amp;rsquo;t cover them all but instead we will focus on some of the most important aspects of Numpy: vectors,arrays,matrices, and number generation. Let&amp;rsquo;s start by discussing arrays.&lt;/p&gt;
&lt;h2 id=&#34;numpy-arrays&#34;&gt;Numpy Arrays&lt;/h2&gt;
&lt;p&gt;NumPy arrays are the main way we will use Numpy throughout the course. Numpy arrays essentially come in two flavors: vectors and matrices. Vectors are strictly 1-d arrays and matrices are 2-d (but you should note a matrix can still have only one row or one column).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s begin our introduction by exploring how to create NumPy arrays.&lt;/p&gt;
&lt;h3 id=&#34;from-a-python-list&#34;&gt;From a Python List&lt;/h3&gt;
&lt;p&gt;We can create an array by directly converting a list or list of lists:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_list = [1,2,3]
my_list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array(my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;my_matrix = [[1,2,3],[4,5,6],[7,8,9]]
my_matrix
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.array(my_matrix)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;built-in-methods&#34;&gt;Built-in Methods&lt;/h2&gt;
&lt;p&gt;There are lots of built-in ways to generate Arrays&lt;/p&gt;
&lt;h3 id=&#34;arange&#34;&gt;arange&lt;/h3&gt;
&lt;p&gt;Return evenly spaced values within a given interval.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(0,10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.arange(0,11,2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  2,  4,  6,  8, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;zeros-and-ones&#34;&gt;zeros and ones&lt;/h3&gt;
&lt;p&gt;Generate arrays of zeros or ones&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.zeros(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0., 0., 0.])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.zeros((5,5))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.ones(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1., 1., 1.])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.ones((3,3))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1., 1., 1.],
       [1., 1., 1.],
       [1., 1., 1.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;linspace&#34;&gt;linspace&lt;/h3&gt;
&lt;p&gt;Return evenly spaced numbers over a specified interval.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.linspace(0,10,3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0.,  5., 10.])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.linspace(0,10,50)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0.        ,  0.20408163,  0.40816327,  0.6122449 ,  0.81632653,
        1.02040816,  1.2244898 ,  1.42857143,  1.63265306,  1.83673469,
        2.04081633,  2.24489796,  2.44897959,  2.65306122,  2.85714286,
        3.06122449,  3.26530612,  3.46938776,  3.67346939,  3.87755102,
        4.08163265,  4.28571429,  4.48979592,  4.69387755,  4.89795918,
        5.10204082,  5.30612245,  5.51020408,  5.71428571,  5.91836735,
        6.12244898,  6.32653061,  6.53061224,  6.73469388,  6.93877551,
        7.14285714,  7.34693878,  7.55102041,  7.75510204,  7.95918367,
        8.16326531,  8.36734694,  8.57142857,  8.7755102 ,  8.97959184,
        9.18367347,  9.3877551 ,  9.59183673,  9.79591837, 10.        ])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;eye&#34;&gt;eye&lt;/h3&gt;
&lt;p&gt;Creates an identity matrix&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.eye(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;random&#34;&gt;Random&lt;/h2&gt;
&lt;p&gt;Numpy also has lots of ways to create random number arrays:&lt;/p&gt;
&lt;h3 id=&#34;rand&#34;&gt;rand&lt;/h3&gt;
&lt;p&gt;Create an array of the given shape and populate it with random samples from a uniform distribution over &lt;code&gt;[0, 1)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.random.rand(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0.48986762, 0.01468397])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.random.rand(5,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0.49717583, 0.85567488, 0.94414447, 0.66025653, 0.85163724],
       [0.32891759, 0.74810469, 0.16001041, 0.77051371, 0.88918009],
       [0.74608104, 0.58533077, 0.40581863, 0.25006859, 0.79847227],
       [0.06457888, 0.14487206, 0.72442204, 0.62528167, 0.73544863],
       [0.38535387, 0.7203514 , 0.34161177, 0.99193526, 0.79151416]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;randn&#34;&gt;randn&lt;/h3&gt;
&lt;p&gt;Return a sample (or samples) from the &amp;ldquo;standard normal&amp;rdquo; distribution. Unlike rand which is uniform:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.random.randn(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([-1.31222401,  1.20662849])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.random.randn(5,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0.05155323, -2.03255688,  1.09044905,  1.37866648, -0.43513118],
       [-0.113966  ,  0.06371491, -0.58679889,  0.32057308, -1.90984774],
       [ 0.44065855, -0.93779379,  1.61012331, -1.21481517,  1.65470737],
       [ 1.31027626,  0.15909068,  0.85816313, -0.91927387,  1.13879634],
       [-0.18915251, -0.48102558,  0.38557437,  1.03093896,  2.00252213]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;randint&#34;&gt;randint&lt;/h3&gt;
&lt;p&gt;Return random integers from &lt;code&gt;low&lt;/code&gt; (inclusive) to &lt;code&gt;high&lt;/code&gt; (exclusive).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.random.randint(1,100)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;42
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.random.randint(1,100,10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([73, 70, 12, 99, 69, 26, 10, 41, 92,  6])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;array-attributes-and-methods&#34;&gt;Array Attributes and Methods&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s discuss some useful attributes and methods or an array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr = np.arange(25)
ranarr = np.random.randint(0,50,10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ranarr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([29, 42, 21, 45, 11, 47, 46, 43, 25, 19])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reshape&#34;&gt;Reshape&lt;/h3&gt;
&lt;p&gt;Returns an array containing the same data with a new shape.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr.reshape(5,5)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;maxminargmaxargmin&#34;&gt;max,min,argmax,argmin&lt;/h3&gt;
&lt;p&gt;These are useful methods for finding max or min values. Or to find their index locations using argmin or argmax&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ranarr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([29, 42, 21, 45, 11, 47, 46, 43, 25, 19])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ranarr.max()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;47
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ranarr.argmax()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ranarr.min()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ranarr.argmin()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;shape&#34;&gt;Shape&lt;/h3&gt;
&lt;p&gt;Shape is an attribute that arrays have (not a method):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Vector
arr.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(25,)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Notice the two sets of brackets
arr.reshape(1,25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
        16, 17, 18, 19, 20, 21, 22, 23, 24]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr.reshape(1,25).shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(1, 25)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr.reshape(25,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 0],
       [ 1],
       [ 2],
       [ 3],
       [ 4],
       [ 5],
       [ 6],
       [ 7],
       [ 8],
       [ 9],
       [10],
       [11],
       [12],
       [13],
       [14],
       [15],
       [16],
       [17],
       [18],
       [19],
       [20],
       [21],
       [22],
       [23],
       [24]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr.reshape(25,1).shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(25, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;dtype&#34;&gt;dtype&lt;/h3&gt;
&lt;p&gt;You can also grab the data type of the object in the array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr.dtype
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;dtype(&#39;int64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;numpy-indexing-and-selection&#34;&gt;NumPy Indexing and Selection&lt;/h2&gt;
&lt;p&gt;In this section we will discuss how to select elements or groups of elements from an array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Creating sample array
arr = np.arange(0,11)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Show
arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bracket-indexing-and-selection&#34;&gt;Bracket Indexing and Selection&lt;/h3&gt;
&lt;p&gt;The simplest way to pick one or some elements of an array looks very similar to python lists:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Get a value at an index
arr[8]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;8
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Get values in a range
arr[1:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Get values in a range
arr[0:5]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 1, 2, 3, 4])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;broadcasting&#34;&gt;Broadcasting&lt;/h3&gt;
&lt;p&gt;Numpy arrays differ from a normal Python list because of their ability to broadcast:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Setting a value with index range (Broadcasting)
arr[0:5]=100

#Show
arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([100, 100, 100, 100, 100,   5,   6,   7,   8,   9,  10])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Reset array, we&#39;ll see why I had to reset in  a moment
arr = np.arange(0,11)

#Show
arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Important notes on Slices
slice_of_arr = arr[0:6]

#Show slice
slice_of_arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 1, 2, 3, 4, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Change Slice
slice_of_arr[:]=99

#Show Slice again
slice_of_arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([99, 99, 99, 99, 99, 99])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now note the changes also occur in our original array!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([99, 99, 99, 99, 99, 99,  6,  7,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data is not copied, it&amp;rsquo;s a view of the original array! This avoids memory problems!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#To get a copy, need to be explicit
arr_copy = arr.copy()

arr_copy
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([99, 99, 99, 99, 99, 99,  6,  7,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;indexing-a-2d-array-matrices&#34;&gt;Indexing a 2D array (matrices)&lt;/h3&gt;
&lt;p&gt;The general format is &lt;strong&gt;arr_2d[row][col]&lt;/strong&gt; or &lt;strong&gt;arr_2d[row,col]&lt;/strong&gt;. I recommend usually using the comma notation for clarity.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr_2d = np.array(([5,10,15],[20,25,30],[35,40,45]))

#Show
arr_2d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[ 5, 10, 15],
       [20, 25, 30],
       [35, 40, 45]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Indexing row
arr_2d[1]

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([20, 25, 30])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Format is arr_2d[row][col] or arr_2d[row,col]

# Getting individual element value
arr_2d[1][0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;20&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Getting individual element value
arr_2d[1,0]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;20
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# 2D array slicing

#Shape (2,2) from top right corner
arr_2d[:2,1:]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[10, 15],
       [25, 30]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Shape bottom row
arr_2d[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([35, 40, 45])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Shape bottom row
arr_2d[2,:]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([35, 40, 45])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;fancy-indexing&#34;&gt;Fancy Indexing&lt;/h3&gt;
&lt;p&gt;Fancy indexing allows you to select entire rows or columns out of order,to show this, let&amp;rsquo;s quickly build out a numpy array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Set up matrix
arr2d = np.zeros((10,10))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Length of array
arr_length = arr2d.shape[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Set up array

for i in range(arr_length):
    arr2d[i] = i
    
arr2d
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
       [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
       [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.],
       [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.],
       [5., 5., 5., 5., 5., 5., 5., 5., 5., 5.],
       [6., 6., 6., 6., 6., 6., 6., 6., 6., 6.],
       [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.],
       [8., 8., 8., 8., 8., 8., 8., 8., 8., 8.],
       [9., 9., 9., 9., 9., 9., 9., 9., 9., 9.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fancy indexing allows the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr2d[[2,4,6,8]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
       [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.],
       [6., 6., 6., 6., 6., 6., 6., 6., 6., 6.],
       [8., 8., 8., 8., 8., 8., 8., 8., 8., 8.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Allows in any order
arr2d[[6,4,2,7]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([[6., 6., 6., 6., 6., 6., 6., 6., 6., 6.],
       [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.],
       [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],
       [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;more-indexing-help&#34;&gt;More Indexing Help&lt;/h2&gt;
&lt;p&gt;Indexing a 2d matrix can be a bit confusing at first, especially when you start to add in step size. Try google image searching NumPy indexing to fins useful images, like this one:&lt;/p&gt;
&lt;img src= &#39;http://memory.osu.edu/classes/python/_images/numpy_indexing.png&#39; width=500/&gt;
&lt;h2 id=&#34;selection&#34;&gt;Selection&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s briefly go over how to use brackets for selection based off of comparison operators.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr = np.arange(1,11)
arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr &amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([False, False, False, False,  True,  True,  True,  True,  True,
        True])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bool_arr = arr&amp;gt;4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bool_arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([False, False, False, False,  True,  True,  True,  True,  True,
        True])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr[bool_arr]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 5,  6,  7,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr[arr&amp;gt;2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 3,  4,  5,  6,  7,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = 2
arr[arr&amp;gt;x]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 3,  4,  5,  6,  7,  8,  9, 10])
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;numpy-operations&#34;&gt;NumPy Operations&lt;/h1&gt;
&lt;h2 id=&#34;arithmetic&#34;&gt;Arithmetic&lt;/h2&gt;
&lt;p&gt;You can easily perform array with array arithmetic, or scalar with array arithmetic. Let&amp;rsquo;s see some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
arr = np.arange(0,10)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr + arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr * arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  1,  4,  9, 16, 25, 36, 49, 64, 81])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr - arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Warning on division by zero, but not an error!
# Just replaced with nan
arr/arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/home/ggilmore/.local/lib/python3.6/site-packages/ipykernel_launcher.py:3: RuntimeWarning: invalid value encountered in true_divide
  This is separate from the ipykernel package so we can avoid doing imports until





array([nan,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Also warning, but not an error instead infinity
1/arr
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/home/ggilmore/.local/lib/python3.6/site-packages/ipykernel_launcher.py:2: RuntimeWarning: divide by zero encountered in true_divide
  





array([       inf, 1.        , 0.5       , 0.33333333, 0.25      ,
       0.2       , 0.16666667, 0.14285714, 0.125     , 0.11111111])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;arr**3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;universal-array-functions&#34;&gt;Universal Array Functions&lt;/h2&gt;
&lt;p&gt;Numpy comes with many &lt;a href=&#34;http://docs.scipy.org/doc/numpy/reference/ufuncs.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;universal array functions&lt;/a&gt;, which are essentially just mathematical operations you can use to perform the operation across the array. Let&amp;rsquo;s show some common ones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Taking Square Roots
np.sqrt(arr)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([0.        , 1.        , 1.41421356, 1.73205081, 2.        ,
       2.23606798, 2.44948974, 2.64575131, 2.82842712, 3.        ])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Calcualting exponential (e^)
np.exp(arr)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01,
       5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03,
       2.98095799e+03, 8.10308393e+03])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.max(arr) #same as arr.max()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;9
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.sin(arr)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ,
       -0.95892427, -0.2794155 ,  0.6569866 ,  0.98935825,  0.41211849])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;np.log(arr)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/home/ggilmore/.local/lib/python3.6/site-packages/ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in log
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.





array([      -inf, 0.        , 0.69314718, 1.09861229, 1.38629436,
       1.60943791, 1.79175947, 1.94591015, 2.07944154, 2.19722458])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Advanced Matplotlib</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_03_plotting_advance_matplotlib/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_03_plotting_advance_matplotlib/</guid>
      <description>&lt;p&gt;In this tutorial we cover some more advanced topics which you won&amp;rsquo;t usually use as often.&lt;/p&gt;
&lt;h4 id=&#34;logarithmic-scale&#34;&gt;Logarithmic scale&lt;/h4&gt;
&lt;p&gt;It is also possible to set a logarithmic scale for one or both axes. This functionality is in fact only one application of a more general transformation system in Matplotlib. Each of the axes&#39; scales are set seperately using &lt;code&gt;set_xscale&lt;/code&gt; and &lt;code&gt;set_yscale&lt;/code&gt; methods which accept one parameter (with the value &amp;ldquo;log&amp;rdquo; in this case):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(1, 2, figsize=(10,4))
      
axes[0].plot(x, x**2, x, np.exp(x))
axes[0].set_title(&amp;quot;Normal scale&amp;quot;)

axes[1].plot(x, x**2, x, np.exp(x))
axes[1].set_yscale(&amp;quot;log&amp;quot;)
axes[1].set_title(&amp;quot;Logarithmic scale (y)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_3_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;placement-of-ticks-and-custom-tick-labels&#34;&gt;Placement of ticks and custom tick labels&lt;/h3&gt;
&lt;p&gt;We can explicitly determine where we want the axis ticks with &lt;code&gt;set_xticks&lt;/code&gt; and &lt;code&gt;set_yticks&lt;/code&gt;, which both take a list of values for where on the axis the ticks are to be placed. We can also use the &lt;code&gt;set_xticklabels&lt;/code&gt; and &lt;code&gt;set_yticklabels&lt;/code&gt; methods to provide a list of custom text labels for each tick location:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(figsize=(10, 4))

ax.plot(x, x**2, x, x**3, lw=2)

ax.set_xticks([1, 2, 3, 4, 5])
ax.set_xticklabels([r&#39;$\alpha$&#39;, r&#39;$\beta$&#39;, r&#39;$\gamma$&#39;, r&#39;$\delta$&#39;, r&#39;$\epsilon$&#39;], fontsize=18)

yticks = [0, 50, 100, 150]
ax.set_yticks(yticks)
ax.set_yticklabels([&amp;quot;$%.1f$&amp;quot; % y for y in yticks], fontsize=18); # use LaTeX formatted labels
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_6_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;There are a number of more advanced methods for controlling major and minor tick placement in matplotlib figures, such as automatic placement according to different policies. See &lt;a href=&#34;http://matplotlib.org/api/ticker_api.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://matplotlib.org/api/ticker_api.html&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4 id=&#34;scientific-notation&#34;&gt;Scientific notation&lt;/h4&gt;
&lt;p&gt;With large numbers on axes, it is often better use scientific notation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(1, 1)
      
ax.plot(x, x**2, x, np.exp(x))
ax.set_title(&amp;quot;scientific notation&amp;quot;)

ax.set_yticks([0, 50, 100, 150])

from matplotlib import ticker
formatter = ticker.ScalarFormatter(useMathText=True)
formatter.set_scientific(True) 
formatter.set_powerlimits((-1,1)) 
ax.yaxis.set_major_formatter(formatter) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_10_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;axis-number-and-axis-label-spacing&#34;&gt;Axis number and axis label spacing&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# distance between x and y axis and the numbers on the axes
matplotlib.rcParams[&#39;xtick.major.pad&#39;] = 5
matplotlib.rcParams[&#39;ytick.major.pad&#39;] = 5

fig, ax = plt.subplots(1, 1)
      
ax.plot(x, x**2, x, np.exp(x))
ax.set_yticks([0, 50, 100, 150])

ax.set_title(&amp;quot;label and axis spacing&amp;quot;)

# padding between axis label and axis numbers
ax.xaxis.labelpad = 5
ax.yaxis.labelpad = 5

ax.set_xlabel(&amp;quot;x&amp;quot;)
ax.set_ylabel(&amp;quot;y&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_12_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# restore defaults
matplotlib.rcParams[&#39;xtick.major.pad&#39;] = 3
matplotlib.rcParams[&#39;ytick.major.pad&#39;] = 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;axis-position-adjustments&#34;&gt;Axis position adjustments&lt;/h4&gt;
&lt;p&gt;Unfortunately, when saving figures the labels are sometimes clipped, and it can be necessary to adjust the positions of axes a little bit. This can be done using &lt;code&gt;subplots_adjust&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(1, 1)
      
ax.plot(x, x**2, x, np.exp(x))
ax.set_yticks([0, 50, 100, 150])

ax.set_title(&amp;quot;title&amp;quot;)
ax.set_xlabel(&amp;quot;x&amp;quot;)
ax.set_ylabel(&amp;quot;y&amp;quot;)

fig.subplots_adjust(left=0.15, right=.9, bottom=0.1, top=0.9);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_16_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;axis-grid&#34;&gt;Axis grid&lt;/h3&gt;
&lt;p&gt;With the &lt;code&gt;grid&lt;/code&gt; method in the axis object, we can turn on and off grid lines. We can also customize the appearance of the grid lines using the same keyword arguments as the &lt;code&gt;plot&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(1, 2, figsize=(10,3))

# default grid appearance
axes[0].plot(x, x**2, x, x**3, lw=2)
axes[0].grid(True)

# custom grid appearance
axes[1].plot(x, x**2, x, x**3, lw=2)
axes[1].grid(color=&#39;b&#39;, alpha=0.5, linestyle=&#39;dashed&#39;, linewidth=0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_19_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;axis-spines&#34;&gt;Axis spines&lt;/h3&gt;
&lt;p&gt;We can also change the properties of axis spines:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(figsize=(6,2))

ax.spines[&#39;bottom&#39;].set_color(&#39;blue&#39;)
ax.spines[&#39;top&#39;].set_color(&#39;blue&#39;)

ax.spines[&#39;left&#39;].set_color(&#39;red&#39;)
ax.spines[&#39;left&#39;].set_linewidth(2)

# turn off axis spine to the right
ax.spines[&#39;right&#39;].set_color(&amp;quot;none&amp;quot;)
ax.yaxis.tick_left() # only ticks on the left side
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_22_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;twin-axes&#34;&gt;Twin axes&lt;/h3&gt;
&lt;p&gt;Sometimes it is useful to have dual x or y axes in a figure; for example, when plotting curves with different units together. Matplotlib supports this with the &lt;code&gt;twinx&lt;/code&gt; and &lt;code&gt;twiny&lt;/code&gt; functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax1 = plt.subplots()

ax1.plot(x, x**2, lw=2, color=&amp;quot;blue&amp;quot;)
ax1.set_ylabel(r&amp;quot;area $(m^2)$&amp;quot;, fontsize=18, color=&amp;quot;blue&amp;quot;)
for label in ax1.get_yticklabels():
    label.set_color(&amp;quot;blue&amp;quot;)
    
ax2 = ax1.twinx()
ax2.plot(x, x**3, lw=2, color=&amp;quot;red&amp;quot;)
ax2.set_ylabel(r&amp;quot;volume $(m^3)$&amp;quot;, fontsize=18, color=&amp;quot;red&amp;quot;)
for label in ax2.get_yticklabels():
    label.set_color(&amp;quot;red&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_25_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;axes-where-x-and-y-is-zero&#34;&gt;Axes where x and y is zero&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

ax.spines[&#39;right&#39;].set_color(&#39;none&#39;)
ax.spines[&#39;top&#39;].set_color(&#39;none&#39;)

ax.xaxis.set_ticks_position(&#39;bottom&#39;)
ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;,0)) # set position of x spine to x=0

ax.yaxis.set_ticks_position(&#39;left&#39;)
ax.spines[&#39;left&#39;].set_position((&#39;data&#39;,0))   # set position of y spine to y=0

xx = np.linspace(-0.75, 1., 100)
ax.plot(xx, xx**3);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_27_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;other-2d-plot-styles&#34;&gt;Other 2D plot styles&lt;/h3&gt;
&lt;p&gt;In addition to the regular &lt;code&gt;plot&lt;/code&gt; method, there are a number of other functions for generating different kind of plots. See the &lt;a href=&#34;http://matplotlib.org/gallery.html&#34; target=&#34;_blank&#34;&gt;matplotlib plot gallery&lt;/a&gt; for a complete list of available plot types. Some of the more useful ones are show below:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n = np.array([0,1,2,3,4,5])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, axes = plt.subplots(1, 4, figsize=(12,3))

axes[0].scatter(xx, xx + 0.25*np.random.randn(len(xx)))
axes[0].set_title(&amp;quot;scatter&amp;quot;)

axes[1].step(n, n**2, lw=2)
axes[1].set_title(&amp;quot;step&amp;quot;)

axes[2].bar(n, n**2, align=&amp;quot;center&amp;quot;, width=0.5, alpha=0.5)
axes[2].set_title(&amp;quot;bar&amp;quot;)

axes[3].fill_between(x, x**2, x**3, color=&amp;quot;green&amp;quot;, alpha=0.5);
axes[3].set_title(&amp;quot;fill_between&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_31_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;text-annotation&#34;&gt;Text annotation&lt;/h3&gt;
&lt;p&gt;Annotating text in matplotlib figures can be done using the &lt;code&gt;text&lt;/code&gt; function. It supports LaTeX formatting just like axis label texts and titles:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

ax.plot(xx, xx**2, xx, xx**3)

ax.text(0.15, 0.2, r&amp;quot;$y=x^2$&amp;quot;, fontsize=20, color=&amp;quot;blue&amp;quot;)
ax.text(0.65, 0.1, r&amp;quot;$y=x^3$&amp;quot;, fontsize=20, color=&amp;quot;green&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_34_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;figures-with-multiple-subplots-and-insets&#34;&gt;Figures with multiple subplots and insets&lt;/h3&gt;
&lt;p&gt;Axes can be added to a matplotlib Figure canvas manually using &lt;code&gt;fig.add_axes&lt;/code&gt; or using a sub-figure layout manager such as &lt;code&gt;subplots&lt;/code&gt;, &lt;code&gt;subplot2grid&lt;/code&gt;, or &lt;code&gt;gridspec&lt;/code&gt;:&lt;/p&gt;
&lt;h4 id=&#34;subplots&#34;&gt;subplots&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots(2, 3)
fig.tight_layout()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_38_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;subplot2grid&#34;&gt;subplot2grid&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()
ax1 = plt.subplot2grid((3,3), (0,0), colspan=3)
ax2 = plt.subplot2grid((3,3), (1,0), colspan=2)
ax3 = plt.subplot2grid((3,3), (1,2), rowspan=2)
ax4 = plt.subplot2grid((3,3), (2,0))
ax5 = plt.subplot2grid((3,3), (2,1))
fig.tight_layout()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_40_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;gridspec&#34;&gt;gridspec&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.gridspec as gridspec
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure()

gs = gridspec.GridSpec(2, 3, height_ratios=[2,1], width_ratios=[1,2,1])
for g in gs:
    ax = fig.add_subplot(g)
    
fig.tight_layout()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_43_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;add_axes&#34;&gt;add_axes&lt;/h4&gt;
&lt;p&gt;Manually adding axes with &lt;code&gt;add_axes&lt;/code&gt; is useful for adding insets to figures:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

ax.plot(xx, xx**2, xx, xx**3)
fig.tight_layout()

# inset
inset_ax = fig.add_axes([0.2, 0.55, 0.35, 0.35]) # X, Y, width, height

inset_ax.plot(xx, xx**2, xx, xx**3)
inset_ax.set_title(&#39;zoom near origin&#39;)

# set axis range
inset_ax.set_xlim(-.2, .2)
inset_ax.set_ylim(-.005, .01)

# set axis tick locations
inset_ax.set_yticks([0, 0.005, 0.01])
inset_ax.set_xticks([-0.1,0,.1]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_46_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;colormap-and-contour-figures&#34;&gt;Colormap and contour figures&lt;/h3&gt;
&lt;p&gt;Colormaps and contour figures are useful for plotting functions of two variables. In most of these functions we will use a colormap to encode one dimension of the data. There are a number of predefined colormaps. It is relatively straightforward to define custom colormaps, matplotlib has &lt;a href=&#34;http://www.scipy.org/Cookbook/Matplotlib/Show_colormaps&#34; target=&#34;_blank&#34;&gt;pre-defined colormaps&lt;/a&gt; for you to choose from.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;alpha = 0.7
phi_ext = 2 * np.pi * 0.5

def flux_qubit_potential(phi_m, phi_p):
    return 2 + alpha - 2 * np.cos(phi_p) * np.cos(phi_m) - alpha * np.cos(phi_ext - 2*phi_p)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;phi_m = np.linspace(0, 2*np.pi, 100)
phi_p = np.linspace(0, 2*np.pi, 100)
X,Y = np.meshgrid(phi_p, phi_m)
Z = flux_qubit_potential(X, Y).T
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;pcolor&#34;&gt;pcolor&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

p = ax.pcolor(X/(2*np.pi), Y/(2*np.pi), Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max())
cb = fig.colorbar(p, ax=ax)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_52_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;imshow&#34;&gt;imshow&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

im = ax.imshow(Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])
im.set_interpolation(&#39;bilinear&#39;)

cb = fig.colorbar(im, ax=ax)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_54_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;contour&#34;&gt;contour&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig, ax = plt.subplots()

cnt = ax.contour(Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_56_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;3d-figures&#34;&gt;3D figures&lt;/h2&gt;
&lt;p&gt;To use 3D graphics in matplotlib, we first need to create an instance of the &lt;code&gt;Axes3D&lt;/code&gt; class. 3D axes can be added to a matplotlib figure canvas in exactly the same way as 2D axes; or, more conveniently, by passing a &lt;code&gt;projection=&#39;3d&#39;&lt;/code&gt; keyword argument to the &lt;code&gt;add_axes&lt;/code&gt; or &lt;code&gt;add_subplot&lt;/code&gt; methods.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from mpl_toolkits.mplot3d.axes3d import Axes3D
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;surface-plots&#34;&gt;Surface plots&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(14,6))

# `ax` is a 3D-aware axis instance because of the projection=&#39;3d&#39; keyword argument to add_subplot
ax = fig.add_subplot(1, 2, 1, projection=&#39;3d&#39;)

p = ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0)

# surface_plot with color grading and color bar
ax = fig.add_subplot(1, 2, 2, projection=&#39;3d&#39;)
p = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=matplotlib.cm.coolwarm, linewidth=0, antialiased=False)
cb = fig.colorbar(p, shrink=0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_61_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;wire-frame-plot&#34;&gt;Wire-frame plot&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(8,6))

ax = fig.add_subplot(1, 1, 1, projection=&#39;3d&#39;)

p = ax.plot_wireframe(X, Y, Z, rstride=4, cstride=4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_63_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h4 id=&#34;coutour-plots-with-projections&#34;&gt;Coutour plots with projections&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fig = plt.figure(figsize=(8,6))

ax = fig.add_subplot(1,1,1, projection=&#39;3d&#39;)

ax.plot_surface(X, Y, Z, rstride=4, cstride=4, alpha=0.25)
cset = ax.contour(X, Y, Z, zdir=&#39;z&#39;, offset=-np.pi, cmap=matplotlib.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir=&#39;x&#39;, offset=-np.pi, cmap=matplotlib.cm.coolwarm)
cset = ax.contour(X, Y, Z, zdir=&#39;y&#39;, offset=3*np.pi, cmap=matplotlib.cm.coolwarm)

ax.set_xlim3d(-np.pi, 2*np.pi);
ax.set_ylim3d(0, 3*np.pi);
ax.set_zlim3d(-np.pi, 2*np.pi);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/02_plotting_advance_matplotlib_65_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/04_03_ml_basics_data_types/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/04_03_ml_basics_data_types/</guid>
      <description>&lt;h1 id=&#34;data-types&#34;&gt;Data Types&lt;/h1&gt;
&lt;p&gt;We often begin exploratory data analysis by examining the types of data that occur in a table. Although there are multiple ways of categorizing data types, in this book we discuss three broad types of data:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Nominal data&lt;/strong&gt;, which represents categories that do not have a natural ordering. For example: political party affiliation (Democrat, Republican, Other), sex (male, female, other), and computer operating system (Windows, MacOS, Linux).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ordinal data&lt;/strong&gt;, which represents ordered categories. For example: T-shirt sizes (small, medium, large), Likert-scale responses (disagree, neutral, agree), and level of education (high school, college, graduate school). Ordinal and nominal data are considered subtypes of categorical data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Numerical data&lt;/strong&gt;, which represents amounts or quantities. For example: heights, prices, and distances.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We refer to these types as statistical data types, or simply data types.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Input Variables</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/03_03_data_preprocessing_input_variables/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/03_03_data_preprocessing_input_variables/</guid>
      <description>&lt;p&gt;Having some features we can use to make predictions is great, but we also need to know what we&amp;rsquo;re trying to predict! Conventionally, the target of the prediction process is a vector of scores usually labeled &lt;strong&gt;y&lt;/strong&gt;. The features are thus seperated into two main variables denoted with &lt;strong&gt;X&lt;/strong&gt; and &lt;strong&gt;y&lt;/strong&gt;. The &lt;strong&gt;X&lt;/strong&gt; variable will contain all of the features and samples except for the output or target feature sale price. We are using sale price as our target predictor feature, which gets assigned to the &lt;strong&gt;y&lt;/strong&gt; variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.model_selection import train_test_split

# Set final input features and output variable
y = X[&#39;SalePrice&#39;]
X = X.drop([&#39;SalePrice&#39;], axis =1)

# Split data into test and train sets
X_train, X_test, y_train, y_test = train_test_split(X, y.to_numpy().ravel(), test_size=0.30, random_state=101)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first approach to remove some of the features will be to examine the correlation between the features and the independent variable (target) of sale price:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns

# matplotlib is Python&#39;s main plotting library.
# the plt module provides high-level access to plots.
import matplotlib.pyplot as plt

### tells the jupyter notebook to display plots in-line
%matplotlib inline

# Select only columns that are numeric
all_data = all_data.select_dtypes([&#39;number&#39;])

# Create correlation matrix
correlation_matrix = all_data.corr()

fig, ax = plt.subplots(figsize=(10,7)) 
sns.heatmap(data=correlation_matrix, annot=True, ax=ax);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will now remove features that have a low correlation with sales price as these features to not contribute significantly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Correlation with output variable
cor_target = abs(correlation_matrix[&amp;quot;SalePrice&amp;quot;])

# Selecting correlated features above threshold
relevant_features = cor_target[cor_target&amp;gt;0.1]
X = all_data[relevant_features.index.values]

# Remove any rows that contain NaN
for ifeature in relevant_features.index.values:
    X = X[pd.notnull(X[ifeature])]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Histogram of the sales
X[&#39;SalePrice&#39;].plot(kind=&#39;hist&#39;, color=&#39;purple&#39;, edgecolor=&#39;black&#39;, figsize=(10,6), bins = 30);
plt.title(&#39;Distribution of House Sale Price&#39;, fontweight=&#39;bold&#39;);
plt.xlabel(&#39;Sale Price (USD)&#39;, fontweight=&#39;bold&#39;);
plt.ylabel(&#39;Frequency&#39;, fontweight=&#39;bold&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The cleaned-up version of the distribution of sales price, the dataset now contains 1121 samples and 27 features.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/01_03_python_basics_pandas/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/01_03_python_basics_pandas/</guid>
      <description>&lt;p&gt;Pandas is a newer package built on top of NumPy, and provides an efficient implementation of a &lt;strong&gt;DataFrame&lt;/strong&gt;. &lt;strong&gt;DataFrames&lt;/strong&gt; are essentially multidimensional arrays with attached row and column labels, and often with heterogeneous types and/or missing data. As well as offering a convenient storage interface for labeled data, Pandas implements a number of powerful data operations familiar to users of both database frameworks and spreadsheet programs.&lt;/p&gt;
&lt;p&gt;At the very basic level, Pandas objects can be thought of as enhanced versions of NumPy structured arrays in which the rows and columns are identified with labels rather than simple integer indices. As we will see during the course of this chapter, Pandas provides a host of useful tools, methods, and functionality on top of the basic data structures, but nearly everything that follows will require an understanding of what these structures are. Thus, before we go any further, let&amp;rsquo;s introduce these three fundamental Pandas data structures: the Series, DataFrame, and Index.&lt;/p&gt;
&lt;h2 id=&#34;series&#34;&gt;Series&lt;/h2&gt;
&lt;p&gt;The first main data type we will learn about for pandas is the Series data type. Let&amp;rsquo;s import Pandas and explore the Series object. A Series is very similar to a NumPy array (in fact it is built on top of the NumPy array object). What differentiates the NumPy array from a Series, is that a Series can have axis labels, meaning it can be indexed by a label, instead of just a number location. It also doesn&amp;rsquo;t need to hold numeric data, it can hold any arbitrary Python Object.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s explore this concept through some examples:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can convert a list,numpy array, or dictionary to a Series:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;labels = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]
my_list = [10,20,30]
arr = np.array([10,20,30])
d = {&#39;a&#39;:10,&#39;b&#39;:20,&#39;c&#39;:30}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** Using Lists**&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.Series(data=my_list)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0    10
1    20
2    30
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.Series(data=my_list,index=labels)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a    10
b    20
c    30
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.Series(my_list,labels)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a    10
b    20
c    30
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** NumPy Arrays **&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.Series(arr)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0    10
1    20
2    30
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.Series(arr,labels)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a    10
b    20
c    30
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** Dictionary**&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.Series(d)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;a    10
b    20
c    30
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;data-in-a-series&#34;&gt;Data in a Series&lt;/h3&gt;
&lt;p&gt;A pandas Series can hold a variety of object types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.Series(data=labels)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0    a
1    b
2    c
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Even functions (although unlikely that you will use this)
pd.Series([sum,print,len])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0      &amp;lt;built-in function sum&amp;gt;
1    &amp;lt;built-in function print&amp;gt;
2      &amp;lt;built-in function len&amp;gt;
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-an-index&#34;&gt;Using an Index&lt;/h3&gt;
&lt;p&gt;The key to using a Series is understanding its index. Pandas makes use of these index names or numbers by allowing for fast look ups of information (works like a hash table or dictionary).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see some examples of how to grab information from a Series. Let us create two sereis, ser1 and ser2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ser1 = pd.Series([1,2,3,4],index = [&#39;USA&#39;, &#39;Germany&#39;,&#39;USSR&#39;, &#39;Japan&#39;])                                   
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ser1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;USA        1
Germany    2
USSR       3
Japan      4
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ser2 = pd.Series([1,2,5,4],index = [&#39;USA&#39;, &#39;Germany&#39;,&#39;Italy&#39;, &#39;Japan&#39;])                                   
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ser2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;USA        1
Germany    2
Italy      5
Japan      4
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ser1[&#39;USA&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Operations are then also done based off of index:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ser1 + ser2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Germany    4.0
Italy      NaN
Japan      8.0
USA        2.0
USSR       NaN
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s stop here for now and move on to DataFrames, which will expand on the concept of Series!&lt;/p&gt;
&lt;h2 id=&#34;dataframes&#34;&gt;DataFrames&lt;/h2&gt;
&lt;p&gt;DataFrames are the workhorse of pandas and are directly inspired by the R programming language. We can think of a DataFrame as a bunch of Series objects put together to share the same index. Let&amp;rsquo;s use pandas to explore this topic!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from numpy.random import randn
np.random.seed(101)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(randn(5,4),index=&#39;A B C D E&#39;.split(),columns=&#39;W X Y Z&#39;.split())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;selection-and-indexing&#34;&gt;Selection and Indexing&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s learn the various methods to grab data from a DataFrame&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;W&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A    2.706850
B    0.651118
C   -2.018168
D    0.188695
E    0.190794
Name: W, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Pass a list of column names
df[[&#39;W&#39;,&#39;Z&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# SQL Syntax (NOT RECOMMENDED!)
df.W
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A    2.706850
B    0.651118
C   -2.018168
D    0.188695
E    0.190794
Name: W, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DataFrame Columns are just Series&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type(df[&#39;W&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;pandas.core.series.Series
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;creating-a-new-column&#34;&gt;Creating a new column&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;new&#39;] = df[&#39;W&#39;] + df[&#39;Y&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
      &lt;th&gt;new&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
      &lt;td&gt;3.614819&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
      &lt;td&gt;-0.196959&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
      &lt;td&gt;-1.489355&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
      &lt;td&gt;-0.744542&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
      &lt;td&gt;2.796762&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;removing-columns&#34;&gt;Removing Columns&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.drop(&#39;new&#39;,axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Not inplace unless specified!
df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
      &lt;th&gt;new&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
      &lt;td&gt;3.614819&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
      &lt;td&gt;-0.196959&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
      &lt;td&gt;-1.489355&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
      &lt;td&gt;-0.744542&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
      &lt;td&gt;2.796762&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.drop(&#39;new&#39;,axis=1,inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Can also drop rows this way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.drop(&#39;E&#39;,axis=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;selecting-rows&#34;&gt;Selecting Rows&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&#39;A&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;W    2.706850
X    0.628133
Y    0.907969
Z    0.503826
Name: A, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or select based off of position instead of label&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.iloc[2]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;W   -2.018168
X    0.740122
Y    0.528813
Z   -0.589001
Name: C, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;selecting-subset-of-rows-and-columns&#34;&gt;Selecting subset of rows and columns&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&#39;B&#39;,&#39;Y&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;-0.84807698340363147
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[[&#39;A&#39;,&#39;B&#39;],[&#39;W&#39;,&#39;Y&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;conditional-selection&#34;&gt;Conditional Selection&lt;/h3&gt;
&lt;p&gt;An important feature of pandas is conditional selection using bracket notation, very similar to numpy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df&amp;gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[df&amp;gt;0]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[df[&#39;W&#39;]&amp;gt;0]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[df[&#39;W&#39;]&amp;gt;0][&#39;Y&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A    0.907969
B   -0.848077
D   -0.933237
E    2.605967
Name: Y, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[df[&#39;W&#39;]&amp;gt;0][[&#39;Y&#39;,&#39;X&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;For two conditions you can use | and &amp;amp; with parenthesis:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[(df[&#39;W&#39;]&amp;gt;0) &amp;amp; (df[&#39;Y&#39;] &amp;gt; 1)]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;more-index-details&#34;&gt;More Index Details&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s discuss some more features of indexing, including resetting the index or setting it something else. We&amp;rsquo;ll also talk about index hierarchy!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Reset to default 0,1...n index
df.reset_index()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;index&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;D&lt;/td&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;E&lt;/td&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;newind = &#39;CA NY WY OR CO&#39;.split()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;States&#39;] = newind
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
      &lt;th&gt;States&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
      &lt;td&gt;NY&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
      &lt;td&gt;WY&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
      &lt;td&gt;OR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.set_index(&#39;States&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;States&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;CA&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NY&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;WY&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;OR&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CO&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
      &lt;th&gt;States&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
      &lt;td&gt;NY&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
      &lt;td&gt;WY&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
      &lt;td&gt;OR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;E&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.set_index(&#39;States&#39;,inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;W&lt;/th&gt;
      &lt;th&gt;X&lt;/th&gt;
      &lt;th&gt;Y&lt;/th&gt;
      &lt;th&gt;Z&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;States&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;CA&lt;/th&gt;
      &lt;td&gt;2.706850&lt;/td&gt;
      &lt;td&gt;0.628133&lt;/td&gt;
      &lt;td&gt;0.907969&lt;/td&gt;
      &lt;td&gt;0.503826&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;NY&lt;/th&gt;
      &lt;td&gt;0.651118&lt;/td&gt;
      &lt;td&gt;-0.319318&lt;/td&gt;
      &lt;td&gt;-0.848077&lt;/td&gt;
      &lt;td&gt;0.605965&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;WY&lt;/th&gt;
      &lt;td&gt;-2.018168&lt;/td&gt;
      &lt;td&gt;0.740122&lt;/td&gt;
      &lt;td&gt;0.528813&lt;/td&gt;
      &lt;td&gt;-0.589001&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;OR&lt;/th&gt;
      &lt;td&gt;0.188695&lt;/td&gt;
      &lt;td&gt;-0.758872&lt;/td&gt;
      &lt;td&gt;-0.933237&lt;/td&gt;
      &lt;td&gt;0.955057&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;CO&lt;/th&gt;
      &lt;td&gt;0.190794&lt;/td&gt;
      &lt;td&gt;1.978757&lt;/td&gt;
      &lt;td&gt;2.605967&lt;/td&gt;
      &lt;td&gt;0.683509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;multi-index-and-index-hierarchy&#34;&gt;Multi-Index and Index Hierarchy&lt;/h3&gt;
&lt;p&gt;Let us go over how to work with Multi-Index, first we&amp;rsquo;ll create a quick example of what a Multi-Indexed DataFrame would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Index Levels
outside = [&#39;G1&#39;,&#39;G1&#39;,&#39;G1&#39;,&#39;G2&#39;,&#39;G2&#39;,&#39;G2&#39;]
inside = [1,2,3,1,2,3]
hier_index = list(zip(outside,inside))
hier_index = pd.MultiIndex.from_tuples(hier_index)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;hier_index
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;MultiIndex(levels=[[&#39;G1&#39;, &#39;G2&#39;], [1, 2, 3]],
           labels=[[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(np.random.randn(6,2),index=hier_index,columns=[&#39;A&#39;,&#39;B&#39;])
df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;3&#34; valign=&#34;top&#34;&gt;G1&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.153661&lt;/td&gt;
      &lt;td&gt;0.167638&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;-0.765930&lt;/td&gt;
      &lt;td&gt;0.962299&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;0.902826&lt;/td&gt;
      &lt;td&gt;-0.537909&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;3&#34; valign=&#34;top&#34;&gt;G2&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;-1.549671&lt;/td&gt;
      &lt;td&gt;0.435253&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1.259904&lt;/td&gt;
      &lt;td&gt;-0.447898&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;0.266207&lt;/td&gt;
      &lt;td&gt;0.412580&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s show how to index this! For index hierarchy we use df.loc[], if this was on the columns axis, you would just use normal bracket notation df[]. Calling one level of the index returns the sub-dataframe:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&#39;G1&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.153661&lt;/td&gt;
      &lt;td&gt;0.167638&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;-0.765930&lt;/td&gt;
      &lt;td&gt;0.962299&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;0.902826&lt;/td&gt;
      &lt;td&gt;-0.537909&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.loc[&#39;G1&#39;].loc[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A    0.153661
B    0.167638
Name: 1, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.index.names
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;FrozenList([None, None])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.index.names = [&#39;Group&#39;,&#39;Num&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Group&lt;/th&gt;
      &lt;th&gt;Num&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;3&#34; valign=&#34;top&#34;&gt;G1&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.153661&lt;/td&gt;
      &lt;td&gt;0.167638&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;-0.765930&lt;/td&gt;
      &lt;td&gt;0.962299&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;0.902826&lt;/td&gt;
      &lt;td&gt;-0.537909&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;3&#34; valign=&#34;top&#34;&gt;G2&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;-1.549671&lt;/td&gt;
      &lt;td&gt;0.435253&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1.259904&lt;/td&gt;
      &lt;td&gt;-0.447898&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;0.266207&lt;/td&gt;
      &lt;td&gt;0.412580&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.xs(&#39;G1&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Num&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.153661&lt;/td&gt;
      &lt;td&gt;0.167638&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;-0.765930&lt;/td&gt;
      &lt;td&gt;0.962299&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;0.902826&lt;/td&gt;
      &lt;td&gt;-0.537909&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.xs([&#39;G1&#39;,1])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;A    0.153661
B    0.167638
Name: (G1, 1), dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.xs(1,level=&#39;Num&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Group&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;G1&lt;/th&gt;
      &lt;td&gt;0.153661&lt;/td&gt;
      &lt;td&gt;0.167638&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;G2&lt;/th&gt;
      &lt;td&gt;-1.549671&lt;/td&gt;
      &lt;td&gt;0.435253&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;missing-data&#34;&gt;Missing Data&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s show a few convenient methods to deal with Missing Data in pandas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame({&#39;A&#39;:[1,2,np.nan],
                  &#39;B&#39;:[5,np.nan,np.nan],
                  &#39;C&#39;:[1,2,3]})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.dropna()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.dropna(axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.dropna(thresh=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.fillna(value=&#39;FILL VALUE&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;FILL VALUE&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;FILL VALUE&lt;/td&gt;
      &lt;td&gt;FILL VALUE&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;A&#39;].fillna(value=df[&#39;A&#39;].mean())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0    1.0
1    2.0
2    1.5
Name: A, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;groupby&#34;&gt;Groupby&lt;/h3&gt;
&lt;p&gt;The groupby method allows you to group rows of data together and call aggregate functions&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
# Create dataframe
data = {&#39;Company&#39;:[&#39;GOOG&#39;,&#39;GOOG&#39;,&#39;MSFT&#39;,&#39;MSFT&#39;,&#39;FB&#39;,&#39;FB&#39;],
       &#39;Person&#39;:[&#39;Sam&#39;,&#39;Charlie&#39;,&#39;Amy&#39;,&#39;Vanessa&#39;,&#39;Carl&#39;,&#39;Sarah&#39;],
       &#39;Sales&#39;:[200,120,340,124,243,350]}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th&gt;Person&lt;/th&gt;
      &lt;th&gt;Sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;GOOG&lt;/td&gt;
      &lt;td&gt;Sam&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;GOOG&lt;/td&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;MSFT&lt;/td&gt;
      &lt;td&gt;Amy&lt;/td&gt;
      &lt;td&gt;340&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;MSFT&lt;/td&gt;
      &lt;td&gt;Vanessa&lt;/td&gt;
      &lt;td&gt;124&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;FB&lt;/td&gt;
      &lt;td&gt;Carl&lt;/td&gt;
      &lt;td&gt;243&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;FB&lt;/td&gt;
      &lt;td&gt;Sarah&lt;/td&gt;
      &lt;td&gt;350&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Now you can use the .groupby() method to group rows together based off of a column name. For instance let&amp;rsquo;s group based off of Company. This will create a DataFrameGroupBy object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby(&#39;Company&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can save this object as a new variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;by_comp = df.groupby(&amp;quot;Company&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then call aggregate methods off the object:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;by_comp.mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;FB&lt;/th&gt;
      &lt;td&gt;296.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GOOG&lt;/th&gt;
      &lt;td&gt;160.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MSFT&lt;/th&gt;
      &lt;td&gt;232.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby(&#39;Company&#39;).mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;FB&lt;/th&gt;
      &lt;td&gt;296.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GOOG&lt;/th&gt;
      &lt;td&gt;160.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MSFT&lt;/th&gt;
      &lt;td&gt;232.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;More examples of aggregate methods:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;by_comp.std()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;FB&lt;/th&gt;
      &lt;td&gt;75.660426&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GOOG&lt;/th&gt;
      &lt;td&gt;56.568542&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MSFT&lt;/th&gt;
      &lt;td&gt;152.735065&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;by_comp.min()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Person&lt;/th&gt;
      &lt;th&gt;Sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;FB&lt;/th&gt;
      &lt;td&gt;Carl&lt;/td&gt;
      &lt;td&gt;243&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GOOG&lt;/th&gt;
      &lt;td&gt;Charlie&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MSFT&lt;/th&gt;
      &lt;td&gt;Amy&lt;/td&gt;
      &lt;td&gt;124&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;by_comp.max()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Person&lt;/th&gt;
      &lt;th&gt;Sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;FB&lt;/th&gt;
      &lt;td&gt;Sarah&lt;/td&gt;
      &lt;td&gt;350&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GOOG&lt;/th&gt;
      &lt;td&gt;Sam&lt;/td&gt;
      &lt;td&gt;200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MSFT&lt;/th&gt;
      &lt;td&gt;Vanessa&lt;/td&gt;
      &lt;td&gt;340&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;by_comp.count()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Person&lt;/th&gt;
      &lt;th&gt;Sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;FB&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;GOOG&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;MSFT&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;by_comp.describe()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Sales&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;8&#34; valign=&#34;top&#34;&gt;FB&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;td&gt;2.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;td&gt;296.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;td&gt;75.660426&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;td&gt;243.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;td&gt;269.750000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;td&gt;296.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;td&gt;323.250000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;td&gt;350.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;8&#34; valign=&#34;top&#34;&gt;GOOG&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;td&gt;2.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;td&gt;160.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;td&gt;56.568542&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;td&gt;120.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;td&gt;140.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;td&gt;160.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;td&gt;180.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;td&gt;200.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;8&#34; valign=&#34;top&#34;&gt;MSFT&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;td&gt;2.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;td&gt;232.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;td&gt;152.735065&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;td&gt;124.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;td&gt;178.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;td&gt;232.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;td&gt;286.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;td&gt;340.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;by_comp.describe().transpose()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Company&lt;/th&gt;
      &lt;th colspan=&#34;8&#34; halign=&#34;left&#34;&gt;FB&lt;/th&gt;
      &lt;th colspan=&#34;5&#34; halign=&#34;left&#34;&gt;GOOG&lt;/th&gt;
      &lt;th colspan=&#34;8&#34; halign=&#34;left&#34;&gt;MSFT&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;th&gt;max&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;th&gt;max&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Sales&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;296.5&lt;/td&gt;
      &lt;td&gt;75.660426&lt;/td&gt;
      &lt;td&gt;243.0&lt;/td&gt;
      &lt;td&gt;269.75&lt;/td&gt;
      &lt;td&gt;296.5&lt;/td&gt;
      &lt;td&gt;323.25&lt;/td&gt;
      &lt;td&gt;350.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;160.0&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;180.0&lt;/td&gt;
      &lt;td&gt;200.0&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;232.0&lt;/td&gt;
      &lt;td&gt;152.735065&lt;/td&gt;
      &lt;td&gt;124.0&lt;/td&gt;
      &lt;td&gt;178.0&lt;/td&gt;
      &lt;td&gt;232.0&lt;/td&gt;
      &lt;td&gt;286.0&lt;/td&gt;
      &lt;td&gt;340.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1 rows Ã 24 columns&lt;/p&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;by_comp.describe().transpose()[&#39;GOOG&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;count&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;std&lt;/th&gt;
      &lt;th&gt;min&lt;/th&gt;
      &lt;th&gt;25%&lt;/th&gt;
      &lt;th&gt;50%&lt;/th&gt;
      &lt;th&gt;75%&lt;/th&gt;
      &lt;th&gt;max&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Sales&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;160.0&lt;/td&gt;
      &lt;td&gt;56.568542&lt;/td&gt;
      &lt;td&gt;120.0&lt;/td&gt;
      &lt;td&gt;140.0&lt;/td&gt;
      &lt;td&gt;160.0&lt;/td&gt;
      &lt;td&gt;180.0&lt;/td&gt;
      &lt;td&gt;200.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;merging-joining-and-concatenating&#34;&gt;Merging, Joining, and Concatenating&lt;/h3&gt;
&lt;p&gt;There are 3 main ways of combining DataFrames together: Merging, Joining and Concatenating. In this lecture we will discuss these 3 methods with examples.&lt;/p&gt;
&lt;h4 id=&#34;example-dataframes&#34;&gt;Example DataFrames&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1 = pd.DataFrame({&#39;A&#39;: [&#39;A0&#39;, &#39;A1&#39;, &#39;A2&#39;, &#39;A3&#39;],
                        &#39;B&#39;: [&#39;B0&#39;, &#39;B1&#39;, &#39;B2&#39;, &#39;B3&#39;],
                        &#39;C&#39;: [&#39;C0&#39;, &#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;],
                        &#39;D&#39;: [&#39;D0&#39;, &#39;D1&#39;, &#39;D2&#39;, &#39;D3&#39;]},
                        index=[0, 1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2 = pd.DataFrame({&#39;A&#39;: [&#39;A4&#39;, &#39;A5&#39;, &#39;A6&#39;, &#39;A7&#39;],
                        &#39;B&#39;: [&#39;B4&#39;, &#39;B5&#39;, &#39;B6&#39;, &#39;B7&#39;],
                        &#39;C&#39;: [&#39;C4&#39;, &#39;C5&#39;, &#39;C6&#39;, &#39;C7&#39;],
                        &#39;D&#39;: [&#39;D4&#39;, &#39;D5&#39;, &#39;D6&#39;, &#39;D7&#39;]},
                         index=[4, 5, 6, 7]) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3 = pd.DataFrame({&#39;A&#39;: [&#39;A8&#39;, &#39;A9&#39;, &#39;A10&#39;, &#39;A11&#39;],
                        &#39;B&#39;: [&#39;B8&#39;, &#39;B9&#39;, &#39;B10&#39;, &#39;B11&#39;],
                        &#39;C&#39;: [&#39;C8&#39;, &#39;C9&#39;, &#39;C10&#39;, &#39;C11&#39;],
                        &#39;D&#39;: [&#39;D8&#39;, &#39;D9&#39;, &#39;D10&#39;, &#39;D11&#39;]},
                        index=[8, 9, 10, 11])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;A1&lt;/td&gt;
      &lt;td&gt;B1&lt;/td&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;D1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;A3&lt;/td&gt;
      &lt;td&gt;B3&lt;/td&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;D3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;A4&lt;/td&gt;
      &lt;td&gt;B4&lt;/td&gt;
      &lt;td&gt;C4&lt;/td&gt;
      &lt;td&gt;D4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;A5&lt;/td&gt;
      &lt;td&gt;B5&lt;/td&gt;
      &lt;td&gt;C5&lt;/td&gt;
      &lt;td&gt;D5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;A6&lt;/td&gt;
      &lt;td&gt;B6&lt;/td&gt;
      &lt;td&gt;C6&lt;/td&gt;
      &lt;td&gt;D6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;A7&lt;/td&gt;
      &lt;td&gt;B7&lt;/td&gt;
      &lt;td&gt;C7&lt;/td&gt;
      &lt;td&gt;D7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;A8&lt;/td&gt;
      &lt;td&gt;B8&lt;/td&gt;
      &lt;td&gt;C8&lt;/td&gt;
      &lt;td&gt;D8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;A9&lt;/td&gt;
      &lt;td&gt;B9&lt;/td&gt;
      &lt;td&gt;C9&lt;/td&gt;
      &lt;td&gt;D9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;A10&lt;/td&gt;
      &lt;td&gt;B10&lt;/td&gt;
      &lt;td&gt;C10&lt;/td&gt;
      &lt;td&gt;D10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;A11&lt;/td&gt;
      &lt;td&gt;B11&lt;/td&gt;
      &lt;td&gt;C11&lt;/td&gt;
      &lt;td&gt;D11&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;concatenation&#34;&gt;Concatenation&lt;/h3&gt;
&lt;p&gt;Concatenation basically glues together DataFrames. Keep in mind that dimensions should match along the axis you are concatenating on. You can use &lt;strong&gt;pd.concat&lt;/strong&gt; and pass in a list of DataFrames to concatenate together:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.concat([df1,df2,df3])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;A1&lt;/td&gt;
      &lt;td&gt;B1&lt;/td&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;D1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;A3&lt;/td&gt;
      &lt;td&gt;B3&lt;/td&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;D3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;A4&lt;/td&gt;
      &lt;td&gt;B4&lt;/td&gt;
      &lt;td&gt;C4&lt;/td&gt;
      &lt;td&gt;D4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;A5&lt;/td&gt;
      &lt;td&gt;B5&lt;/td&gt;
      &lt;td&gt;C5&lt;/td&gt;
      &lt;td&gt;D5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;A6&lt;/td&gt;
      &lt;td&gt;B6&lt;/td&gt;
      &lt;td&gt;C6&lt;/td&gt;
      &lt;td&gt;D6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;A7&lt;/td&gt;
      &lt;td&gt;B7&lt;/td&gt;
      &lt;td&gt;C7&lt;/td&gt;
      &lt;td&gt;D7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;A8&lt;/td&gt;
      &lt;td&gt;B8&lt;/td&gt;
      &lt;td&gt;C8&lt;/td&gt;
      &lt;td&gt;D8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;A9&lt;/td&gt;
      &lt;td&gt;B9&lt;/td&gt;
      &lt;td&gt;C9&lt;/td&gt;
      &lt;td&gt;D9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;A10&lt;/td&gt;
      &lt;td&gt;B10&lt;/td&gt;
      &lt;td&gt;C10&lt;/td&gt;
      &lt;td&gt;D10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;A11&lt;/td&gt;
      &lt;td&gt;B11&lt;/td&gt;
      &lt;td&gt;C11&lt;/td&gt;
      &lt;td&gt;D11&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.concat([df1,df2,df3],axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;A1&lt;/td&gt;
      &lt;td&gt;B1&lt;/td&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;D1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;A3&lt;/td&gt;
      &lt;td&gt;B3&lt;/td&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;D3&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;A4&lt;/td&gt;
      &lt;td&gt;B4&lt;/td&gt;
      &lt;td&gt;C4&lt;/td&gt;
      &lt;td&gt;D4&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;A5&lt;/td&gt;
      &lt;td&gt;B5&lt;/td&gt;
      &lt;td&gt;C5&lt;/td&gt;
      &lt;td&gt;D5&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;A6&lt;/td&gt;
      &lt;td&gt;B6&lt;/td&gt;
      &lt;td&gt;C6&lt;/td&gt;
      &lt;td&gt;D6&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;A7&lt;/td&gt;
      &lt;td&gt;B7&lt;/td&gt;
      &lt;td&gt;C7&lt;/td&gt;
      &lt;td&gt;D7&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;A8&lt;/td&gt;
      &lt;td&gt;B8&lt;/td&gt;
      &lt;td&gt;C8&lt;/td&gt;
      &lt;td&gt;D8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;A9&lt;/td&gt;
      &lt;td&gt;B9&lt;/td&gt;
      &lt;td&gt;C9&lt;/td&gt;
      &lt;td&gt;D9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;A10&lt;/td&gt;
      &lt;td&gt;B10&lt;/td&gt;
      &lt;td&gt;C10&lt;/td&gt;
      &lt;td&gt;D10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;A11&lt;/td&gt;
      &lt;td&gt;B11&lt;/td&gt;
      &lt;td&gt;C11&lt;/td&gt;
      &lt;td&gt;D11&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h4 id=&#34;example-dataframes-1&#34;&gt;Example DataFrames&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left = pd.DataFrame({&#39;key&#39;: [&#39;K0&#39;, &#39;K1&#39;, &#39;K2&#39;, &#39;K3&#39;],
                     &#39;A&#39;: [&#39;A0&#39;, &#39;A1&#39;, &#39;A2&#39;, &#39;A3&#39;],
                     &#39;B&#39;: [&#39;B0&#39;, &#39;B1&#39;, &#39;B2&#39;, &#39;B3&#39;]})
   
right = pd.DataFrame({&#39;key&#39;: [&#39;K0&#39;, &#39;K1&#39;, &#39;K2&#39;, &#39;K3&#39;],
                          &#39;C&#39;: [&#39;C0&#39;, &#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;],
                          &#39;D&#39;: [&#39;D0&#39;, &#39;D1&#39;, &#39;D2&#39;, &#39;D3&#39;]})    
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;key&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;A1&lt;/td&gt;
      &lt;td&gt;B1&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;A3&lt;/td&gt;
      &lt;td&gt;B3&lt;/td&gt;
      &lt;td&gt;K3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;right
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
      &lt;th&gt;key&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;D1&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
      &lt;td&gt;K2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;D3&lt;/td&gt;
      &lt;td&gt;K3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;merging&#34;&gt;Merging&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;merge&lt;/strong&gt; function allows you to merge DataFrames together using a similar logic as merging SQL Tables together. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left,right,how=&#39;inner&#39;,on=&#39;key&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;A1&lt;/td&gt;
      &lt;td&gt;B1&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;D1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K2&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;A3&lt;/td&gt;
      &lt;td&gt;B3&lt;/td&gt;
      &lt;td&gt;K3&lt;/td&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;D3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Or to show a more complicated example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left = pd.DataFrame({&#39;key1&#39;: [&#39;K0&#39;, &#39;K0&#39;, &#39;K1&#39;, &#39;K2&#39;],
                     &#39;key2&#39;: [&#39;K0&#39;, &#39;K1&#39;, &#39;K0&#39;, &#39;K1&#39;],
                        &#39;A&#39;: [&#39;A0&#39;, &#39;A1&#39;, &#39;A2&#39;, &#39;A3&#39;],
                        &#39;B&#39;: [&#39;B0&#39;, &#39;B1&#39;, &#39;B2&#39;, &#39;B3&#39;]})
    
right = pd.DataFrame({&#39;key1&#39;: [&#39;K0&#39;, &#39;K1&#39;, &#39;K1&#39;, &#39;K2&#39;],
                               &#39;key2&#39;: [&#39;K0&#39;, &#39;K0&#39;, &#39;K0&#39;, &#39;K0&#39;],
                                  &#39;C&#39;: [&#39;C0&#39;, &#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;],
                                  &#39;D&#39;: [&#39;D0&#39;, &#39;D1&#39;, &#39;D2&#39;, &#39;D3&#39;]})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left, right, on=[&#39;key1&#39;, &#39;key2&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;key1&lt;/th&gt;
      &lt;th&gt;key2&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;D1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left, right, how=&#39;outer&#39;, on=[&#39;key1&#39;, &#39;key2&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;key1&lt;/th&gt;
      &lt;th&gt;key2&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;A1&lt;/td&gt;
      &lt;td&gt;B1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;D1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;A3&lt;/td&gt;
      &lt;td&gt;B3&lt;/td&gt;
      &lt;td&gt;K2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;K2&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;D3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left, right, how=&#39;right&#39;, on=[&#39;key1&#39;, &#39;key2&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;key1&lt;/th&gt;
      &lt;th&gt;key2&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;D1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;K2&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;D3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.merge(left, right, how=&#39;left&#39;, on=[&#39;key1&#39;, &#39;key2&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;key1&lt;/th&gt;
      &lt;th&gt;key2&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;A1&lt;/td&gt;
      &lt;td&gt;B1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;D1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;K0&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;A3&lt;/td&gt;
      &lt;td&gt;B3&lt;/td&gt;
      &lt;td&gt;K2&lt;/td&gt;
      &lt;td&gt;K1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;joining&#34;&gt;Joining&lt;/h3&gt;
&lt;p&gt;Joining is a convenient method for combining the columns of two potentially differently-indexed DataFrames into a single result DataFrame.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left = pd.DataFrame({&#39;A&#39;: [&#39;A0&#39;, &#39;A1&#39;, &#39;A2&#39;],
                     &#39;B&#39;: [&#39;B0&#39;, &#39;B1&#39;, &#39;B2&#39;]},
                      index=[&#39;K0&#39;, &#39;K1&#39;, &#39;K2&#39;]) 

right = pd.DataFrame({&#39;C&#39;: [&#39;C0&#39;, &#39;C2&#39;, &#39;C3&#39;],
                    &#39;D&#39;: [&#39;D0&#39;, &#39;D2&#39;, &#39;D3&#39;]},
                      index=[&#39;K0&#39;, &#39;K2&#39;, &#39;K3&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left.join(right)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;K0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;K1&lt;/th&gt;
      &lt;td&gt;A1&lt;/td&gt;
      &lt;td&gt;B1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;K2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;left.join(right, how=&#39;outer&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;K0&lt;/th&gt;
      &lt;td&gt;A0&lt;/td&gt;
      &lt;td&gt;B0&lt;/td&gt;
      &lt;td&gt;C0&lt;/td&gt;
      &lt;td&gt;D0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;K1&lt;/th&gt;
      &lt;td&gt;A1&lt;/td&gt;
      &lt;td&gt;B1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;K2&lt;/th&gt;
      &lt;td&gt;A2&lt;/td&gt;
      &lt;td&gt;B2&lt;/td&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;D2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;K3&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;D3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;operations&#34;&gt;Operations&lt;/h2&gt;
&lt;p&gt;There are lots of operations with pandas that will be really useful to you, but don&amp;rsquo;t fall into any distinct category. Let&amp;rsquo;s show them here in this lecture:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
df = pd.DataFrame({&#39;col1&#39;:[1,2,3,4],&#39;col2&#39;:[444,555,666,444],&#39;col3&#39;:[&#39;abc&#39;,&#39;def&#39;,&#39;ghi&#39;,&#39;xyz&#39;]})
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col1&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;abc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;555&lt;/td&gt;
      &lt;td&gt;def&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;666&lt;/td&gt;
      &lt;td&gt;ghi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;xyz&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;info-on-unique-values&#34;&gt;Info on Unique Values&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;col2&#39;].unique()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;array([444, 555, 666])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;col2&#39;].nunique()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;col2&#39;].value_counts()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;444    2
555    1
666    1
Name: col2, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;selecting-data&#34;&gt;Selecting Data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#Select from DataFrame using criteria from multiple columns
newdf = df[(df[&#39;col1&#39;]&amp;gt;2) &amp;amp; (df[&#39;col2&#39;]==444)]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;newdf
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col1&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;xyz&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;applying-functions&#34;&gt;Applying Functions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def times2(x):
    return x*2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;col1&#39;].apply(times2)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0    2
1    4
2    6
3    8
Name: col1, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;col3&#39;].apply(len)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0    3
1    3
2    3
3    3
Name: col3, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;col1&#39;].sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;10
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;permanently-removing-a-column&#34;&gt;Permanently Removing a Column&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;del df[&#39;col1&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;abc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;555&lt;/td&gt;
      &lt;td&gt;def&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;666&lt;/td&gt;
      &lt;td&gt;ghi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;xyz&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;get-column-and-index-names&#34;&gt;Get column and index names&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Index([&#39;col2&#39;, &#39;col3&#39;], dtype=&#39;object&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.index
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;RangeIndex(start=0, stop=4, step=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sorting-and-ordering-a-dataframe&#34;&gt;Sorting and Ordering a DataFrame&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;abc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;555&lt;/td&gt;
      &lt;td&gt;def&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;666&lt;/td&gt;
      &lt;td&gt;ghi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;xyz&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.sort_values(by=&#39;col2&#39;) #inplace=False by default
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;abc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;xyz&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;555&lt;/td&gt;
      &lt;td&gt;def&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;666&lt;/td&gt;
      &lt;td&gt;ghi&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;find-null-values-or-check-for-null-values&#34;&gt;Find Null Values or Check for Null Values&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.isnull()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Drop rows with NaN Values
df.dropna()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;abc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;555&lt;/td&gt;
      &lt;td&gt;def&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;666&lt;/td&gt;
      &lt;td&gt;ghi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;xyz&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;filling-in-nan-values-with-something-else&#34;&gt;Filling in NaN values with something else&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame({&#39;col1&#39;:[1,2,3,np.nan],
                   &#39;col2&#39;:[np.nan,555,666,444],
                   &#39;col3&#39;:[&#39;abc&#39;,&#39;def&#39;,&#39;ghi&#39;,&#39;xyz&#39;]})
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col1&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;abc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;555.0&lt;/td&gt;
      &lt;td&gt;def&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;666.0&lt;/td&gt;
      &lt;td&gt;ghi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;444.0&lt;/td&gt;
      &lt;td&gt;xyz&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.fillna(&#39;FILL&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;col1&lt;/th&gt;
      &lt;th&gt;col2&lt;/th&gt;
      &lt;th&gt;col3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;FILL&lt;/td&gt;
      &lt;td&gt;abc&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;555&lt;/td&gt;
      &lt;td&gt;def&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;666&lt;/td&gt;
      &lt;td&gt;ghi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;FILL&lt;/td&gt;
      &lt;td&gt;444&lt;/td&gt;
      &lt;td&gt;xyz&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = {&#39;A&#39;:[&#39;foo&#39;,&#39;foo&#39;,&#39;foo&#39;,&#39;bar&#39;,&#39;bar&#39;,&#39;bar&#39;],
     &#39;B&#39;:[&#39;one&#39;,&#39;one&#39;,&#39;two&#39;,&#39;two&#39;,&#39;one&#39;,&#39;one&#39;],
       &#39;C&#39;:[&#39;x&#39;,&#39;y&#39;,&#39;x&#39;,&#39;y&#39;,&#39;x&#39;,&#39;y&#39;],
       &#39;D&#39;:[1,3,2,5,4,1]}

df = pd.DataFrame(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;foo&lt;/td&gt;
      &lt;td&gt;one&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;foo&lt;/td&gt;
      &lt;td&gt;one&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;foo&lt;/td&gt;
      &lt;td&gt;two&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;bar&lt;/td&gt;
      &lt;td&gt;two&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;bar&lt;/td&gt;
      &lt;td&gt;one&lt;/td&gt;
      &lt;td&gt;x&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;bar&lt;/td&gt;
      &lt;td&gt;one&lt;/td&gt;
      &lt;td&gt;y&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.pivot_table(values=&#39;D&#39;,index=[&#39;A&#39;, &#39;B&#39;],columns=[&#39;C&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;x&lt;/th&gt;
      &lt;th&gt;y&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;bar&lt;/th&gt;
      &lt;th&gt;one&lt;/th&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;two&lt;/th&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;5.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th rowspan=&#34;2&#34; valign=&#34;top&#34;&gt;foo&lt;/th&gt;
      &lt;th&gt;one&lt;/th&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;two&lt;/th&gt;
      &lt;td&gt;2.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;csv-data&#34;&gt;CSV Data&lt;/h2&gt;
&lt;h3 id=&#34;csv-input&#34;&gt;CSV Input&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;example&#39;)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;th&gt;c&lt;/th&gt;
      &lt;th&gt;d&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;csv-output&#34;&gt;CSV Output&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.to_csv(&#39;example&#39;,index=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;excel-data&#34;&gt;Excel Data&lt;/h2&gt;
&lt;p&gt;Pandas can read and write excel files, keep in mind, this only imports data. Not formulas or images, having images or macros may cause this read_excel method to crash.&lt;/p&gt;
&lt;h3 id=&#34;excel-input&#34;&gt;Excel Input&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pd.read_excel(&#39;Excel_Sample.xlsx&#39;,sheetname=&#39;Sheet1&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;th&gt;c&lt;/th&gt;
      &lt;th&gt;d&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;excel-output&#34;&gt;Excel Output&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.to_excel(&#39;Excel_Sample.xlsx&#39;,sheet_name=&#39;Sheet1&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;html-data&#34;&gt;HTML Data&lt;/h2&gt;
&lt;p&gt;You may need to install htmllib5,lxml, and BeautifulSoup4. In your terminal/command prompt run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda install lxml
conda install html5lib
conda install BeautifulSoup4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then restart Jupyter Notebook.
(or use pip install if you aren&amp;rsquo;t using the Anaconda Distribution)&lt;/p&gt;
&lt;p&gt;Pandas can read table tabs off of html. For example:&lt;/p&gt;
&lt;h3 id=&#34;html-input&#34;&gt;HTML Input&lt;/h3&gt;
&lt;p&gt;Pandas read_html function will read tables off of a webpage and return a list of DataFrame objects:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_html(&#39;http://www.fdic.gov/bank/individual/failed/banklist.html&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Bank Name&lt;/th&gt;
      &lt;th&gt;City&lt;/th&gt;
      &lt;th&gt;ST&lt;/th&gt;
      &lt;th&gt;CERT&lt;/th&gt;
      &lt;th&gt;Acquiring Institution&lt;/th&gt;
      &lt;th&gt;Closing Date&lt;/th&gt;
      &lt;th&gt;Updated Date&lt;/th&gt;
      &lt;th&gt;Loss Share Type&lt;/th&gt;
      &lt;th&gt;Agreement Terminated&lt;/th&gt;
      &lt;th&gt;Termination Date&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;First CornerStone Bank&lt;/td&gt;
      &lt;td&gt;King of Prussia&lt;/td&gt;
      &lt;td&gt;PA&lt;/td&gt;
      &lt;td&gt;35312&lt;/td&gt;
      &lt;td&gt;First-Citizens Bank &amp;amp; Trust Company&lt;/td&gt;
      &lt;td&gt;May 6, 2016&lt;/td&gt;
      &lt;td&gt;July 12, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Trust Company Bank&lt;/td&gt;
      &lt;td&gt;Memphis&lt;/td&gt;
      &lt;td&gt;TN&lt;/td&gt;
      &lt;td&gt;9956&lt;/td&gt;
      &lt;td&gt;The Bank of Fayette County&lt;/td&gt;
      &lt;td&gt;April 29, 2016&lt;/td&gt;
      &lt;td&gt;August 4, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;North Milwaukee State Bank&lt;/td&gt;
      &lt;td&gt;Milwaukee&lt;/td&gt;
      &lt;td&gt;WI&lt;/td&gt;
      &lt;td&gt;20364&lt;/td&gt;
      &lt;td&gt;First-Citizens Bank &amp;amp; Trust Company&lt;/td&gt;
      &lt;td&gt;March 11, 2016&lt;/td&gt;
      &lt;td&gt;June 16, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Hometown National Bank&lt;/td&gt;
      &lt;td&gt;Longview&lt;/td&gt;
      &lt;td&gt;WA&lt;/td&gt;
      &lt;td&gt;35156&lt;/td&gt;
      &lt;td&gt;Twin City Bank&lt;/td&gt;
      &lt;td&gt;October 2, 2015&lt;/td&gt;
      &lt;td&gt;April 13, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;The Bank of Georgia&lt;/td&gt;
      &lt;td&gt;Peachtree City&lt;/td&gt;
      &lt;td&gt;GA&lt;/td&gt;
      &lt;td&gt;35259&lt;/td&gt;
      &lt;td&gt;Fidelity Bank&lt;/td&gt;
      &lt;td&gt;October 2, 2015&lt;/td&gt;
      &lt;td&gt;April 13, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Premier Bank&lt;/td&gt;
      &lt;td&gt;Denver&lt;/td&gt;
      &lt;td&gt;CO&lt;/td&gt;
      &lt;td&gt;34112&lt;/td&gt;
      &lt;td&gt;United Fidelity Bank, fsb&lt;/td&gt;
      &lt;td&gt;July 10, 2015&lt;/td&gt;
      &lt;td&gt;July 12, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Edgebrook Bank&lt;/td&gt;
      &lt;td&gt;Chicago&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;57772&lt;/td&gt;
      &lt;td&gt;Republic Bank of Chicago&lt;/td&gt;
      &lt;td&gt;May 8, 2015&lt;/td&gt;
      &lt;td&gt;July 12, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;Doral BankEn Espanol&lt;/td&gt;
      &lt;td&gt;San Juan&lt;/td&gt;
      &lt;td&gt;PR&lt;/td&gt;
      &lt;td&gt;32102&lt;/td&gt;
      &lt;td&gt;Banco Popular de Puerto Rico&lt;/td&gt;
      &lt;td&gt;February 27, 2015&lt;/td&gt;
      &lt;td&gt;May 13, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;Capitol City Bank &amp;amp; Trust Company&lt;/td&gt;
      &lt;td&gt;Atlanta&lt;/td&gt;
      &lt;td&gt;GA&lt;/td&gt;
      &lt;td&gt;33938&lt;/td&gt;
      &lt;td&gt;First-Citizens Bank &amp;amp; Trust Company&lt;/td&gt;
      &lt;td&gt;February 13, 2015&lt;/td&gt;
      &lt;td&gt;April 21, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;Highland Community Bank&lt;/td&gt;
      &lt;td&gt;Chicago&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;20290&lt;/td&gt;
      &lt;td&gt;United Fidelity Bank, fsb&lt;/td&gt;
      &lt;td&gt;January 23, 2015&lt;/td&gt;
      &lt;td&gt;April 21, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;First National Bank of Crestview&lt;/td&gt;
      &lt;td&gt;Crestview&lt;/td&gt;
      &lt;td&gt;FL&lt;/td&gt;
      &lt;td&gt;17557&lt;/td&gt;
      &lt;td&gt;First NBC Bank&lt;/td&gt;
      &lt;td&gt;January 16, 2015&lt;/td&gt;
      &lt;td&gt;January 15, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;11&lt;/th&gt;
      &lt;td&gt;Northern Star Bank&lt;/td&gt;
      &lt;td&gt;Mankato&lt;/td&gt;
      &lt;td&gt;MN&lt;/td&gt;
      &lt;td&gt;34983&lt;/td&gt;
      &lt;td&gt;BankVista&lt;/td&gt;
      &lt;td&gt;December 19, 2014&lt;/td&gt;
      &lt;td&gt;January 6, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;12&lt;/th&gt;
      &lt;td&gt;Frontier Bank, FSB D/B/A El Paseo Bank&lt;/td&gt;
      &lt;td&gt;Palm Desert&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;34738&lt;/td&gt;
      &lt;td&gt;Bank of Southern California, N.A.&lt;/td&gt;
      &lt;td&gt;November 7, 2014&lt;/td&gt;
      &lt;td&gt;January 6, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;13&lt;/th&gt;
      &lt;td&gt;The National Republic Bank of Chicago&lt;/td&gt;
      &lt;td&gt;Chicago&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;916&lt;/td&gt;
      &lt;td&gt;State Bank of Texas&lt;/td&gt;
      &lt;td&gt;October 24, 2014&lt;/td&gt;
      &lt;td&gt;January 6, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;14&lt;/th&gt;
      &lt;td&gt;NBRS Financial&lt;/td&gt;
      &lt;td&gt;Rising Sun&lt;/td&gt;
      &lt;td&gt;MD&lt;/td&gt;
      &lt;td&gt;4862&lt;/td&gt;
      &lt;td&gt;Howard Bank&lt;/td&gt;
      &lt;td&gt;October 17, 2014&lt;/td&gt;
      &lt;td&gt;March 26, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;15&lt;/th&gt;
      &lt;td&gt;GreenChoice Bank, fsb&lt;/td&gt;
      &lt;td&gt;Chicago&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;28462&lt;/td&gt;
      &lt;td&gt;Providence Bank, LLC&lt;/td&gt;
      &lt;td&gt;July 25, 2014&lt;/td&gt;
      &lt;td&gt;July 28, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;16&lt;/th&gt;
      &lt;td&gt;Eastside Commercial Bank&lt;/td&gt;
      &lt;td&gt;Conyers&lt;/td&gt;
      &lt;td&gt;GA&lt;/td&gt;
      &lt;td&gt;58125&lt;/td&gt;
      &lt;td&gt;Community &amp;amp; Southern Bank&lt;/td&gt;
      &lt;td&gt;July 18, 2014&lt;/td&gt;
      &lt;td&gt;July 11, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;17&lt;/th&gt;
      &lt;td&gt;The Freedom State Bank&lt;/td&gt;
      &lt;td&gt;Freedom&lt;/td&gt;
      &lt;td&gt;OK&lt;/td&gt;
      &lt;td&gt;12483&lt;/td&gt;
      &lt;td&gt;Alva State Bank &amp;amp; Trust Company&lt;/td&gt;
      &lt;td&gt;June 27, 2014&lt;/td&gt;
      &lt;td&gt;March 25, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;18&lt;/th&gt;
      &lt;td&gt;Valley Bank&lt;/td&gt;
      &lt;td&gt;Fort Lauderdale&lt;/td&gt;
      &lt;td&gt;FL&lt;/td&gt;
      &lt;td&gt;21793&lt;/td&gt;
      &lt;td&gt;Landmark Bank, National Association&lt;/td&gt;
      &lt;td&gt;June 20, 2014&lt;/td&gt;
      &lt;td&gt;June 29, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;Valley Bank&lt;/td&gt;
      &lt;td&gt;Moline&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;10450&lt;/td&gt;
      &lt;td&gt;Great Southern Bank&lt;/td&gt;
      &lt;td&gt;June 20, 2014&lt;/td&gt;
      &lt;td&gt;June 26, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;20&lt;/th&gt;
      &lt;td&gt;Slavie Federal Savings Bank&lt;/td&gt;
      &lt;td&gt;Bel Air&lt;/td&gt;
      &lt;td&gt;MD&lt;/td&gt;
      &lt;td&gt;32368&lt;/td&gt;
      &lt;td&gt;Bay Bank, FSB&lt;/td&gt;
      &lt;td&gt;May 30, 2014&lt;/td&gt;
      &lt;td&gt;June 15, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;21&lt;/th&gt;
      &lt;td&gt;Columbia Savings Bank&lt;/td&gt;
      &lt;td&gt;Cincinnati&lt;/td&gt;
      &lt;td&gt;OH&lt;/td&gt;
      &lt;td&gt;32284&lt;/td&gt;
      &lt;td&gt;United Fidelity Bank, fsb&lt;/td&gt;
      &lt;td&gt;May 23, 2014&lt;/td&gt;
      &lt;td&gt;May 28, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;22&lt;/th&gt;
      &lt;td&gt;AztecAmerica Bank En Espanol&lt;/td&gt;
      &lt;td&gt;Berwyn&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;57866&lt;/td&gt;
      &lt;td&gt;Republic Bank of Chicago&lt;/td&gt;
      &lt;td&gt;May 16, 2014&lt;/td&gt;
      &lt;td&gt;July 18, 2014&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;23&lt;/th&gt;
      &lt;td&gt;Allendale County Bank&lt;/td&gt;
      &lt;td&gt;Fairfax&lt;/td&gt;
      &lt;td&gt;SC&lt;/td&gt;
      &lt;td&gt;15062&lt;/td&gt;
      &lt;td&gt;Palmetto State Bank&lt;/td&gt;
      &lt;td&gt;April 25, 2014&lt;/td&gt;
      &lt;td&gt;July 18, 2014&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;24&lt;/th&gt;
      &lt;td&gt;Vantage Point Bank&lt;/td&gt;
      &lt;td&gt;Horsham&lt;/td&gt;
      &lt;td&gt;PA&lt;/td&gt;
      &lt;td&gt;58531&lt;/td&gt;
      &lt;td&gt;First Choice Bank&lt;/td&gt;
      &lt;td&gt;February 28, 2014&lt;/td&gt;
      &lt;td&gt;March 3, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25&lt;/th&gt;
      &lt;td&gt;Millennium Bank, National Association&lt;/td&gt;
      &lt;td&gt;Sterling&lt;/td&gt;
      &lt;td&gt;VA&lt;/td&gt;
      &lt;td&gt;35096&lt;/td&gt;
      &lt;td&gt;WashingtonFirst Bank&lt;/td&gt;
      &lt;td&gt;February 28, 2014&lt;/td&gt;
      &lt;td&gt;March 03, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26&lt;/th&gt;
      &lt;td&gt;Syringa Bank&lt;/td&gt;
      &lt;td&gt;Boise&lt;/td&gt;
      &lt;td&gt;ID&lt;/td&gt;
      &lt;td&gt;34296&lt;/td&gt;
      &lt;td&gt;Sunwest Bank&lt;/td&gt;
      &lt;td&gt;January 31, 2014&lt;/td&gt;
      &lt;td&gt;April 12, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;27&lt;/th&gt;
      &lt;td&gt;The Bank of Union&lt;/td&gt;
      &lt;td&gt;El Reno&lt;/td&gt;
      &lt;td&gt;OK&lt;/td&gt;
      &lt;td&gt;17967&lt;/td&gt;
      &lt;td&gt;BancFirst&lt;/td&gt;
      &lt;td&gt;January 24, 2014&lt;/td&gt;
      &lt;td&gt;March 25, 2016&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28&lt;/th&gt;
      &lt;td&gt;DuPage National Bank&lt;/td&gt;
      &lt;td&gt;West Chicago&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;5732&lt;/td&gt;
      &lt;td&gt;Republic Bank of Chicago&lt;/td&gt;
      &lt;td&gt;January 17, 2014&lt;/td&gt;
      &lt;td&gt;February 19, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29&lt;/th&gt;
      &lt;td&gt;Texas Community Bank, National Association&lt;/td&gt;
      &lt;td&gt;The Woodlands&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;57431&lt;/td&gt;
      &lt;td&gt;Spirit of Texas Bank, SSB&lt;/td&gt;
      &lt;td&gt;December 13, 2013&lt;/td&gt;
      &lt;td&gt;December 29, 2014&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;515&lt;/th&gt;
      &lt;td&gt;ANB Financial, NA&lt;/td&gt;
      &lt;td&gt;Bentonville&lt;/td&gt;
      &lt;td&gt;AR&lt;/td&gt;
      &lt;td&gt;33901&lt;/td&gt;
      &lt;td&gt;Pulaski Bank and Trust Company&lt;/td&gt;
      &lt;td&gt;May 9, 2008&lt;/td&gt;
      &lt;td&gt;August 28, 2012&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;516&lt;/th&gt;
      &lt;td&gt;Hume Bank&lt;/td&gt;
      &lt;td&gt;Hume&lt;/td&gt;
      &lt;td&gt;MO&lt;/td&gt;
      &lt;td&gt;1971&lt;/td&gt;
      &lt;td&gt;Security Bank&lt;/td&gt;
      &lt;td&gt;March 7, 2008&lt;/td&gt;
      &lt;td&gt;August 28, 2012&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;517&lt;/th&gt;
      &lt;td&gt;Douglass National Bank&lt;/td&gt;
      &lt;td&gt;Kansas City&lt;/td&gt;
      &lt;td&gt;MO&lt;/td&gt;
      &lt;td&gt;24660&lt;/td&gt;
      &lt;td&gt;Liberty Bank and Trust Company&lt;/td&gt;
      &lt;td&gt;January 25, 2008&lt;/td&gt;
      &lt;td&gt;October 26, 2012&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;518&lt;/th&gt;
      &lt;td&gt;Miami Valley Bank&lt;/td&gt;
      &lt;td&gt;Lakeview&lt;/td&gt;
      &lt;td&gt;OH&lt;/td&gt;
      &lt;td&gt;16848&lt;/td&gt;
      &lt;td&gt;The Citizens Banking Company&lt;/td&gt;
      &lt;td&gt;October 4, 2007&lt;/td&gt;
      &lt;td&gt;August 28, 2012&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;519&lt;/th&gt;
      &lt;td&gt;NetBank&lt;/td&gt;
      &lt;td&gt;Alpharetta&lt;/td&gt;
      &lt;td&gt;GA&lt;/td&gt;
      &lt;td&gt;32575&lt;/td&gt;
      &lt;td&gt;ING DIRECT&lt;/td&gt;
      &lt;td&gt;September 28, 2007&lt;/td&gt;
      &lt;td&gt;August 28, 2012&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;520&lt;/th&gt;
      &lt;td&gt;Metropolitan Savings Bank&lt;/td&gt;
      &lt;td&gt;Pittsburgh&lt;/td&gt;
      &lt;td&gt;PA&lt;/td&gt;
      &lt;td&gt;35353&lt;/td&gt;
      &lt;td&gt;Allegheny Valley Bank of Pittsburgh&lt;/td&gt;
      &lt;td&gt;February 2, 2007&lt;/td&gt;
      &lt;td&gt;October 27, 2010&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;521&lt;/th&gt;
      &lt;td&gt;Bank of Ephraim&lt;/td&gt;
      &lt;td&gt;Ephraim&lt;/td&gt;
      &lt;td&gt;UT&lt;/td&gt;
      &lt;td&gt;1249&lt;/td&gt;
      &lt;td&gt;Far West Bank&lt;/td&gt;
      &lt;td&gt;June 25, 2004&lt;/td&gt;
      &lt;td&gt;April 9, 2008&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;522&lt;/th&gt;
      &lt;td&gt;Reliance Bank&lt;/td&gt;
      &lt;td&gt;White Plains&lt;/td&gt;
      &lt;td&gt;NY&lt;/td&gt;
      &lt;td&gt;26778&lt;/td&gt;
      &lt;td&gt;Union State Bank&lt;/td&gt;
      &lt;td&gt;March 19, 2004&lt;/td&gt;
      &lt;td&gt;April 9, 2008&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;523&lt;/th&gt;
      &lt;td&gt;Guaranty National Bank of Tallahassee&lt;/td&gt;
      &lt;td&gt;Tallahassee&lt;/td&gt;
      &lt;td&gt;FL&lt;/td&gt;
      &lt;td&gt;26838&lt;/td&gt;
      &lt;td&gt;Hancock Bank of Florida&lt;/td&gt;
      &lt;td&gt;March 12, 2004&lt;/td&gt;
      &lt;td&gt;June 5, 2012&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;524&lt;/th&gt;
      &lt;td&gt;Dollar Savings Bank&lt;/td&gt;
      &lt;td&gt;Newark&lt;/td&gt;
      &lt;td&gt;NJ&lt;/td&gt;
      &lt;td&gt;31330&lt;/td&gt;
      &lt;td&gt;No Acquirer&lt;/td&gt;
      &lt;td&gt;February 14, 2004&lt;/td&gt;
      &lt;td&gt;April 9, 2008&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;525&lt;/th&gt;
      &lt;td&gt;Pulaski Savings Bank&lt;/td&gt;
      &lt;td&gt;Philadelphia&lt;/td&gt;
      &lt;td&gt;PA&lt;/td&gt;
      &lt;td&gt;27203&lt;/td&gt;
      &lt;td&gt;Earthstar Bank&lt;/td&gt;
      &lt;td&gt;November 14, 2003&lt;/td&gt;
      &lt;td&gt;July 22, 2005&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;526&lt;/th&gt;
      &lt;td&gt;First National Bank of Blanchardville&lt;/td&gt;
      &lt;td&gt;Blanchardville&lt;/td&gt;
      &lt;td&gt;WI&lt;/td&gt;
      &lt;td&gt;11639&lt;/td&gt;
      &lt;td&gt;The Park Bank&lt;/td&gt;
      &lt;td&gt;May 9, 2003&lt;/td&gt;
      &lt;td&gt;June 5, 2012&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;527&lt;/th&gt;
      &lt;td&gt;Southern Pacific Bank&lt;/td&gt;
      &lt;td&gt;Torrance&lt;/td&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;27094&lt;/td&gt;
      &lt;td&gt;Beal Bank&lt;/td&gt;
      &lt;td&gt;February 7, 2003&lt;/td&gt;
      &lt;td&gt;October 20, 2008&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;528&lt;/th&gt;
      &lt;td&gt;Farmers Bank of Cheneyville&lt;/td&gt;
      &lt;td&gt;Cheneyville&lt;/td&gt;
      &lt;td&gt;LA&lt;/td&gt;
      &lt;td&gt;16445&lt;/td&gt;
      &lt;td&gt;Sabine State Bank &amp;amp; Trust&lt;/td&gt;
      &lt;td&gt;December 17, 2002&lt;/td&gt;
      &lt;td&gt;October 20, 2004&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;529&lt;/th&gt;
      &lt;td&gt;Bank of Alamo&lt;/td&gt;
      &lt;td&gt;Alamo&lt;/td&gt;
      &lt;td&gt;TN&lt;/td&gt;
      &lt;td&gt;9961&lt;/td&gt;
      &lt;td&gt;No Acquirer&lt;/td&gt;
      &lt;td&gt;November 8, 2002&lt;/td&gt;
      &lt;td&gt;March 18, 2005&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;530&lt;/th&gt;
      &lt;td&gt;AmTrade International BankEn Espanol&lt;/td&gt;
      &lt;td&gt;Atlanta&lt;/td&gt;
      &lt;td&gt;GA&lt;/td&gt;
      &lt;td&gt;33784&lt;/td&gt;
      &lt;td&gt;No Acquirer&lt;/td&gt;
      &lt;td&gt;September 30, 2002&lt;/td&gt;
      &lt;td&gt;September 11, 2006&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;531&lt;/th&gt;
      &lt;td&gt;Universal Federal Savings Bank&lt;/td&gt;
      &lt;td&gt;Chicago&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;29355&lt;/td&gt;
      &lt;td&gt;Chicago Community Bank&lt;/td&gt;
      &lt;td&gt;June 27, 2002&lt;/td&gt;
      &lt;td&gt;April 9, 2008&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;532&lt;/th&gt;
      &lt;td&gt;Connecticut Bank of Commerce&lt;/td&gt;
      &lt;td&gt;Stamford&lt;/td&gt;
      &lt;td&gt;CT&lt;/td&gt;
      &lt;td&gt;19183&lt;/td&gt;
      &lt;td&gt;Hudson United Bank&lt;/td&gt;
      &lt;td&gt;June 26, 2002&lt;/td&gt;
      &lt;td&gt;February 14, 2012&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;533&lt;/th&gt;
      &lt;td&gt;New Century Bank&lt;/td&gt;
      &lt;td&gt;Shelby Township&lt;/td&gt;
      &lt;td&gt;MI&lt;/td&gt;
      &lt;td&gt;34979&lt;/td&gt;
      &lt;td&gt;No Acquirer&lt;/td&gt;
      &lt;td&gt;March 28, 2002&lt;/td&gt;
      &lt;td&gt;March 18, 2005&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;534&lt;/th&gt;
      &lt;td&gt;Net 1st National Bank&lt;/td&gt;
      &lt;td&gt;Boca Raton&lt;/td&gt;
      &lt;td&gt;FL&lt;/td&gt;
      &lt;td&gt;26652&lt;/td&gt;
      &lt;td&gt;Bank Leumi USA&lt;/td&gt;
      &lt;td&gt;March 1, 2002&lt;/td&gt;
      &lt;td&gt;April 9, 2008&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;535&lt;/th&gt;
      &lt;td&gt;NextBank, NA&lt;/td&gt;
      &lt;td&gt;Phoenix&lt;/td&gt;
      &lt;td&gt;AZ&lt;/td&gt;
      &lt;td&gt;22314&lt;/td&gt;
      &lt;td&gt;No Acquirer&lt;/td&gt;
      &lt;td&gt;February 7, 2002&lt;/td&gt;
      &lt;td&gt;February 5, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;536&lt;/th&gt;
      &lt;td&gt;Oakwood Deposit Bank Co.&lt;/td&gt;
      &lt;td&gt;Oakwood&lt;/td&gt;
      &lt;td&gt;OH&lt;/td&gt;
      &lt;td&gt;8966&lt;/td&gt;
      &lt;td&gt;The State Bank &amp;amp; Trust Company&lt;/td&gt;
      &lt;td&gt;February 1, 2002&lt;/td&gt;
      &lt;td&gt;October 25, 2012&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;537&lt;/th&gt;
      &lt;td&gt;Bank of Sierra Blanca&lt;/td&gt;
      &lt;td&gt;Sierra Blanca&lt;/td&gt;
      &lt;td&gt;TX&lt;/td&gt;
      &lt;td&gt;22002&lt;/td&gt;
      &lt;td&gt;The Security State Bank of Pecos&lt;/td&gt;
      &lt;td&gt;January 18, 2002&lt;/td&gt;
      &lt;td&gt;November 6, 2003&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;538&lt;/th&gt;
      &lt;td&gt;Hamilton Bank, NAEn Espanol&lt;/td&gt;
      &lt;td&gt;Miami&lt;/td&gt;
      &lt;td&gt;FL&lt;/td&gt;
      &lt;td&gt;24382&lt;/td&gt;
      &lt;td&gt;Israel Discount Bank of New York&lt;/td&gt;
      &lt;td&gt;January 11, 2002&lt;/td&gt;
      &lt;td&gt;September 21, 2015&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;539&lt;/th&gt;
      &lt;td&gt;Sinclair National Bank&lt;/td&gt;
      &lt;td&gt;Gravette&lt;/td&gt;
      &lt;td&gt;AR&lt;/td&gt;
      &lt;td&gt;34248&lt;/td&gt;
      &lt;td&gt;Delta Trust &amp;amp; Bank&lt;/td&gt;
      &lt;td&gt;September 7, 2001&lt;/td&gt;
      &lt;td&gt;February 10, 2004&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;540&lt;/th&gt;
      &lt;td&gt;Superior Bank, FSB&lt;/td&gt;
      &lt;td&gt;Hinsdale&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;32646&lt;/td&gt;
      &lt;td&gt;Superior Federal, FSB&lt;/td&gt;
      &lt;td&gt;July 27, 2001&lt;/td&gt;
      &lt;td&gt;August 19, 2014&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;541&lt;/th&gt;
      &lt;td&gt;Malta National Bank&lt;/td&gt;
      &lt;td&gt;Malta&lt;/td&gt;
      &lt;td&gt;OH&lt;/td&gt;
      &lt;td&gt;6629&lt;/td&gt;
      &lt;td&gt;North Valley Bank&lt;/td&gt;
      &lt;td&gt;May 3, 2001&lt;/td&gt;
      &lt;td&gt;November 18, 2002&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;542&lt;/th&gt;
      &lt;td&gt;First Alliance Bank &amp;amp; Trust Co.&lt;/td&gt;
      &lt;td&gt;Manchester&lt;/td&gt;
      &lt;td&gt;NH&lt;/td&gt;
      &lt;td&gt;34264&lt;/td&gt;
      &lt;td&gt;Southern New Hampshire Bank &amp;amp; Trust&lt;/td&gt;
      &lt;td&gt;February 2, 2001&lt;/td&gt;
      &lt;td&gt;February 18, 2003&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;543&lt;/th&gt;
      &lt;td&gt;National State Bank of Metropolis&lt;/td&gt;
      &lt;td&gt;Metropolis&lt;/td&gt;
      &lt;td&gt;IL&lt;/td&gt;
      &lt;td&gt;3815&lt;/td&gt;
      &lt;td&gt;Banterra Bank of Marion&lt;/td&gt;
      &lt;td&gt;December 14, 2000&lt;/td&gt;
      &lt;td&gt;March 17, 2005&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;544&lt;/th&gt;
      &lt;td&gt;Bank of Honolulu&lt;/td&gt;
      &lt;td&gt;Honolulu&lt;/td&gt;
      &lt;td&gt;HI&lt;/td&gt;
      &lt;td&gt;21029&lt;/td&gt;
      &lt;td&gt;Bank of the Orient&lt;/td&gt;
      &lt;td&gt;October 13, 2000&lt;/td&gt;
      &lt;td&gt;March 17, 2005&lt;/td&gt;
      &lt;td&gt;none&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;545 rows Ã 10 columns&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id=&#34;sql-data&#34;&gt;SQL Data&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Note: If you are completely unfamiliar with SQL you can check out my other course: &amp;ldquo;Complete SQL Bootcamp&amp;rdquo; to learn SQL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The pandas.io.sql module provides a collection of query wrappers to both facilitate data retrieval and to reduce dependency on DB-specific API. Database abstraction is provided by SQLAlchemy if installed. In addition you will need a driver library for your database. Examples of such drivers are psycopg2 for PostgreSQL or pymysql for MySQL. For SQLite this is included in Pythonâs standard library by default. You can find an overview of supported drivers for each SQL dialect in the SQLAlchemy docs.&lt;/p&gt;
&lt;p&gt;If SQLAlchemy is not installed, a fallback is only provided for sqlite (and for mysql for backwards compatibility, but this is deprecated and will be removed in a future version). This mode requires a Python database adapter which respect the Python DB-API.&lt;/p&gt;
&lt;p&gt;See also some cookbook examples for some advanced strategies.&lt;/p&gt;
&lt;p&gt;The key functions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read_sql_table(table_name, con[, schema, &amp;hellip;])
&lt;ul&gt;
&lt;li&gt;Read SQL database table into a DataFrame.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read_sql_query(sql, con[, index_col, &amp;hellip;])
&lt;ul&gt;
&lt;li&gt;Read SQL query into a DataFrame.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;read_sql(sql, con[, index_col, &amp;hellip;])
&lt;ul&gt;
&lt;li&gt;Read SQL query or database table into a DataFrame.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DataFrame.to_sql(name, con[, flavor, &amp;hellip;])
&lt;ul&gt;
&lt;li&gt;Write records stored in a DataFrame to a SQL database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sqlalchemy import create_engine
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;engine = create_engine(&#39;sqlite:///:memory:&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.to_sql(&#39;data&#39;, engine)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sql_df = pd.read_sql(&#39;data&#39;,con=engine)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sql_df
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;index&lt;/th&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;th&gt;c&lt;/th&gt;
      &lt;th&gt;d&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Transformations</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/03_04_data_preprocessing_transformations/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/03_04_data_preprocessing_transformations/</guid>
      <description>&lt;p&gt;Transformations of predictor variables may be needed for several reasons. Some modeling techniques may have strict requirements, such as the predictors having a common scale. In other cases, creating a good model may be difficult due to specific characteristics of the data (e.g., outliers). There are several methods to transform data prior to modelling, which include: standardization, min-max scaling and unit vector normalization.&lt;/p&gt;
&lt;h2 id=&#34;standardization-z-normalization&#34;&gt;Standardization (Z normalization)&lt;/h2&gt;
&lt;p&gt;The most straightforward and common data transformation is to standardize the data. To standardize the data, the average predictor value is subtracted from all the values. As a result of standardizing, the predictor has a mean of 0 and a standard deviation of 1.&lt;/p&gt;
&lt;p&gt;We will use scikit-learn function &lt;strong&gt;StandardScaler&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Standardize data (0 mean, 1 stdev)
from sklearn.preprocessing import StandardScaler
import pandas
import numpy
from sklearn import datasets

# Load a dictionary (technically, a Bunch) containing the data
iris = datasets.load_iris()

# &#39;data&#39; and &#39;target&#39; contains the feature data and classes, respectively
X, y = iris[&#39;data&#39;], iris[&#39;target&#39;]

scaler = StandardScaler().fit(X)
rescaledX = scaler.transform(X)

# summarize transformed data
print(rescaledX[0:5,:])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[-0.90068117  1.01900435 -1.34022653 -1.3154443 ]
 [-1.14301691 -0.13197948 -1.34022653 -1.3154443 ]
 [-1.38535265  0.32841405 -1.39706395 -1.3154443 ]
 [-1.50652052  0.09821729 -1.2833891  -1.3154443 ]
 [-1.02184904  1.24920112 -1.34022653 -1.3154443 ]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The values for each attribute now have a mean value of 0 and a standard deviation of 1.&lt;/p&gt;
&lt;h2 id=&#34;min-max-normalization-rescale&#34;&gt;Min-Max Normalization (Rescale)&lt;/h2&gt;
&lt;p&gt;When your data is comprised of attributes with varying scales, many machine learning algorithms can benefit from rescaling the attributes to all have the same scale. Often this is referred to as min-max normalization and attributes are often rescaled into the range between 0 and 1. This is useful for optimization algorithms used in the core of machine learning algorithms like gradient descent. It is also useful for algorithms that weight inputs like regression and neural networks and algorithms that use distance measures like K-Nearest Neighbors.&lt;/p&gt;
&lt;p&gt;We will use scikit-learn function &lt;strong&gt;MinMaxScaler&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Rescale data (between 0 and 1)
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1))
rescaledX = scaler.fit_transform(X)

# summarize transformed data
print(rescaledX[0:5,:])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[0.22222222 0.625      0.06779661 0.04166667]
 [0.16666667 0.41666667 0.06779661 0.04166667]
 [0.11111111 0.5        0.05084746 0.04166667]
 [0.08333333 0.45833333 0.08474576 0.04166667]
 [0.19444444 0.66666667 0.06779661 0.04166667]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rows are normalized to length 1.&lt;/p&gt;
&lt;h2 id=&#34;unit-vector-normalization&#34;&gt;Unit Vector Normalization&lt;/h2&gt;
&lt;p&gt;Each sample (i.e. each row of the data matrix) with at least one non zero component is rescaled independently of other data samples so that its norm equals 1 (called a unit norm in linear algebra). This preprocessing can be useful for sparse datasets (lots of zeros) with attributes of varying scales when using algorithms that weight input values such as neural networks and algorithms that use distance measures such as K-Nearest Neighbors.&lt;/p&gt;
&lt;p&gt;We will use scikit-learn function &lt;strong&gt;Normalizer&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Normalize data (length of 1)
from sklearn.preprocessing import Normalizer

scaler = Normalizer().fit(X)
normalizedX = scaler.transform(X)

# summarize transformed data
print(normalizedX[0:5,:])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[[0.80377277 0.55160877 0.22064351 0.0315205 ]
 [0.82813287 0.50702013 0.23660939 0.03380134]
 [0.80533308 0.54831188 0.2227517  0.03426949]
 [0.80003025 0.53915082 0.26087943 0.03478392]
 [0.790965   0.5694948  0.2214702  0.0316386 ]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The rows are normalized to length 1.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Distribution Plots</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_04_plotting_distribution/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_04_plotting_distribution/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s discuss some plots that allow us to visualize the distribution of a data set. These plots are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;distplot&lt;/li&gt;
&lt;li&gt;jointplot&lt;/li&gt;
&lt;li&gt;pairplot&lt;/li&gt;
&lt;li&gt;rugplot&lt;/li&gt;
&lt;li&gt;kdeplot&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;imports&#34;&gt;Imports&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data&#34;&gt;Data&lt;/h2&gt;
&lt;p&gt;Seaborn comes with built-in data sets!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips = sns.load_dataset(&#39;tips&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;smoker&lt;/th&gt;
      &lt;th&gt;day&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;16.99&lt;/td&gt;
      &lt;td&gt;1.01&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10.34&lt;/td&gt;
      &lt;td&gt;1.66&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;21.01&lt;/td&gt;
      &lt;td&gt;3.50&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;23.68&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;24.59&lt;/td&gt;
      &lt;td&gt;3.61&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;distplot&#34;&gt;distplot&lt;/h2&gt;
&lt;p&gt;The distplot shows the distribution of a univariate set of observations.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot(tips[&#39;total_bill&#39;])
# Safe to ignore warnings
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f094c6b3a90&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_7_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;To remove the kde layer and just have the histogram use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot(tips[&#39;total_bill&#39;],kde=False,bins=30)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f094a543e10&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_9_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;jointplot&#34;&gt;jointplot&lt;/h2&gt;
&lt;p&gt;jointplot() allows you to basically match up two distplots for bivariate data. With your choice of what &lt;strong&gt;kind&lt;/strong&gt; parameter to compare with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;âscatterâ&lt;/li&gt;
&lt;li&gt;âregâ&lt;/li&gt;
&lt;li&gt;âresidâ&lt;/li&gt;
&lt;li&gt;âkdeâ&lt;/li&gt;
&lt;li&gt;âhexâ&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips,kind=&#39;scatter&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.JointGrid at 0x7f0949ed63c8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_11_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips,kind=&#39;hex&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.JointGrid at 0x7f094cf28cc0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_12_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.jointplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips,kind=&#39;reg&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.JointGrid at 0x7f0949ce0eb8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_13_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;pairplot&#34;&gt;pairplot&lt;/h2&gt;
&lt;p&gt;pairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.pairplot(tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.PairGrid at 0x7f0949a907f0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_15_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.pairplot(tips,hue=&#39;sex&#39;,palette=&#39;coolwarm&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.PairGrid at 0x7f094968dda0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_16_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;rugplot&#34;&gt;rugplot&lt;/h2&gt;
&lt;p&gt;rugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.rugplot(tips[&#39;total_bill&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f094913c898&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_18_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;kdeplot&#34;&gt;kdeplot&lt;/h2&gt;
&lt;p&gt;kdeplots are &lt;a href=&#34;http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kernel Density Estimation plots&lt;/a&gt;. These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Don&#39;t worry about understanding this code!
# It&#39;s just for the diagram below
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

#Create dataset
dataset = np.random.randn(25)

# Create another rugplot
sns.rugplot(dataset);

# Set up the x-axis for the plot
x_min = dataset.min() - 2
x_max = dataset.max() + 2

# 100 equally spaced points from x_min to x_max
x_axis = np.linspace(x_min,x_max,100)

# Set up the bandwidth, for info on this:
url = &#39;http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth&#39;

bandwidth = ((4*dataset.std()**5)/(3*len(dataset)))**.2


# Create an empty kernel list
kernel_list = []

# Plot each basis function
for data_point in dataset:
    
    # Create a kernel for each point and append to list
    kernel = stats.norm(data_point,bandwidth).pdf(x_axis)
    kernel_list.append(kernel)
    
    #Scale for plotting
    kernel = kernel / kernel.max()
    kernel = kernel * .4
    plt.plot(x_axis,kernel,color = &#39;grey&#39;,alpha=0.5)

plt.ylim(0,1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(0, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_20_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# To get the kde plot we can sum these basis functions.

# Plot the sum of the basis function
sum_of_kde = np.sum(kernel_list,axis=0)

# Plot figure
fig = plt.plot(x_axis,sum_of_kde,color=&#39;indianred&#39;)

# Add the initial rugplot
sns.rugplot(dataset,c = &#39;indianred&#39;)

# Get rid of y-tick marks
plt.yticks([])

# Set title
plt.suptitle(&amp;quot;Sum of the Basis Functions&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Text(0.5, 0.98, &#39;Sum of the Basis Functions&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_21_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;So with our tips dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.kdeplot(tips[&#39;total_bill&#39;])
sns.rugplot(tips[&#39;total_bill&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f09491856a0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_23_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.kdeplot(tips[&#39;tip&#39;])
sns.rugplot(tips[&#39;tip&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f0948023e80&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/03_plotting_distribution_24_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Categorical Data Plots</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_05_plotting_categorical/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_05_plotting_categorical/</guid>
      <description>&lt;p&gt;Now let&amp;rsquo;s discuss using seaborn to plot categorical data! There are a few main plot types for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;factorplot&lt;/li&gt;
&lt;li&gt;boxplot&lt;/li&gt;
&lt;li&gt;violinplot&lt;/li&gt;
&lt;li&gt;stripplot&lt;/li&gt;
&lt;li&gt;swarmplot&lt;/li&gt;
&lt;li&gt;barplot&lt;/li&gt;
&lt;li&gt;countplot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s go through examples of each!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips = sns.load_dataset(&#39;tips&#39;)
tips.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;smoker&lt;/th&gt;
      &lt;th&gt;day&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;16.99&lt;/td&gt;
      &lt;td&gt;1.01&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10.34&lt;/td&gt;
      &lt;td&gt;1.66&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;21.01&lt;/td&gt;
      &lt;td&gt;3.50&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;23.68&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;24.59&lt;/td&gt;
      &lt;td&gt;3.61&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;barplot-and-countplot&#34;&gt;barplot and countplot&lt;/h2&gt;
&lt;p&gt;These very similar plots allow you to get aggregate data off a categorical feature in your data. &lt;strong&gt;barplot&lt;/strong&gt; is a general plot that allows you to aggregate the categorical data based off some function, by default the mean:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.barplot(x=&#39;sex&#39;,y=&#39;total_bill&#39;,data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c50fa58&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_4_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can change the estimator object to your own function, that converts a vector to a scalar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.barplot(x=&#39;sex&#39;,y=&#39;total_bill&#39;,data=tips,estimator=np.std)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c506dd8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_7_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;countplot&#34;&gt;countplot&lt;/h3&gt;
&lt;p&gt;This is essentially the same as barplot except the estimator is explicitly counting the number of occurrences. Which is why we only pass the x value:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.countplot(x=&#39;sex&#39;,data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c460e48&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_9_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;boxplot-and-violinplot&#34;&gt;boxplot and violinplot&lt;/h2&gt;
&lt;p&gt;boxplots and violinplots are used to shown the distribution of categorical data. A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be âoutliersâ using a method that is a function of the inter-quartile range.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.boxplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, data=tips,palette=&#39;rainbow&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c4e5710&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_11_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Can do entire dataframe with orient=&#39;h&#39;
sns.boxplot(data=tips,palette=&#39;rainbow&#39;,orient=&#39;h&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c352080&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_12_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.boxplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, hue=&amp;quot;smoker&amp;quot;,data=tips, palette=&amp;quot;coolwarm&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c34b6d8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_13_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;violinplot&#34;&gt;violinplot&lt;/h3&gt;
&lt;p&gt;A violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.violinplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, data=tips,palette=&#39;rainbow&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c1cc9b0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_15_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.violinplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, data=tips,hue=&#39;sex&#39;,palette=&#39;Set1&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c14e470&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_16_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.violinplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, data=tips,hue=&#39;sex&#39;,split=True,palette=&#39;Set1&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c0f6f98&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_17_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;stripplot-and-swarmplot&#34;&gt;stripplot and swarmplot&lt;/h2&gt;
&lt;p&gt;The stripplot will draw a scatterplot where one variable is categorical. A strip plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution.&lt;/p&gt;
&lt;p&gt;The swarmplot is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that they donât overlap. This gives a better representation of the distribution of values, although it does not scale as well to large numbers of observations (both in terms of the ability to show all the points and in terms of the computation needed to arrange them).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.stripplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c0206d8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_19_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.stripplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, data=tips,jitter=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527bff4a20&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_20_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.stripplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, data=tips,jitter=True,hue=&#39;sex&#39;,palette=&#39;Set1&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527bf5d9e8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_21_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.stripplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, data=tips,jitter=True,hue=&#39;sex&#39;,palette=&#39;Set1&#39;,dodge=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527beceba8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_22_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.swarmplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;, data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527beb88d0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_23_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.swarmplot(x=&amp;quot;day&amp;quot;, y=&amp;quot;total_bill&amp;quot;,hue=&#39;sex&#39;,data=tips, palette=&amp;quot;Set1&amp;quot;, dodge=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527be82d68&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_24_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;combining-categorical-plots&#34;&gt;Combining Categorical Plots&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.violinplot(x=&amp;quot;tip&amp;quot;, y=&amp;quot;day&amp;quot;, data=tips,palette=&#39;rainbow&#39;)
sns.swarmplot(x=&amp;quot;tip&amp;quot;, y=&amp;quot;day&amp;quot;, data=tips,color=&#39;black&#39;,size=3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527be088d0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_26_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;factorplot&#34;&gt;factorplot&lt;/h2&gt;
&lt;p&gt;factorplot is the most general form of a categorical plot. It can take in a &lt;strong&gt;kind&lt;/strong&gt; parameter to adjust the plot type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.catplot(x=&#39;sex&#39;,y=&#39;total_bill&#39;,data=tips,kind=&#39;bar&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f527bece4a8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/04_plotting_categorical_28_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Matrix Plots</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_06_plotting_matrix/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_06_plotting_matrix/</guid>
      <description>&lt;p&gt;Matrix plots allow you to plot data as color-encoded matrices and can also be used to indicate clusters within the data (later in the machine learning section we will learn how to formally cluster data).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s begin by exploring seaborn&amp;rsquo;s heatmap and clutermap:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flights = sns.load_dataset(&#39;flights&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips = sns.load_dataset(&#39;tips&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;smoker&lt;/th&gt;
      &lt;th&gt;day&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;16.99&lt;/td&gt;
      &lt;td&gt;1.01&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10.34&lt;/td&gt;
      &lt;td&gt;1.66&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;21.01&lt;/td&gt;
      &lt;td&gt;3.50&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;23.68&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;24.59&lt;/td&gt;
      &lt;td&gt;3.61&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flights.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;month&lt;/th&gt;
      &lt;th&gt;passengers&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1949&lt;/td&gt;
      &lt;td&gt;January&lt;/td&gt;
      &lt;td&gt;112&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1949&lt;/td&gt;
      &lt;td&gt;February&lt;/td&gt;
      &lt;td&gt;118&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;1949&lt;/td&gt;
      &lt;td&gt;March&lt;/td&gt;
      &lt;td&gt;132&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;1949&lt;/td&gt;
      &lt;td&gt;April&lt;/td&gt;
      &lt;td&gt;129&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;1949&lt;/td&gt;
      &lt;td&gt;May&lt;/td&gt;
      &lt;td&gt;121&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;heatmap&#34;&gt;Heatmap&lt;/h2&gt;
&lt;p&gt;In order for a heatmap to work properly, your data should already be in a matrix form, the sns.heatmap function basically just colors it in for you. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;smoker&lt;/th&gt;
      &lt;th&gt;day&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;16.99&lt;/td&gt;
      &lt;td&gt;1.01&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10.34&lt;/td&gt;
      &lt;td&gt;1.66&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;21.01&lt;/td&gt;
      &lt;td&gt;3.50&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;23.68&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;24.59&lt;/td&gt;
      &lt;td&gt;3.61&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Matrix form for correlation data
tips.corr()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.675734&lt;/td&gt;
      &lt;td&gt;0.598315&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;td&gt;0.675734&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
      &lt;td&gt;0.489299&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;size&lt;/th&gt;
      &lt;td&gt;0.598315&lt;/td&gt;
      &lt;td&gt;0.489299&lt;/td&gt;
      &lt;td&gt;1.000000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.heatmap(tips.corr())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f66fe34a4e0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/05_plotting_matrix_9_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.heatmap(tips.corr(),cmap=&#39;coolwarm&#39;,annot=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f66fc24a4e0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/05_plotting_matrix_10_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Or for the flights data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;flights.pivot_table(values=&#39;passengers&#39;,index=&#39;month&#39;,columns=&#39;year&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;1949&lt;/th&gt;
      &lt;th&gt;1950&lt;/th&gt;
      &lt;th&gt;1951&lt;/th&gt;
      &lt;th&gt;1952&lt;/th&gt;
      &lt;th&gt;1953&lt;/th&gt;
      &lt;th&gt;1954&lt;/th&gt;
      &lt;th&gt;1955&lt;/th&gt;
      &lt;th&gt;1956&lt;/th&gt;
      &lt;th&gt;1957&lt;/th&gt;
      &lt;th&gt;1958&lt;/th&gt;
      &lt;th&gt;1959&lt;/th&gt;
      &lt;th&gt;1960&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;month&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;January&lt;/th&gt;
      &lt;td&gt;112&lt;/td&gt;
      &lt;td&gt;115&lt;/td&gt;
      &lt;td&gt;145&lt;/td&gt;
      &lt;td&gt;171&lt;/td&gt;
      &lt;td&gt;196&lt;/td&gt;
      &lt;td&gt;204&lt;/td&gt;
      &lt;td&gt;242&lt;/td&gt;
      &lt;td&gt;284&lt;/td&gt;
      &lt;td&gt;315&lt;/td&gt;
      &lt;td&gt;340&lt;/td&gt;
      &lt;td&gt;360&lt;/td&gt;
      &lt;td&gt;417&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;February&lt;/th&gt;
      &lt;td&gt;118&lt;/td&gt;
      &lt;td&gt;126&lt;/td&gt;
      &lt;td&gt;150&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
      &lt;td&gt;196&lt;/td&gt;
      &lt;td&gt;188&lt;/td&gt;
      &lt;td&gt;233&lt;/td&gt;
      &lt;td&gt;277&lt;/td&gt;
      &lt;td&gt;301&lt;/td&gt;
      &lt;td&gt;318&lt;/td&gt;
      &lt;td&gt;342&lt;/td&gt;
      &lt;td&gt;391&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;March&lt;/th&gt;
      &lt;td&gt;132&lt;/td&gt;
      &lt;td&gt;141&lt;/td&gt;
      &lt;td&gt;178&lt;/td&gt;
      &lt;td&gt;193&lt;/td&gt;
      &lt;td&gt;236&lt;/td&gt;
      &lt;td&gt;235&lt;/td&gt;
      &lt;td&gt;267&lt;/td&gt;
      &lt;td&gt;317&lt;/td&gt;
      &lt;td&gt;356&lt;/td&gt;
      &lt;td&gt;362&lt;/td&gt;
      &lt;td&gt;406&lt;/td&gt;
      &lt;td&gt;419&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;April&lt;/th&gt;
      &lt;td&gt;129&lt;/td&gt;
      &lt;td&gt;135&lt;/td&gt;
      &lt;td&gt;163&lt;/td&gt;
      &lt;td&gt;181&lt;/td&gt;
      &lt;td&gt;235&lt;/td&gt;
      &lt;td&gt;227&lt;/td&gt;
      &lt;td&gt;269&lt;/td&gt;
      &lt;td&gt;313&lt;/td&gt;
      &lt;td&gt;348&lt;/td&gt;
      &lt;td&gt;348&lt;/td&gt;
      &lt;td&gt;396&lt;/td&gt;
      &lt;td&gt;461&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;May&lt;/th&gt;
      &lt;td&gt;121&lt;/td&gt;
      &lt;td&gt;125&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;183&lt;/td&gt;
      &lt;td&gt;229&lt;/td&gt;
      &lt;td&gt;234&lt;/td&gt;
      &lt;td&gt;270&lt;/td&gt;
      &lt;td&gt;318&lt;/td&gt;
      &lt;td&gt;355&lt;/td&gt;
      &lt;td&gt;363&lt;/td&gt;
      &lt;td&gt;420&lt;/td&gt;
      &lt;td&gt;472&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;June&lt;/th&gt;
      &lt;td&gt;135&lt;/td&gt;
      &lt;td&gt;149&lt;/td&gt;
      &lt;td&gt;178&lt;/td&gt;
      &lt;td&gt;218&lt;/td&gt;
      &lt;td&gt;243&lt;/td&gt;
      &lt;td&gt;264&lt;/td&gt;
      &lt;td&gt;315&lt;/td&gt;
      &lt;td&gt;374&lt;/td&gt;
      &lt;td&gt;422&lt;/td&gt;
      &lt;td&gt;435&lt;/td&gt;
      &lt;td&gt;472&lt;/td&gt;
      &lt;td&gt;535&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;July&lt;/th&gt;
      &lt;td&gt;148&lt;/td&gt;
      &lt;td&gt;170&lt;/td&gt;
      &lt;td&gt;199&lt;/td&gt;
      &lt;td&gt;230&lt;/td&gt;
      &lt;td&gt;264&lt;/td&gt;
      &lt;td&gt;302&lt;/td&gt;
      &lt;td&gt;364&lt;/td&gt;
      &lt;td&gt;413&lt;/td&gt;
      &lt;td&gt;465&lt;/td&gt;
      &lt;td&gt;491&lt;/td&gt;
      &lt;td&gt;548&lt;/td&gt;
      &lt;td&gt;622&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;August&lt;/th&gt;
      &lt;td&gt;148&lt;/td&gt;
      &lt;td&gt;170&lt;/td&gt;
      &lt;td&gt;199&lt;/td&gt;
      &lt;td&gt;242&lt;/td&gt;
      &lt;td&gt;272&lt;/td&gt;
      &lt;td&gt;293&lt;/td&gt;
      &lt;td&gt;347&lt;/td&gt;
      &lt;td&gt;405&lt;/td&gt;
      &lt;td&gt;467&lt;/td&gt;
      &lt;td&gt;505&lt;/td&gt;
      &lt;td&gt;559&lt;/td&gt;
      &lt;td&gt;606&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;September&lt;/th&gt;
      &lt;td&gt;136&lt;/td&gt;
      &lt;td&gt;158&lt;/td&gt;
      &lt;td&gt;184&lt;/td&gt;
      &lt;td&gt;209&lt;/td&gt;
      &lt;td&gt;237&lt;/td&gt;
      &lt;td&gt;259&lt;/td&gt;
      &lt;td&gt;312&lt;/td&gt;
      &lt;td&gt;355&lt;/td&gt;
      &lt;td&gt;404&lt;/td&gt;
      &lt;td&gt;404&lt;/td&gt;
      &lt;td&gt;463&lt;/td&gt;
      &lt;td&gt;508&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;October&lt;/th&gt;
      &lt;td&gt;119&lt;/td&gt;
      &lt;td&gt;133&lt;/td&gt;
      &lt;td&gt;162&lt;/td&gt;
      &lt;td&gt;191&lt;/td&gt;
      &lt;td&gt;211&lt;/td&gt;
      &lt;td&gt;229&lt;/td&gt;
      &lt;td&gt;274&lt;/td&gt;
      &lt;td&gt;306&lt;/td&gt;
      &lt;td&gt;347&lt;/td&gt;
      &lt;td&gt;359&lt;/td&gt;
      &lt;td&gt;407&lt;/td&gt;
      &lt;td&gt;461&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;November&lt;/th&gt;
      &lt;td&gt;104&lt;/td&gt;
      &lt;td&gt;114&lt;/td&gt;
      &lt;td&gt;146&lt;/td&gt;
      &lt;td&gt;172&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
      &lt;td&gt;203&lt;/td&gt;
      &lt;td&gt;237&lt;/td&gt;
      &lt;td&gt;271&lt;/td&gt;
      &lt;td&gt;305&lt;/td&gt;
      &lt;td&gt;310&lt;/td&gt;
      &lt;td&gt;362&lt;/td&gt;
      &lt;td&gt;390&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;December&lt;/th&gt;
      &lt;td&gt;118&lt;/td&gt;
      &lt;td&gt;140&lt;/td&gt;
      &lt;td&gt;166&lt;/td&gt;
      &lt;td&gt;194&lt;/td&gt;
      &lt;td&gt;201&lt;/td&gt;
      &lt;td&gt;229&lt;/td&gt;
      &lt;td&gt;278&lt;/td&gt;
      &lt;td&gt;306&lt;/td&gt;
      &lt;td&gt;336&lt;/td&gt;
      &lt;td&gt;337&lt;/td&gt;
      &lt;td&gt;405&lt;/td&gt;
      &lt;td&gt;432&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;pvflights = flights.pivot_table(values=&#39;passengers&#39;,index=&#39;month&#39;,columns=&#39;year&#39;)
sns.heatmap(pvflights)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f66fbab1eb8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/05_plotting_matrix_13_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.heatmap(pvflights,cmap=&#39;magma&#39;,linecolor=&#39;white&#39;,linewidths=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f66fb9f0080&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/05_plotting_matrix_14_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;clustermap&#34;&gt;clustermap&lt;/h2&gt;
&lt;p&gt;The clustermap uses hierarchal clustering to produce a clustered version of the heatmap. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.clustermap(pvflights)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.matrix.ClusterGrid at 0x7f66fba5a080&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/05_plotting_matrix_16_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Notice now how the years and months are no longer in order, instead they are grouped by similarity in value (passenger count). That means we can begin to infer things from this plot, such as August and July being similar (makes sense, since they are both summer travel months)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# More options to get the information a little clearer like normalization
sns.clustermap(pvflights,cmap=&#39;coolwarm&#39;,standard_scale=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.matrix.ClusterGrid at 0x7f66fe335be0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/05_plotting_matrix_18_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grids Plots</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_07_plotting_grid/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_07_plotting_grid/</guid>
      <description>&lt;p&gt;Grids are general types of plots that allow you to map plot types to rows and columns of a grid, this helps you create similar plots separated by features.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iris = sns.load_dataset(&#39;iris&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iris.head()

&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;sepal_length&lt;/th&gt;
      &lt;th&gt;sepal_width&lt;/th&gt;
      &lt;th&gt;petal_length&lt;/th&gt;
      &lt;th&gt;petal_width&lt;/th&gt;
      &lt;th&gt;species&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;5.1&lt;/td&gt;
      &lt;td&gt;3.5&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;setosa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;4.9&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;setosa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;4.7&lt;/td&gt;
      &lt;td&gt;3.2&lt;/td&gt;
      &lt;td&gt;1.3&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;setosa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4.6&lt;/td&gt;
      &lt;td&gt;3.1&lt;/td&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;setosa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5.0&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;setosa&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;pairgrid&#34;&gt;PairGrid&lt;/h2&gt;
&lt;p&gt;Pairgrid is a subplot grid for plotting pairwise relationships in a dataset.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Just the Grid
sns.PairGrid(iris)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.PairGrid at 0x7f00d6bfccf8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_5_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Then you map to the grid
g = sns.PairGrid(iris)
g.map(plt.scatter)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.PairGrid at 0x7f00d3ccf898&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_6_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Map to upper,lower, and diagonal
g = sns.PairGrid(iris)
g.map_diag(plt.hist)
g.map_upper(plt.scatter)
g.map_lower(sns.kdeplot)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.PairGrid at 0x7f00d30b4978&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_7_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;pairplot&#34;&gt;pairplot&lt;/h2&gt;
&lt;p&gt;pairplot is a simpler version of PairGrid (you&amp;rsquo;ll use quite often)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.pairplot(iris)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.PairGrid at 0x7f00d0f46fd0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_9_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.pairplot(iris,hue=&#39;species&#39;,palette=&#39;rainbow&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.PairGrid at 0x7f00d0925908&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_10_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;facet-grid&#34;&gt;Facet Grid&lt;/h2&gt;
&lt;p&gt;FacetGrid is the general way to create grids of plots based off of a feature:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips = sns.load_dataset(&#39;tips&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;smoker&lt;/th&gt;
      &lt;th&gt;day&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;16.99&lt;/td&gt;
      &lt;td&gt;1.01&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10.34&lt;/td&gt;
      &lt;td&gt;1.66&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;21.01&lt;/td&gt;
      &lt;td&gt;3.50&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;23.68&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;24.59&lt;/td&gt;
      &lt;td&gt;3.61&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Just the Grid
g = sns.FacetGrid(tips, col=&amp;quot;time&amp;quot;, row=&amp;quot;smoker&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_14_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = sns.FacetGrid(tips, col=&amp;quot;time&amp;quot;,  row=&amp;quot;smoker&amp;quot;)
g = g.map(plt.hist, &amp;quot;total_bill&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_15_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = sns.FacetGrid(tips, col=&amp;quot;time&amp;quot;,  row=&amp;quot;smoker&amp;quot;,hue=&#39;sex&#39;)
# Notice hwo the arguments come after plt.scatter call
g = g.map(plt.scatter, &amp;quot;total_bill&amp;quot;, &amp;quot;tip&amp;quot;).add_legend()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_16_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;jointgrid&#34;&gt;JointGrid&lt;/h2&gt;
&lt;p&gt;JointGrid is the general version for jointplot() type grids, for a quick example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = sns.JointGrid(x=&amp;quot;total_bill&amp;quot;, y=&amp;quot;tip&amp;quot;, data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_18_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;g = sns.JointGrid(x=&amp;quot;total_bill&amp;quot;, y=&amp;quot;tip&amp;quot;, data=tips)
g = g.plot(sns.regplot, sns.distplot)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/06_plotting_grid_19_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Reference the documentation as necessary for grid types, but most of the time you&amp;rsquo;ll just use the easier plots discussed earlier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Regression Plots</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_08_plotting_regression/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_08_plotting_regression/</guid>
      <description>&lt;p&gt;Seaborn has many built-in capabilities for regression plots, however we won&amp;rsquo;t really discuss regression until the machine learning section of the course, so we will only cover the &lt;strong&gt;lmplot()&lt;/strong&gt; function for now.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;lmplot&lt;/strong&gt; allows you to display linear models, but it also conveniently allows you to split up those plots based off of features, as well as coloring the hue based off of features.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s explore how this works:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips = sns.load_dataset(&#39;tips&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tips.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;total_bill&lt;/th&gt;
      &lt;th&gt;tip&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;smoker&lt;/th&gt;
      &lt;th&gt;day&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;16.99&lt;/td&gt;
      &lt;td&gt;1.01&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10.34&lt;/td&gt;
      &lt;td&gt;1.66&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;21.01&lt;/td&gt;
      &lt;td&gt;3.50&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;23.68&lt;/td&gt;
      &lt;td&gt;3.31&lt;/td&gt;
      &lt;td&gt;Male&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;24.59&lt;/td&gt;
      &lt;td&gt;3.61&lt;/td&gt;
      &lt;td&gt;Female&lt;/td&gt;
      &lt;td&gt;No&lt;/td&gt;
      &lt;td&gt;Sun&lt;/td&gt;
      &lt;td&gt;Dinner&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;lmplot&#34;&gt;lmplot()&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f62f3a8d588&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/07_plotting_regression_5_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips,hue=&#39;sex&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f62f19f72b0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/07_plotting_regression_6_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips,hue=&#39;sex&#39;,palette=&#39;coolwarm&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f62f12adf60&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/07_plotting_regression_7_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;working-with-markers&#34;&gt;Working with Markers&lt;/h3&gt;
&lt;p&gt;lmplot kwargs get passed through to &lt;strong&gt;regplot&lt;/strong&gt; which is a more general form of lmplot(). regplot has a scatter_kws parameter that gets passed to plt.scatter. So you want to set the s parameter in that dictionary, which corresponds (a bit confusingly) to the squared markersize. In other words you end up passing a dictionary with the base matplotlib arguments, in this case, s for size of a scatter plot. In general, you probably won&amp;rsquo;t remember this off the top of your head, but instead reference the documentation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# http://matplotlib.org/api/markers_api.html
sns.lmplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips,hue=&#39;sex&#39;,palette=&#39;coolwarm&#39;,
           markers=[&#39;o&#39;,&#39;v&#39;],scatter_kws={&#39;s&#39;:100})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f62f1230128&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/07_plotting_regression_9_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;using-a-grid&#34;&gt;Using a Grid&lt;/h2&gt;
&lt;p&gt;We can add more variable separation through columns and rows with the use of a grid. Just indicate this with the col or row arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips,col=&#39;sex&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f62f11b45f8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/07_plotting_regression_11_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&amp;quot;total_bill&amp;quot;, y=&amp;quot;tip&amp;quot;, row=&amp;quot;sex&amp;quot;, col=&amp;quot;time&amp;quot;,data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f62f1155fd0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/07_plotting_regression_12_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips,col=&#39;day&#39;,hue=&#39;sex&#39;,palette=&#39;coolwarm&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f62f0dbe0f0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/07_plotting_regression_13_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;aspect-and-size&#34;&gt;Aspect and Size&lt;/h2&gt;
&lt;p&gt;Seaborn figures can have their size and aspect ratio adjusted with the &lt;strong&gt;size&lt;/strong&gt; and &lt;strong&gt;aspect&lt;/strong&gt; parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.lmplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,data=tips,col=&#39;day&#39;,hue=&#39;sex&#39;,palette=&#39;coolwarm&#39;,
          aspect=0.6,size=8)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/home/ggilmore/.local/lib/python3.6/site-packages/seaborn/regression.py:546: UserWarning: The `size` paramter has been renamed to `height`; please update your code.
  warnings.warn(msg, UserWarning)





&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f62f008ef98&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/07_plotting_regression_15_2.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re probably wondering how to change the font size or control the aesthetics even more, check out the Style and Color Lecture and Notebook for more info on that!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Plots Style and Color</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_09_plotting_style_color/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_09_plotting_style_color/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve shown a few times how to control figure aesthetics in seaborn, but let&amp;rsquo;s now go over it formally:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
tips = sns.load_dataset(&#39;tips&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;styles&#34;&gt;Styles&lt;/h2&gt;
&lt;p&gt;You can set particular styles:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.countplot(x=&#39;sex&#39;,data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f3651d0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/08_plotting_style_color_3_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.set_style(&#39;white&#39;)
sns.countplot(x=&#39;sex&#39;,data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f2bf3c8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/08_plotting_style_color_4_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.set_style(&#39;ticks&#39;)
sns.countplot(x=&#39;sex&#39;,data=tips,palette=&#39;deep&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f279ef0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/08_plotting_style_color_5_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;spine-removal&#34;&gt;Spine Removal&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.countplot(x=&#39;sex&#39;,data=tips)
sns.despine()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/08_plotting_style_color_7_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.countplot(x=&#39;sex&#39;,data=tips)
sns.despine(left=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/08_plotting_style_color_8_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;size-and-aspect&#34;&gt;Size and Aspect&lt;/h2&gt;
&lt;p&gt;You can use matplotlib&amp;rsquo;s **plt.figure(figsize=(width,height) ** to change the size of most seaborn plots.&lt;/p&gt;
&lt;p&gt;You can control the size and aspect ratio of most seaborn grid plots by passing in parameters: size, and aspect. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Non Grid Plot
plt.figure(figsize=(12,3))
sns.countplot(x=&#39;sex&#39;,data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f4d8b38&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/08_plotting_style_color_11_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Grid Type Plot
sns.lmplot(x=&#39;total_bill&#39;,y=&#39;tip&#39;,height=2,aspect=4,data=tips)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/home/ggilmore/.local/lib/python3.6/site-packages/seaborn/axisgrid.py:375: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all axes decorations. 
  fig.tight_layout()
/home/ggilmore/.local/lib/python3.6/site-packages/seaborn/axisgrid.py:848: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all axes decorations. 
  self.fig.tight_layout()





&amp;lt;seaborn.axisgrid.FacetGrid at 0x7f1d2f1e7860&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/08_plotting_style_color_12_2.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;scale-and-context&#34;&gt;Scale and Context&lt;/h2&gt;
&lt;p&gt;The set_context() allows you to override default parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.set_context(&#39;poster&#39;,font_scale=4)
sns.countplot(x=&#39;sex&#39;,data=tips,palette=&#39;coolwarm&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f1e7b70&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/08_plotting_style_color_14_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Check out the documentation page for more info on these topics:
&lt;a href=&#34;https://stanford.edu/~mwaskom/software/seaborn/tutorial/aesthetics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://stanford.edu/~mwaskom/software/seaborn/tutorial/aesthetics.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pandas Plotting</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_10_plotting_pandas/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_10_plotting_pandas/</guid>
      <description>&lt;p&gt;In this lecture we will learn about pandas built-in capabilities for data visualization! It&amp;rsquo;s built-off of matplotlib, but it baked into pandas for easier usage!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look!&lt;/p&gt;
&lt;h2 id=&#34;imports&#34;&gt;Imports&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import pandas as pd
%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;the-data&#34;&gt;The Data&lt;/h2&gt;
&lt;p&gt;There are some fake data csv files you can read in as dataframes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1 = pd.read_csv(&#39;df1&#39;,index_col=0)
df2 = pd.read_csv(&#39;df2&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;style-sheets&#34;&gt;Style Sheets&lt;/h2&gt;
&lt;p&gt;Matplotlib has &lt;a href=&#34;http://matplotlib.org/gallery.html#style_sheets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;style sheets&lt;/a&gt; you can use to make your plots look a little nicer. These style sheets include plot_bmh,plot_fivethirtyeight,plot_ggplot and more. They basically create a set of style rules that your plots follow. I recommend using them, they make all your plots have the same look and feel more professional. You can even create your own if you want your company&amp;rsquo;s plots to all have the same look (it is a bit tedious to create on though).&lt;/p&gt;
&lt;p&gt;Here is how to use them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before plt.style.use() your plots look like this:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1[&#39;A&#39;].hist()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50c19d68&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_6_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Call the style:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
plt.style.use(&#39;ggplot&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now your plots look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1[&#39;A&#39;].hist()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50a037b8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_10_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.style.use(&#39;bmh&#39;)
df1[&#39;A&#39;].hist()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef5096c550&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_11_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.style.use(&#39;dark_background&#39;)
df1[&#39;A&#39;].hist()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef508e80b8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_12_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.style.use(&#39;fivethirtyeight&#39;)
df1[&#39;A&#39;].hist()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef508654a8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_13_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.style.use(&#39;ggplot&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s stick with the ggplot style and actually show you how to utilize pandas built-in plotting capabilities!&lt;/p&gt;
&lt;h1 id=&#34;plot-types&#34;&gt;Plot Types&lt;/h1&gt;
&lt;p&gt;There are several plot types built-in to pandas, most of them statistical plots by nature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;df.plot.area&lt;/li&gt;
&lt;li&gt;df.plot.barh&lt;/li&gt;
&lt;li&gt;df.plot.density&lt;/li&gt;
&lt;li&gt;df.plot.hist&lt;/li&gt;
&lt;li&gt;df.plot.line&lt;/li&gt;
&lt;li&gt;df.plot.scatter&lt;/li&gt;
&lt;li&gt;df.plot.bar&lt;/li&gt;
&lt;li&gt;df.plot.box&lt;/li&gt;
&lt;li&gt;df.plot.hexbin&lt;/li&gt;
&lt;li&gt;df.plot.kde&lt;/li&gt;
&lt;li&gt;df.plot.pie&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also just call df.plot(kind=&amp;lsquo;hist&amp;rsquo;) or replace that kind argument with any of the key terms shown in the list above (e.g. &amp;lsquo;box&amp;rsquo;,&amp;lsquo;barh&amp;rsquo;, etc..)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s start going through them!&lt;/p&gt;
&lt;h2 id=&#34;area&#34;&gt;Area&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.plot.area(alpha=0.4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef5081c080&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_18_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;barplots&#34;&gt;Barplots&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;a&lt;/th&gt;
      &lt;th&gt;b&lt;/th&gt;
      &lt;th&gt;c&lt;/th&gt;
      &lt;th&gt;d&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0.039762&lt;/td&gt;
      &lt;td&gt;0.218517&lt;/td&gt;
      &lt;td&gt;0.103423&lt;/td&gt;
      &lt;td&gt;0.957904&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.937288&lt;/td&gt;
      &lt;td&gt;0.041567&lt;/td&gt;
      &lt;td&gt;0.899125&lt;/td&gt;
      &lt;td&gt;0.977680&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;0.780504&lt;/td&gt;
      &lt;td&gt;0.008948&lt;/td&gt;
      &lt;td&gt;0.557808&lt;/td&gt;
      &lt;td&gt;0.797510&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;0.672717&lt;/td&gt;
      &lt;td&gt;0.247870&lt;/td&gt;
      &lt;td&gt;0.264071&lt;/td&gt;
      &lt;td&gt;0.444358&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;0.053829&lt;/td&gt;
      &lt;td&gt;0.520124&lt;/td&gt;
      &lt;td&gt;0.552264&lt;/td&gt;
      &lt;td&gt;0.190008&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.plot.bar()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50762748&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_21_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.plot.bar(stacked=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef5070a780&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_22_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;histograms&#34;&gt;Histograms&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1[&#39;A&#39;].plot.hist(bins=50)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50837ac8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_24_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;line-plots&#34;&gt;Line Plots&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#df1.plot.line(x=df1.index,y=&#39;B&#39;,figsize=(12,3),lw=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;scatter-plots&#34;&gt;Scatter Plots&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1.plot.scatter(x=&#39;A&#39;,y=&#39;B&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef505d8908&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_28_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;You can use c to color based off another column value
Use cmap to indicate colormap to use.
For all the colormaps, check out: &lt;a href=&#34;http://matplotlib.org/users/colormaps.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://matplotlib.org/users/colormaps.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1.plot.scatter(x=&#39;A&#39;,y=&#39;B&#39;,c=&#39;C&#39;,cmap=&#39;coolwarm&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50643278&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_30_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Or use s to indicate size based off another column. s parameter needs to be an array, not just the name of a column:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df1.plot.scatter(x=&#39;A&#39;,y=&#39;B&#39;,s=df1[&#39;C&#39;]*200)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/home/ggilmore/.local/lib/python3.6/site-packages/matplotlib/collections.py:857: RuntimeWarning: invalid value encountered in sqrt
  scale = np.sqrt(self._sizes) * dpi / 72.0 * self._factor





&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50465da0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_32_2.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;boxplots&#34;&gt;BoxPlots&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.plot.box() # Can also pass a by= argument for groupby
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50332e10&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_34_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;hexagonal-bin-plot&#34;&gt;Hexagonal Bin Plot&lt;/h2&gt;
&lt;p&gt;Useful for Bivariate Data, alternative to scatterplot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(np.random.randn(1000, 2), columns=[&#39;a&#39;, &#39;b&#39;])
df.plot.hexbin(x=&#39;a&#39;,y=&#39;b&#39;,gridsize=25,cmap=&#39;Oranges&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef502539e8&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_36_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;kernel-density-estimation-plot-kde&#34;&gt;Kernel Density Estimation plot (KDE)&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2[&#39;a&#39;].plot.kde()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50190780&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_39_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.plot.density()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef47aaa908&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;../img/02/09_plotting_pandas_40_1.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! Hopefully you can see why this method of plotting will be a lot easier to use than full-on matplotlib, it balances ease of use with control over the figure. A lot of the plot calls also accept additional arguments of their parent matplotlib plt. call.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Plotly and Cufflinks</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_11_plotting_ploty/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_11_plotting_ploty/</guid>
      <description>&lt;p&gt;Plotly is a library that allows you to create interactive plots that you can use in dashboards or websites (you can save them as html files or static images).&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;In order for this all to work, you&amp;rsquo;ll need to install plotly and cufflinks to call plots directly off of a pandas dataframe. These libraries are not currently available through &lt;strong&gt;conda&lt;/strong&gt; but are available through &lt;strong&gt;pip&lt;/strong&gt;. Install the libraries at your command line/terminal using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pip install plotly
pip install cufflinks
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** NOTE: Make sure you only have one installation of Python on your computer when you do this, otherwise the installation may not work. **&lt;/p&gt;
&lt;h2 id=&#34;imports-and-set-up&#34;&gt;Imports and Set-up&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
#%matplotlib inline
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from plotly import __version__
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot

print(__version__) # requires version &amp;gt;= 1.9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;4.3.0
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cufflinks as cf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# For Notebooks
init_notebook_mode(connected=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
window.PlotlyConfig = {MathJaxConfig: &#39;local&#39;};
if (window.MathJax) {MathJax.Hub.Config({SVG: {font: &#34;STIX-Web&#34;}});}
if (typeof require !== &#39;undefined&#39;) {
require.undef(&#34;plotly&#34;);
requirejs.config({
    paths: {
        &#39;plotly&#39;: [&#39;https://cdn.plot.ly/plotly-latest.min&#39;]
    }
});
require([&#39;plotly&#39;], function(Plotly) {
    window._Plotly = Plotly;
});
}
&lt;/script&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# For offline use
cf.go_offline()
&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
window.PlotlyConfig = {MathJaxConfig: &#39;local&#39;};
if (window.MathJax) {MathJax.Hub.Config({SVG: {font: &#34;STIX-Web&#34;}});}
if (typeof require !== &#39;undefined&#39;) {
require.undef(&#34;plotly&#34;);
requirejs.config({
    paths: {
        &#39;plotly&#39;: [&#39;https://cdn.plot.ly/plotly-latest.min&#39;]
    }
});
require([&#39;plotly&#39;], function(Plotly) {
    window._Plotly = Plotly;
});
}
&lt;/script&gt;
&lt;h3 id=&#34;fake-data&#34;&gt;Fake Data&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(np.random.randn(100,4),columns=&#39;A B C D&#39;.split())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;C&lt;/th&gt;
      &lt;th&gt;D&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1.443094&lt;/td&gt;
      &lt;td&gt;1.049955&lt;/td&gt;
      &lt;td&gt;-2.171906&lt;/td&gt;
      &lt;td&gt;0.493646&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;0.215467&lt;/td&gt;
      &lt;td&gt;-0.428265&lt;/td&gt;
      &lt;td&gt;-1.846725&lt;/td&gt;
      &lt;td&gt;-0.239502&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;-0.540795&lt;/td&gt;
      &lt;td&gt;-1.273190&lt;/td&gt;
      &lt;td&gt;-0.326949&lt;/td&gt;
      &lt;td&gt;0.787827&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;-0.790861&lt;/td&gt;
      &lt;td&gt;0.408180&lt;/td&gt;
      &lt;td&gt;-1.324640&lt;/td&gt;
      &lt;td&gt;1.621891&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;-0.865603&lt;/td&gt;
      &lt;td&gt;0.911266&lt;/td&gt;
      &lt;td&gt;1.180761&lt;/td&gt;
      &lt;td&gt;0.146927&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2 = pd.DataFrame({&#39;Category&#39;:[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;],&#39;Values&#39;:[32,43,50]})
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Category&lt;/th&gt;
      &lt;th&gt;Values&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;43&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;using-cufflinks-and-iplot&#34;&gt;Using Cufflinks and iplot()&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;scatter&lt;/li&gt;
&lt;li&gt;bar&lt;/li&gt;
&lt;li&gt;box&lt;/li&gt;
&lt;li&gt;spread&lt;/li&gt;
&lt;li&gt;ratio&lt;/li&gt;
&lt;li&gt;heatmap&lt;/li&gt;
&lt;li&gt;surface&lt;/li&gt;
&lt;li&gt;histogram&lt;/li&gt;
&lt;li&gt;bubble&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scatter&#34;&gt;Scatter&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.iplot(kind=&#39;scatter&#39;,x=&#39;A&#39;,y=&#39;B&#39;,mode=&#39;markers&#39;,size=10)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;91765269-716f-4bd2-b1a9-514b53782658&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};
                window.PLOTLYENV.BASE_URL=&#39;https://plot.ly&#39;;

            if (document.getElementById(&amp;quot;91765269-716f-4bd2-b1a9-514b53782658&amp;quot;)) {
                Plotly.newPlot(
                    &#39;91765269-716f-4bd2-b1a9-514b53782658&#39;,
                    [{&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(255, 153, 51, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 10, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], &amp;quot;y&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}],
                    {&amp;quot;legend&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;xaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}},
                    {&amp;quot;showLink&amp;quot;: true, &amp;quot;linkText&amp;quot;: &amp;quot;Export to plot.ly&amp;quot;, &amp;quot;plotlyServerURL&amp;quot;: &amp;quot;https://plot.ly&amp;quot;, &amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;91765269-716f-4bd2-b1a9-514b53782658&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;bar-plots&#34;&gt;Bar Plots&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df2.iplot(kind=&#39;bar&#39;,x=&#39;Category&#39;,y=&#39;Values&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;175d443f-d88d-41c4-87cd-da4fa7be292e&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};
                window.PLOTLYENV.BASE_URL=&#39;https://plot.ly&#39;;

            if (document.getElementById(&amp;quot;175d443f-d88d-41c4-87cd-da4fa7be292e&amp;quot;)) {
                Plotly.newPlot(
                    &#39;175d443f-d88d-41c4-87cd-da4fa7be292e&#39;,
                    [{&amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(255, 153, 51, 0.6)&amp;quot;, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(255, 153, 51, 1.0)&amp;quot;, &amp;quot;width&amp;quot;: 1}}, &amp;quot;name&amp;quot;: &amp;quot;Values&amp;quot;, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;x&amp;quot;: [&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;], &amp;quot;y&amp;quot;: [32, 43, 50]}],
                    {&amp;quot;legend&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;xaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}},
                    {&amp;quot;showLink&amp;quot;: true, &amp;quot;linkText&amp;quot;: &amp;quot;Export to plot.ly&amp;quot;, &amp;quot;plotlyServerURL&amp;quot;: &amp;quot;https://plot.ly&amp;quot;, &amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;175d443f-d88d-41c4-87cd-da4fa7be292e&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.count().iplot(kind=&#39;bar&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;8387ca92-054b-42ed-bb9d-e01e412b50af&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};
                window.PLOTLYENV.BASE_URL=&#39;https://plot.ly&#39;;

            if (document.getElementById(&amp;quot;8387ca92-054b-42ed-bb9d-e01e412b50af&amp;quot;)) {
                Plotly.newPlot(
                    &#39;8387ca92-054b-42ed-bb9d-e01e412b50af&#39;,
                    [{&amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(255, 153, 51, 0.6)&amp;quot;, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(255, 153, 51, 1.0)&amp;quot;, &amp;quot;width&amp;quot;: 1}}, &amp;quot;name&amp;quot;: &amp;quot;None&amp;quot;, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;x&amp;quot;: [&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;D&amp;quot;], &amp;quot;y&amp;quot;: [100, 100, 100, 100]}],
                    {&amp;quot;legend&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;xaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}},
                    {&amp;quot;showLink&amp;quot;: true, &amp;quot;linkText&amp;quot;: &amp;quot;Export to plot.ly&amp;quot;, &amp;quot;plotlyServerURL&amp;quot;: &amp;quot;https://plot.ly&amp;quot;, &amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;8387ca92-054b-42ed-bb9d-e01e412b50af&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;boxplots&#34;&gt;Boxplots&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.iplot(kind=&#39;box&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;e678dca6-2769-43dd-bff3-09bfe70eea32&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};
                window.PLOTLYENV.BASE_URL=&#39;https://plot.ly&#39;;

            if (document.getElementById(&amp;quot;e678dca6-2769-43dd-bff3-09bfe70eea32&amp;quot;)) {
                Plotly.newPlot(
                    &#39;e678dca6-2769-43dd-bff3-09bfe70eea32&#39;,
                    [{&amp;quot;boxpoints&amp;quot;: false, &amp;quot;line&amp;quot;: {&amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(255, 153, 51, 1.0)&amp;quot;}, &amp;quot;name&amp;quot;: &amp;quot;A&amp;quot;, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;box&amp;quot;, &amp;quot;y&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}, {&amp;quot;boxpoints&amp;quot;: false, &amp;quot;line&amp;quot;: {&amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(55, 128, 191, 1.0)&amp;quot;}, &amp;quot;name&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;box&amp;quot;, &amp;quot;y&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}, {&amp;quot;boxpoints&amp;quot;: false, &amp;quot;line&amp;quot;: {&amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(50, 171, 96, 1.0)&amp;quot;}, &amp;quot;name&amp;quot;: &amp;quot;C&amp;quot;, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;box&amp;quot;, &amp;quot;y&amp;quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415]}, {&amp;quot;boxpoints&amp;quot;: false, &amp;quot;line&amp;quot;: {&amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 0, 128, 1.0)&amp;quot;}, &amp;quot;name&amp;quot;: &amp;quot;D&amp;quot;, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;box&amp;quot;, &amp;quot;y&amp;quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276]}],
                    {&amp;quot;legend&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;xaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}},
                    {&amp;quot;showLink&amp;quot;: true, &amp;quot;linkText&amp;quot;: &amp;quot;Export to plot.ly&amp;quot;, &amp;quot;plotlyServerURL&amp;quot;: &amp;quot;https://plot.ly&amp;quot;, &amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;e678dca6-2769-43dd-bff3-09bfe70eea32&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3d-surface&#34;&gt;3d Surface&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df3 = pd.DataFrame({&#39;x&#39;:[1,2,3,4,5],&#39;y&#39;:[10,20,30,20,10],&#39;z&#39;:[5,4,3,2,1]})
df3.iplot(kind=&#39;surface&#39;,colorscale=&#39;rdylbu&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;825f4807-44e8-4f6a-8fa7-319ff314df1f&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};
                window.PLOTLYENV.BASE_URL=&#39;https://plot.ly&#39;;

            if (document.getElementById(&amp;quot;825f4807-44e8-4f6a-8fa7-319ff314df1f&amp;quot;)) {
                Plotly.newPlot(
                    &#39;825f4807-44e8-4f6a-8fa7-319ff314df1f&#39;,
                    [{&amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;rgb(165,0,38)&amp;quot;], [0.1, &amp;quot;rgb(215,48,39)&amp;quot;], [0.2, &amp;quot;rgb(244,109,67)&amp;quot;], [0.3, &amp;quot;rgb(253,174,97)&amp;quot;], [0.4, &amp;quot;rgb(254,224,144)&amp;quot;], [0.5, &amp;quot;rgb(255,255,191)&amp;quot;], [0.6, &amp;quot;rgb(224,243,248)&amp;quot;], [0.7, &amp;quot;rgb(171,217,233)&amp;quot;], [0.8, &amp;quot;rgb(116,173,209)&amp;quot;], [0.9, &amp;quot;rgb(69,117,180)&amp;quot;], [1.0, &amp;quot;rgb(49,54,149)&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;, &amp;quot;x&amp;quot;: [0, 1, 2, 3, 4], &amp;quot;y&amp;quot;: [&amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;z&amp;quot;], &amp;quot;z&amp;quot;: [[1, 2, 3, 4, 5], [10, 20, 30, 20, 10], [5, 4, 3, 2, 1]]}],
                    {&amp;quot;legend&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;xaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}},
                    {&amp;quot;showLink&amp;quot;: true, &amp;quot;linkText&amp;quot;: &amp;quot;Export to plot.ly&amp;quot;, &amp;quot;plotlyServerURL&amp;quot;: &amp;quot;https://plot.ly&amp;quot;, &amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;825f4807-44e8-4f6a-8fa7-319ff314df1f&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;spread&#34;&gt;Spread&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[[&#39;A&#39;,&#39;B&#39;]].iplot(kind=&#39;spread&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;b460a593-440a-4c30-a40b-ff8d3192d37c&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};
                window.PLOTLYENV.BASE_URL=&#39;https://plot.ly&#39;;

            if (document.getElementById(&amp;quot;b460a593-440a-4c30-a40b-ff8d3192d37c&amp;quot;)) {
                Plotly.newPlot(
                    &#39;b460a593-440a-4c30-a40b-ff8d3192d37c&#39;,
                    [{&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(255, 153, 51, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;mode&amp;quot;: &amp;quot;lines&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;A&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], &amp;quot;y&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(55, 128, 191, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;mode&amp;quot;: &amp;quot;lines&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], &amp;quot;y&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}, {&amp;quot;connectgaps&amp;quot;: false, &amp;quot;fill&amp;quot;: &amp;quot;tozeroy&amp;quot;, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;green&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 0.5}, &amp;quot;mode&amp;quot;: &amp;quot;lines&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Spread&amp;quot;, &amp;quot;showlegend&amp;quot;: false, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], &amp;quot;xaxis&amp;quot;: &amp;quot;x2&amp;quot;, &amp;quot;y&amp;quot;: [0.3931386912042505, 0.6437319132483335, 0.7323953042912329, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 1.294526654721476, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 1.0786721525736995, 0.6170731779029573, &amp;quot;&amp;quot;, 0.29292175604215775, 0.35604795378709153, 1.2923424157651118, 0.5254478624112127, 0.6310257845728178, 1.7444194443759167, &amp;quot;&amp;quot;, 1.7695634909798035, 2.5802757889750674, 0.48234219241815857, 2.1006572480275008, &amp;quot;&amp;quot;, 0.5892967197262979, &amp;quot;&amp;quot;, 1.418679445414047, 2.3294766030040632, 0.9932731732445923, 3.017275821277708, 3.018402330072811, 1.7858313555698593, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 0.9410989844336906, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 1.5764143047433703, &amp;quot;&amp;quot;, 1.266410476290408, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 0.7083446272629992, &amp;quot;&amp;quot;, 0.6158454095284791, &amp;quot;&amp;quot;, 0.4044774265284812, 1.21972557380821, 1.4624002233179745, 0.8149008416149297, 0.14043517720236906, 0.38565089567423355, 2.6684177028352742, &amp;quot;&amp;quot;, 1.9310999845555457, 1.8450035069678026, 0.39430640819524687, &amp;quot;&amp;quot;, 1.0106388254361625, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 0.3348258532488357, 1.4969488921680316, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 1.213582735437038, &amp;quot;&amp;quot;, 2.8213904398970993, 1.2191454265512862, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 0.7531792251081537, 0.7238113778246976, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 1.9309564343794843, 0.6896482705922489, &amp;quot;&amp;quot;, 1.1675535214066992, 0.847788900764908, 0.7124155707715303, 1.541105780757185, 0.28239646460464696, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 1.4708365670965522, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 2.9127461208272987, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, 0.20672173490110432, &amp;quot;&amp;quot;, 1.7690209799489347, &amp;quot;&amp;quot;, 2.0368763617959917], &amp;quot;yaxis&amp;quot;: &amp;quot;y2&amp;quot;}, {&amp;quot;connectgaps&amp;quot;: false, &amp;quot;fill&amp;quot;: &amp;quot;tozeroy&amp;quot;, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;red&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 0.5}, &amp;quot;mode&amp;quot;: &amp;quot;lines&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Spread&amp;quot;, &amp;quot;showlegend&amp;quot;: false, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], &amp;quot;xaxis&amp;quot;: &amp;quot;x2&amp;quot;, &amp;quot;y&amp;quot;: [&amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -1.1990409473171195, -1.7768692464246727, -3.4502390823050164, &amp;quot;&amp;quot;, -0.1954296372371383, -1.7389915480184, -0.2668795488937492, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -1.2452112692045914, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -1.6955555018291188, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -2.0446941384039947, &amp;quot;&amp;quot;, -0.19219492282637907, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -1.3753865157177068, -0.9831080784604157, &amp;quot;&amp;quot;, -0.7528582593367015, -1.420498450207871, &amp;quot;&amp;quot;, -2.7666033892014608, &amp;quot;&amp;quot;, -2.119600140613115, -1.6568697431064001, &amp;quot;&amp;quot;, -0.950079034745388, &amp;quot;&amp;quot;, -1.2190335556135083, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -0.3191386901799315, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -1.6785244658630012, &amp;quot;&amp;quot;, -0.3518701988154955, -0.45059875656066906, -0.14133517677117113, -0.06406010862692679, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -0.9555389428921681, -1.0643385983041982, &amp;quot;&amp;quot;, -2.048561913183912, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -0.9655751773981122, -0.5706291315897459, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -2.8608504533643644, -1.4128154675011102, -0.046026082940258395, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -0.6557969275255325, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, -3.546477657596804, -1.1082611427321039, &amp;quot;&amp;quot;, -2.439274584080515, -0.31649149286051614, &amp;quot;&amp;quot;, -1.800080308176359, -2.801072295485666, &amp;quot;&amp;quot;, -2.2244718222537663, &amp;quot;&amp;quot;, -1.2009989664446898, &amp;quot;&amp;quot;], &amp;quot;yaxis&amp;quot;: &amp;quot;y2&amp;quot;}],
                    {&amp;quot;hovermode&amp;quot;: &amp;quot;x&amp;quot;, &amp;quot;legend&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;xaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis2&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y2&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;showticklabels&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;domain&amp;quot;: [0.3, 1], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis2&amp;quot;: {&amp;quot;domain&amp;quot;: [0, 0.25], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;Spread&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}},
                    {&amp;quot;showLink&amp;quot;: true, &amp;quot;linkText&amp;quot;: &amp;quot;Export to plot.ly&amp;quot;, &amp;quot;plotlyServerURL&amp;quot;: &amp;quot;https://plot.ly&amp;quot;, &amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;b460a593-440a-4c30-a40b-ff8d3192d37c&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;histogram&#34;&gt;histogram&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;A&#39;].iplot(kind=&#39;hist&#39;,bins=25)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;7df79106-41c2-4781-b52d-a26a4871422b&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};
                window.PLOTLYENV.BASE_URL=&#39;https://plot.ly&#39;;

            if (document.getElementById(&amp;quot;7df79106-41c2-4781-b52d-a26a4871422b&amp;quot;)) {
                Plotly.newPlot(
                    &#39;7df79106-41c2-4781-b52d-a26a4871422b&#39;,
                    [{&amp;quot;histfunc&amp;quot;: &amp;quot;count&amp;quot;, &amp;quot;histnorm&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(255, 153, 51, 1.0)&amp;quot;, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;, &amp;quot;width&amp;quot;: 1.3}}, &amp;quot;name&amp;quot;: &amp;quot;A&amp;quot;, &amp;quot;nbinsx&amp;quot;: 25, &amp;quot;opacity&amp;quot;: 0.8, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;, &amp;quot;x&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}],
                    {&amp;quot;barmode&amp;quot;: &amp;quot;overlay&amp;quot;, &amp;quot;legend&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;xaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}},
                    {&amp;quot;showLink&amp;quot;: true, &amp;quot;linkText&amp;quot;: &amp;quot;Export to plot.ly&amp;quot;, &amp;quot;plotlyServerURL&amp;quot;: &amp;quot;https://plot.ly&amp;quot;, &amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;7df79106-41c2-4781-b52d-a26a4871422b&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.iplot(kind=&#39;bubble&#39;,x=&#39;A&#39;,y=&#39;B&#39;,size=&#39;C&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;46c02392-e6c3-40f3-bc40-096de16f4885&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};
                window.PLOTLYENV.BASE_URL=&#39;https://plot.ly&#39;;

            if (document.getElementById(&amp;quot;46c02392-e6c3-40f3-bc40-096de16f4885&amp;quot;)) {
                Plotly.newPlot(
                    &#39;46c02392-e6c3-40f3-bc40-096de16f4885&#39;,
                    [{&amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: [&amp;quot;rgb(255, 153, 51)&amp;quot;, &amp;quot;rgb(55, 128, 191)&amp;quot;, &amp;quot;rgb(50, 171, 96)&amp;quot;, &amp;quot;rgb(128, 0, 128)&amp;quot;, &amp;quot;rgb(219, 64, 82)&amp;quot;, &amp;quot;rgb(0, 128, 128)&amp;quot;, &amp;quot;rgb(255, 255, 51)&amp;quot;, &amp;quot;rgb(128, 128, 0)&amp;quot;, &amp;quot;rgb(251, 128, 114)&amp;quot;, &amp;quot;rgb(128, 177, 211)&amp;quot;], &amp;quot;line&amp;quot;: {&amp;quot;width&amp;quot;: 1.3}, &amp;quot;size&amp;quot;: [24, 31, 59, 40, 87, 66, 58, 56, 82, 80, 62, 76, 61, 42, 42, 83, 92, 78, 49, 99, 55, 54, 49, 82, 28, 70, 49, 82, 59, 52, 44, 57, 69, 41, 78, 43, 68, 53, 59, 42, 80, 75, 53, 47, 50, 57, 45, 77, 63, 75, 36, 36, 68, 87, 83, 43, 52, 97, 46, 38, 91, 56, 96, 77, 68, 76, 74, 64, 87, 66, 59, 49, 96, 70, 71, 52, 26, 39, 72, 43, 12, 30, 53, 66, 66, 41, 62, 86, 38, 80, 79, 72, 81, 30, 68, 49, 112, 89, 54, 56], &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], &amp;quot;y&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}],
                    {&amp;quot;legend&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;xaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: true, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}},
                    {&amp;quot;showLink&amp;quot;: true, &amp;quot;linkText&amp;quot;: &amp;quot;Export to plot.ly&amp;quot;, &amp;quot;plotlyServerURL&amp;quot;: &amp;quot;https://plot.ly&amp;quot;, &amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;46c02392-e6c3-40f3-bc40-096de16f4885&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;scatter_matrix&#34;&gt;scatter_matrix()&lt;/h2&gt;
&lt;p&gt;Similar to sns.pairplot()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.scatter_matrix()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;52beb8f2-3df1-4fd0-9c94-a8d03d2d6010&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};
                window.PLOTLYENV.BASE_URL=&#39;https://plot.ly&#39;;

            if (document.getElementById(&amp;quot;52beb8f2-3df1-4fd0-9c94-a8d03d2d6010&amp;quot;)) {
                Plotly.newPlot(
                    &#39;52beb8f2-3df1-4fd0-9c94-a8d03d2d6010&#39;,
                    [{&amp;quot;histfunc&amp;quot;: &amp;quot;count&amp;quot;, &amp;quot;histnorm&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(255, 153, 51, 1.0)&amp;quot;, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;, &amp;quot;width&amp;quot;: 1.3}}, &amp;quot;name&amp;quot;: &amp;quot;A&amp;quot;, &amp;quot;nbinsx&amp;quot;: 10, &amp;quot;opacity&amp;quot;: 0.8, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;, &amp;quot;x&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], &amp;quot;xaxis&amp;quot;: &amp;quot;x&amp;quot;, &amp;quot;yaxis&amp;quot;: &amp;quot;y&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;A&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], &amp;quot;xaxis&amp;quot;: &amp;quot;x2&amp;quot;, &amp;quot;y&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], &amp;quot;yaxis&amp;quot;: &amp;quot;y2&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;A&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], &amp;quot;xaxis&amp;quot;: &amp;quot;x3&amp;quot;, &amp;quot;y&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], &amp;quot;yaxis&amp;quot;: &amp;quot;y3&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;A&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], &amp;quot;xaxis&amp;quot;: &amp;quot;x4&amp;quot;, &amp;quot;y&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], &amp;quot;yaxis&amp;quot;: &amp;quot;y4&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], &amp;quot;xaxis&amp;quot;: &amp;quot;x5&amp;quot;, &amp;quot;y&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], &amp;quot;yaxis&amp;quot;: &amp;quot;y5&amp;quot;}, {&amp;quot;histfunc&amp;quot;: &amp;quot;count&amp;quot;, &amp;quot;histnorm&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(55, 128, 191, 1.0)&amp;quot;, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;, &amp;quot;width&amp;quot;: 1.3}}, &amp;quot;name&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;nbinsx&amp;quot;: 10, &amp;quot;opacity&amp;quot;: 0.8, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;, &amp;quot;x&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], &amp;quot;xaxis&amp;quot;: &amp;quot;x6&amp;quot;, &amp;quot;yaxis&amp;quot;: &amp;quot;y6&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], &amp;quot;xaxis&amp;quot;: &amp;quot;x7&amp;quot;, &amp;quot;y&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], &amp;quot;yaxis&amp;quot;: &amp;quot;y7&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;B&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], &amp;quot;xaxis&amp;quot;: &amp;quot;x8&amp;quot;, &amp;quot;y&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], &amp;quot;yaxis&amp;quot;: &amp;quot;y8&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;C&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], &amp;quot;xaxis&amp;quot;: &amp;quot;x9&amp;quot;, &amp;quot;y&amp;quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], &amp;quot;yaxis&amp;quot;: &amp;quot;y9&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;C&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], &amp;quot;xaxis&amp;quot;: &amp;quot;x10&amp;quot;, &amp;quot;y&amp;quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], &amp;quot;yaxis&amp;quot;: &amp;quot;y10&amp;quot;}, {&amp;quot;histfunc&amp;quot;: &amp;quot;count&amp;quot;, &amp;quot;histnorm&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(50, 171, 96, 1.0)&amp;quot;, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;, &amp;quot;width&amp;quot;: 1.3}}, &amp;quot;name&amp;quot;: &amp;quot;C&amp;quot;, &amp;quot;nbinsx&amp;quot;: 10, &amp;quot;opacity&amp;quot;: 0.8, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;, &amp;quot;x&amp;quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], &amp;quot;xaxis&amp;quot;: &amp;quot;x11&amp;quot;, &amp;quot;yaxis&amp;quot;: &amp;quot;y11&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;C&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], &amp;quot;xaxis&amp;quot;: &amp;quot;x12&amp;quot;, &amp;quot;y&amp;quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], &amp;quot;yaxis&amp;quot;: &amp;quot;y12&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;D&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], &amp;quot;xaxis&amp;quot;: &amp;quot;x13&amp;quot;, &amp;quot;y&amp;quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], &amp;quot;yaxis&amp;quot;: &amp;quot;y13&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;D&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], &amp;quot;xaxis&amp;quot;: &amp;quot;x14&amp;quot;, &amp;quot;y&amp;quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], &amp;quot;yaxis&amp;quot;: &amp;quot;y14&amp;quot;}, {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 128, 128, 1.0)&amp;quot;, &amp;quot;dash&amp;quot;: &amp;quot;solid&amp;quot;, &amp;quot;shape&amp;quot;: &amp;quot;linear&amp;quot;, &amp;quot;width&amp;quot;: 1.3}, &amp;quot;marker&amp;quot;: {&amp;quot;size&amp;quot;: 2, &amp;quot;symbol&amp;quot;: &amp;quot;circle&amp;quot;}, &amp;quot;mode&amp;quot;: &amp;quot;markers&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;D&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;, &amp;quot;x&amp;quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], &amp;quot;xaxis&amp;quot;: &amp;quot;x15&amp;quot;, &amp;quot;y&amp;quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], &amp;quot;yaxis&amp;quot;: &amp;quot;y15&amp;quot;}, {&amp;quot;histfunc&amp;quot;: &amp;quot;count&amp;quot;, &amp;quot;histnorm&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;marker&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;rgba(128, 0, 128, 1.0)&amp;quot;, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;, &amp;quot;width&amp;quot;: 1.3}}, &amp;quot;name&amp;quot;: &amp;quot;D&amp;quot;, &amp;quot;nbinsx&amp;quot;: 10, &amp;quot;opacity&amp;quot;: 0.8, &amp;quot;orientation&amp;quot;: &amp;quot;v&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;, &amp;quot;x&amp;quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], &amp;quot;xaxis&amp;quot;: &amp;quot;x16&amp;quot;, &amp;quot;yaxis&amp;quot;: &amp;quot;y16&amp;quot;}],
                    {&amp;quot;bargap&amp;quot;: 0.02, &amp;quot;legend&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#F5F6F9&amp;quot;, &amp;quot;showlegend&amp;quot;: false, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}}, &amp;quot;xaxis&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y&amp;quot;, &amp;quot;domain&amp;quot;: [0.0, 0.2125], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis10&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y10&amp;quot;, &amp;quot;domain&amp;quot;: [0.2625, 0.475], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis11&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y11&amp;quot;, &amp;quot;domain&amp;quot;: [0.525, 0.7375], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis12&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y12&amp;quot;, &amp;quot;domain&amp;quot;: [0.7875, 1.0], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis13&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y13&amp;quot;, &amp;quot;domain&amp;quot;: [0.0, 0.2125], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis14&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y14&amp;quot;, &amp;quot;domain&amp;quot;: [0.2625, 0.475], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis15&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y15&amp;quot;, &amp;quot;domain&amp;quot;: [0.525, 0.7375], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis16&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y16&amp;quot;, &amp;quot;domain&amp;quot;: [0.7875, 1.0], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis2&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y2&amp;quot;, &amp;quot;domain&amp;quot;: [0.2625, 0.475], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis3&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y3&amp;quot;, &amp;quot;domain&amp;quot;: [0.525, 0.7375], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis4&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y4&amp;quot;, &amp;quot;domain&amp;quot;: [0.7875, 1.0], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis5&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y5&amp;quot;, &amp;quot;domain&amp;quot;: [0.0, 0.2125], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis6&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y6&amp;quot;, &amp;quot;domain&amp;quot;: [0.2625, 0.475], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis7&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y7&amp;quot;, &amp;quot;domain&amp;quot;: [0.525, 0.7375], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis8&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y8&amp;quot;, &amp;quot;domain&amp;quot;: [0.7875, 1.0], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;xaxis9&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;y9&amp;quot;, &amp;quot;domain&amp;quot;: [0.0, 0.2125], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x&amp;quot;, &amp;quot;domain&amp;quot;: [0.8025, 1.0], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis10&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x10&amp;quot;, &amp;quot;domain&amp;quot;: [0.2675, 0.465], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis11&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x11&amp;quot;, &amp;quot;domain&amp;quot;: [0.2675, 0.465], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis12&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x12&amp;quot;, &amp;quot;domain&amp;quot;: [0.2675, 0.465], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis13&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x13&amp;quot;, &amp;quot;domain&amp;quot;: [0.0, 0.1975], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis14&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x14&amp;quot;, &amp;quot;domain&amp;quot;: [0.0, 0.1975], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis15&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x15&amp;quot;, &amp;quot;domain&amp;quot;: [0.0, 0.1975], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis16&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x16&amp;quot;, &amp;quot;domain&amp;quot;: [0.0, 0.1975], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis2&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x2&amp;quot;, &amp;quot;domain&amp;quot;: [0.8025, 1.0], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis3&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x3&amp;quot;, &amp;quot;domain&amp;quot;: [0.8025, 1.0], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis4&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x4&amp;quot;, &amp;quot;domain&amp;quot;: [0.8025, 1.0], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis5&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x5&amp;quot;, &amp;quot;domain&amp;quot;: [0.535, 0.7325], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis6&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x6&amp;quot;, &amp;quot;domain&amp;quot;: [0.535, 0.7325], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis7&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x7&amp;quot;, &amp;quot;domain&amp;quot;: [0.535, 0.7325], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis8&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x8&amp;quot;, &amp;quot;domain&amp;quot;: [0.535, 0.7325], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}, &amp;quot;yaxis9&amp;quot;: {&amp;quot;anchor&amp;quot;: &amp;quot;x9&amp;quot;, &amp;quot;domain&amp;quot;: [0.2675, 0.465], &amp;quot;gridcolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;, &amp;quot;showgrid&amp;quot;: false, &amp;quot;tickfont&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;title&amp;quot;: {&amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#4D5663&amp;quot;}, &amp;quot;text&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;#E1E5ED&amp;quot;}},
                    {&amp;quot;showLink&amp;quot;: true, &amp;quot;linkText&amp;quot;: &amp;quot;Export to plot.ly&amp;quot;, &amp;quot;plotlyServerURL&amp;quot;: &amp;quot;https://plot.ly&amp;quot;, &amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;52beb8f2-3df1-4fd0-9c94-a8d03d2d6010&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Choropleth Maps</title>
      <link>https://greydongilmore.github.io/courses/ml_intro/02_12_plotting_choropleth/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0100</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/02_12_plotting_choropleth/</guid>
      <description>&lt;h2 id=&#34;offline-plotly-usage&#34;&gt;Offline Plotly Usage&lt;/h2&gt;
&lt;p&gt;Get imports and set everything up to be working offline.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import chart_studio.plotly as py
import plotly.graph_objs as go 
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now set up everything so that the figures show up in the notebook:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;init_notebook_mode(connected=True) 
&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&#34;text/javascript&#34;&gt;
window.PlotlyConfig = {MathJaxConfig: &#39;local&#39;};
if (window.MathJax) {MathJax.Hub.Config({SVG: {font: &#34;STIX-Web&#34;}});}
if (typeof require !== &#39;undefined&#39;) {
require.undef(&#34;plotly&#34;);
requirejs.config({
    paths: {
        &#39;plotly&#39;: [&#39;https://cdn.plot.ly/plotly-latest.min&#39;]
    }
});
require([&#39;plotly&#39;], function(Plotly) {
    window._Plotly = Plotly;
});
}
&lt;/script&gt;
&lt;p&gt;More info on other options for Offline Plotly usage can be found &lt;a href=&#34;https://plot.ly/python/offline/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;choropleth-us-maps&#34;&gt;Choropleth US Maps&lt;/h2&gt;
&lt;p&gt;Plotly&amp;rsquo;s mapping can be a bit hard to get used to at first, remember to reference the cheat sheet in the data visualization folder, or &lt;a href=&#34;https://images.plot.ly/plotly-documentation/images/python_cheat_sheet.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;find it online here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to begin to build our data dictionary. Easiest way to do this is to use the &lt;strong&gt;dict()&lt;/strong&gt; function of the general form:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type = &amp;lsquo;choropleth&amp;rsquo;,&lt;/li&gt;
&lt;li&gt;locations = list of states&lt;/li&gt;
&lt;li&gt;locationmode = &amp;lsquo;USA-states&amp;rsquo;&lt;/li&gt;
&lt;li&gt;colorscale=&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Either a predefined string:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39;pairs&#39; | &#39;Greys&#39; | &#39;Greens&#39; | &#39;Bluered&#39; | &#39;Hot&#39; | &#39;Picnic&#39; | &#39;Portland&#39; | &#39;Jet&#39; | &#39;RdBu&#39; | &#39;Blackbody&#39; | &#39;Earth&#39; | &#39;Electric&#39; | &#39;YIOrRd&#39; | &#39;YIGnBu&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or create a &lt;a href=&#34;https://plot.ly/python/heatmap-and-contour-colorscales/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom colorscale&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text= list or array of text to display per point&lt;/li&gt;
&lt;li&gt;z= array of values on z axis (color of state)&lt;/li&gt;
&lt;li&gt;colorbar = {&amp;lsquo;title&amp;rsquo;:&amp;lsquo;Colorbar Title&amp;rsquo;})&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a simple example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = dict(type = &#39;choropleth&#39;,
            locations = [&#39;AZ&#39;,&#39;CA&#39;,&#39;NY&#39;],
            locationmode = &#39;USA-states&#39;,
            colorscale= &#39;Portland&#39;,
            text= [&#39;text1&#39;,&#39;text2&#39;,&#39;text3&#39;],
            z=[1.0,2.0,3.0],
            colorbar = {&#39;title&#39;:&#39;Colorbar Title&#39;})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we create the layout nested dictionary:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;layout = dict(geo = {&#39;scope&#39;:&#39;usa&#39;})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go.Figure(data = [data],layout = layout)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to set up the object that finally gets passed into iplot()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;choromap = go.Figure(data = [data],layout = layout)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iplot(choromap)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;pre&gt;&lt;code&gt;        &amp;lt;div id=&amp;quot;0ffd83f2-2d09-4b5b-a347-b966e925bea9&amp;quot; class=&amp;quot;plotly-graph-div&amp;quot; style=&amp;quot;height:525px; width:100%;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
            require([&amp;quot;plotly&amp;quot;], function(Plotly) {
                window.PLOTLYENV=window.PLOTLYENV || {};

            if (document.getElementById(&amp;quot;0ffd83f2-2d09-4b5b-a347-b966e925bea9&amp;quot;)) {
                Plotly.newPlot(
                    &#39;0ffd83f2-2d09-4b5b-a347-b966e925bea9&#39;,
                    [{&amp;quot;colorbar&amp;quot;: {&amp;quot;title&amp;quot;: {&amp;quot;text&amp;quot;: &amp;quot;Colorbar Title&amp;quot;}}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;rgb(12,51,131)&amp;quot;], [0.25, &amp;quot;rgb(10,136,186)&amp;quot;], [0.5, &amp;quot;rgb(242,211,56)&amp;quot;], [0.75, &amp;quot;rgb(242,143,56)&amp;quot;], [1.0, &amp;quot;rgb(217,30,30)&amp;quot;]], &amp;quot;locationmode&amp;quot;: &amp;quot;USA-states&amp;quot;, &amp;quot;locations&amp;quot;: [&amp;quot;AZ&amp;quot;, &amp;quot;CA&amp;quot;, &amp;quot;NY&amp;quot;], &amp;quot;text&amp;quot;: [&amp;quot;text1&amp;quot;, &amp;quot;text2&amp;quot;, &amp;quot;text3&amp;quot;], &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;, &amp;quot;z&amp;quot;: [1.0, 2.0, 3.0]}],
                    {&amp;quot;geo&amp;quot;: {&amp;quot;scope&amp;quot;: &amp;quot;usa&amp;quot;}, &amp;quot;template&amp;quot;: {&amp;quot;data&amp;quot;: {&amp;quot;bar&amp;quot;: [{&amp;quot;error_x&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;error_y&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;bar&amp;quot;}], &amp;quot;barpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;width&amp;quot;: 0.5}}, &amp;quot;type&amp;quot;: &amp;quot;barpolar&amp;quot;}], &amp;quot;carpet&amp;quot;: [{&amp;quot;aaxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;endlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;minorgridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;startlinecolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;carpet&amp;quot;}], &amp;quot;choropleth&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;choropleth&amp;quot;}], &amp;quot;contour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;contour&amp;quot;}], &amp;quot;contourcarpet&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;contourcarpet&amp;quot;}], &amp;quot;heatmap&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmap&amp;quot;}], &amp;quot;heatmapgl&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;heatmapgl&amp;quot;}], &amp;quot;histogram&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;histogram&amp;quot;}], &amp;quot;histogram2d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2d&amp;quot;}], &amp;quot;histogram2dcontour&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;histogram2dcontour&amp;quot;}], &amp;quot;mesh3d&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;type&amp;quot;: &amp;quot;mesh3d&amp;quot;}], &amp;quot;parcoords&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;parcoords&amp;quot;}], &amp;quot;pie&amp;quot;: [{&amp;quot;automargin&amp;quot;: true, &amp;quot;type&amp;quot;: &amp;quot;pie&amp;quot;}], &amp;quot;scatter&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter&amp;quot;}], &amp;quot;scatter3d&amp;quot;: [{&amp;quot;line&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatter3d&amp;quot;}], &amp;quot;scattercarpet&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattercarpet&amp;quot;}], &amp;quot;scattergeo&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergeo&amp;quot;}], &amp;quot;scattergl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattergl&amp;quot;}], &amp;quot;scattermapbox&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scattermapbox&amp;quot;}], &amp;quot;scatterpolar&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolar&amp;quot;}], &amp;quot;scatterpolargl&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterpolargl&amp;quot;}], &amp;quot;scatterternary&amp;quot;: [{&amp;quot;marker&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;scatterternary&amp;quot;}], &amp;quot;surface&amp;quot;: [{&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;colorscale&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;type&amp;quot;: &amp;quot;surface&amp;quot;}], &amp;quot;table&amp;quot;: [{&amp;quot;cells&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#EBF0F8&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;header&amp;quot;: {&amp;quot;fill&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#C8D4E3&amp;quot;}, &amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;type&amp;quot;: &amp;quot;table&amp;quot;}]}, &amp;quot;layout&amp;quot;: {&amp;quot;annotationdefaults&amp;quot;: {&amp;quot;arrowcolor&amp;quot;: &amp;quot;#2a3f5f&amp;quot;, &amp;quot;arrowhead&amp;quot;: 0, &amp;quot;arrowwidth&amp;quot;: 1}, &amp;quot;coloraxis&amp;quot;: {&amp;quot;colorbar&amp;quot;: {&amp;quot;outlinewidth&amp;quot;: 0, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;colorscale&amp;quot;: {&amp;quot;diverging&amp;quot;: [[0, &amp;quot;#8e0152&amp;quot;], [0.1, &amp;quot;#c51b7d&amp;quot;], [0.2, &amp;quot;#de77ae&amp;quot;], [0.3, &amp;quot;#f1b6da&amp;quot;], [0.4, &amp;quot;#fde0ef&amp;quot;], [0.5, &amp;quot;#f7f7f7&amp;quot;], [0.6, &amp;quot;#e6f5d0&amp;quot;], [0.7, &amp;quot;#b8e186&amp;quot;], [0.8, &amp;quot;#7fbc41&amp;quot;], [0.9, &amp;quot;#4d9221&amp;quot;], [1, &amp;quot;#276419&amp;quot;]], &amp;quot;sequential&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]], &amp;quot;sequentialminus&amp;quot;: [[0.0, &amp;quot;#0d0887&amp;quot;], [0.1111111111111111, &amp;quot;#46039f&amp;quot;], [0.2222222222222222, &amp;quot;#7201a8&amp;quot;], [0.3333333333333333, &amp;quot;#9c179e&amp;quot;], [0.4444444444444444, &amp;quot;#bd3786&amp;quot;], [0.5555555555555556, &amp;quot;#d8576b&amp;quot;], [0.6666666666666666, &amp;quot;#ed7953&amp;quot;], [0.7777777777777778, &amp;quot;#fb9f3a&amp;quot;], [0.8888888888888888, &amp;quot;#fdca26&amp;quot;], [1.0, &amp;quot;#f0f921&amp;quot;]]}, &amp;quot;colorway&amp;quot;: [&amp;quot;#636efa&amp;quot;, &amp;quot;#EF553B&amp;quot;, &amp;quot;#00cc96&amp;quot;, &amp;quot;#ab63fa&amp;quot;, &amp;quot;#FFA15A&amp;quot;, &amp;quot;#19d3f3&amp;quot;, &amp;quot;#FF6692&amp;quot;, &amp;quot;#B6E880&amp;quot;, &amp;quot;#FF97FF&amp;quot;, &amp;quot;#FECB52&amp;quot;], &amp;quot;font&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}, &amp;quot;geo&amp;quot;: {&amp;quot;bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;lakecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;landcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;showlakes&amp;quot;: true, &amp;quot;showland&amp;quot;: true, &amp;quot;subunitcolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;hoverlabel&amp;quot;: {&amp;quot;align&amp;quot;: &amp;quot;left&amp;quot;}, &amp;quot;hovermode&amp;quot;: &amp;quot;closest&amp;quot;, &amp;quot;mapbox&amp;quot;: {&amp;quot;style&amp;quot;: &amp;quot;light&amp;quot;}, &amp;quot;paper_bgcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;plot_bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;polar&amp;quot;: {&amp;quot;angularaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;radialaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;scene&amp;quot;: {&amp;quot;xaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;yaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}, &amp;quot;zaxis&amp;quot;: {&amp;quot;backgroundcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;gridwidth&amp;quot;: 2, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;showbackground&amp;quot;: true, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;}}, &amp;quot;shapedefaults&amp;quot;: {&amp;quot;line&amp;quot;: {&amp;quot;color&amp;quot;: &amp;quot;#2a3f5f&amp;quot;}}, &amp;quot;ternary&amp;quot;: {&amp;quot;aaxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;baxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}, &amp;quot;bgcolor&amp;quot;: &amp;quot;#E5ECF6&amp;quot;, &amp;quot;caxis&amp;quot;: {&amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;}}, &amp;quot;title&amp;quot;: {&amp;quot;x&amp;quot;: 0.05}, &amp;quot;xaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}, &amp;quot;yaxis&amp;quot;: {&amp;quot;automargin&amp;quot;: true, &amp;quot;gridcolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;linecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;ticks&amp;quot;: &amp;quot;&amp;quot;, &amp;quot;title&amp;quot;: {&amp;quot;standoff&amp;quot;: 15}, &amp;quot;zerolinecolor&amp;quot;: &amp;quot;white&amp;quot;, &amp;quot;zerolinewidth&amp;quot;: 2}}}},
                    {&amp;quot;responsive&amp;quot;: true}
                ).then(function(){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;var gd = document.getElementById(&amp;lsquo;0ffd83f2-2d09-4b5b-a347-b966e925bea9&amp;rsquo;);
var x = new MutationObserver(function (mutations, observer) {{
var display = window.getComputedStyle(gd).display;
if (!display || display === &amp;lsquo;none&amp;rsquo;) {{
console.log([gd, &amp;lsquo;removed!&#39;]);
Plotly.purge(gd);
observer.disconnect();
}}
}});&lt;/p&gt;
&lt;p&gt;// Listen for the removal of the full notebook cells
var notebookContainer = gd.closest(&#39;#notebook-container&amp;rsquo;);
if (notebookContainer) {{
x.observe(notebookContainer, {childList: true});
}}&lt;/p&gt;
&lt;p&gt;// Listen for the clearing of the current output cell
var outputEl = gd.closest(&#39;.output&#39;);
if (outputEl) {{
x.observe(outputEl, {childList: true});
}}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                    })
            };
            });
        &amp;lt;/script&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;real-data-us-map-choropleth&#34;&gt;Real Data US Map Choropleth&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s show an example with some real data as well as some other options we can add to the dictionaries in data and layout.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;2011_US_AGRI_Exports&#39;)
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;code&lt;/th&gt;
      &lt;th&gt;state&lt;/th&gt;
      &lt;th&gt;category&lt;/th&gt;
      &lt;th&gt;total exports&lt;/th&gt;
      &lt;th&gt;beef&lt;/th&gt;
      &lt;th&gt;pork&lt;/th&gt;
      &lt;th&gt;poultry&lt;/th&gt;
      &lt;th&gt;dairy&lt;/th&gt;
      &lt;th&gt;fruits fresh&lt;/th&gt;
      &lt;th&gt;fruits proc&lt;/th&gt;
      &lt;th&gt;total fruits&lt;/th&gt;
      &lt;th&gt;veggies fresh&lt;/th&gt;
      &lt;th&gt;veggies proc&lt;/th&gt;
      &lt;th&gt;total veggies&lt;/th&gt;
      &lt;th&gt;corn&lt;/th&gt;
      &lt;th&gt;wheat&lt;/th&gt;
      &lt;th&gt;cotton&lt;/th&gt;
      &lt;th&gt;text&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;AL&lt;/td&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;state&lt;/td&gt;
      &lt;td&gt;1390.63&lt;/td&gt;
      &lt;td&gt;34.4&lt;/td&gt;
      &lt;td&gt;10.6&lt;/td&gt;
      &lt;td&gt;481.0&lt;/td&gt;
      &lt;td&gt;4.06&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;17.1&lt;/td&gt;
      &lt;td&gt;25.11&lt;/td&gt;
      &lt;td&gt;5.5&lt;/td&gt;
      &lt;td&gt;8.9&lt;/td&gt;
      &lt;td&gt;14.33&lt;/td&gt;
      &lt;td&gt;34.9&lt;/td&gt;
      &lt;td&gt;70.0&lt;/td&gt;
      &lt;td&gt;317.61&lt;/td&gt;
      &lt;td&gt;Alabama&amp;lt;br&amp;gt;Beef 34.4 Dairy 4.06&amp;lt;br&amp;gt;Fruits 25.1...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;AK&lt;/td&gt;
      &lt;td&gt;Alaska&lt;/td&gt;
      &lt;td&gt;state&lt;/td&gt;
      &lt;td&gt;13.31&lt;/td&gt;
      &lt;td&gt;0.2&lt;/td&gt;
      &lt;td&gt;0.1&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.19&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;0.6&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.56&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;0.00&lt;/td&gt;
      &lt;td&gt;Alaska&amp;lt;br&amp;gt;Beef 0.2 Dairy 0.19&amp;lt;br&amp;gt;Fruits 0.0 Ve...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;AZ&lt;/td&gt;
      &lt;td&gt;Arizona&lt;/td&gt;
      &lt;td&gt;state&lt;/td&gt;
      &lt;td&gt;1463.17&lt;/td&gt;
      &lt;td&gt;71.3&lt;/td&gt;
      &lt;td&gt;17.9&lt;/td&gt;
      &lt;td&gt;0.0&lt;/td&gt;
      &lt;td&gt;105.48&lt;/td&gt;
      &lt;td&gt;19.3&lt;/td&gt;
      &lt;td&gt;41.0&lt;/td&gt;
      &lt;td&gt;60.27&lt;/td&gt;
      &lt;td&gt;147.5&lt;/td&gt;
      &lt;td&gt;239.4&lt;/td&gt;
      &lt;td&gt;386.91&lt;/td&gt;
      &lt;td&gt;7.3&lt;/td&gt;
      &lt;td&gt;48.7&lt;/td&gt;
      &lt;td&gt;423.95&lt;/td&gt;
      &lt;td&gt;Arizona&amp;lt;br&amp;gt;Beef 71.3 Dairy 105.48&amp;lt;br&amp;gt;Fruits 60...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;AR&lt;/td&gt;
      &lt;td&gt;Arkansas&lt;/td&gt;
      &lt;td&gt;state&lt;/td&gt;
      &lt;td&gt;3586.02&lt;/td&gt;
      &lt;td&gt;53.2&lt;/td&gt;
      &lt;td&gt;29.4&lt;/td&gt;
      &lt;td&gt;562.9&lt;/td&gt;
      &lt;td&gt;3.53&lt;/td&gt;
      &lt;td&gt;2.2&lt;/td&gt;
      &lt;td&gt;4.7&lt;/td&gt;
      &lt;td&gt;6.88&lt;/td&gt;
      &lt;td&gt;4.4&lt;/td&gt;
      &lt;td&gt;7.1&lt;/td&gt;
      &lt;td&gt;11.45&lt;/td&gt;
      &lt;td&gt;69.5&lt;/td&gt;
      &lt;td&gt;114.5&lt;/td&gt;
      &lt;td&gt;665.44&lt;/td&gt;
      &lt;td&gt;Arkansas&amp;lt;br&amp;gt;Beef 53.2 Dairy 3.53&amp;lt;br&amp;gt;Fruits 6.8...&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;CA&lt;/td&gt;
      &lt;td&gt;California&lt;/td&gt;
      &lt;td&gt;state&lt;/td&gt;
      &lt;td&gt;16472.88&lt;/td&gt;
      &lt;td&gt;228.7&lt;/td&gt;
      &lt;td&gt;11.1&lt;/td&gt;
      &lt;td&gt;225.4&lt;/td&gt;
      &lt;td&gt;929.95&lt;/td&gt;
      &lt;td&gt;2791.8&lt;/td&gt;
      &lt;td&gt;5944.6&lt;/td&gt;
      &lt;td&gt;8736.40&lt;/td&gt;
      &lt;td&gt;803.2&lt;/td&gt;
      &lt;td&gt;1303.5&lt;/td&gt;
      &lt;td&gt;2106.79&lt;/td&gt;
      &lt;td&gt;34.6&lt;/td&gt;
      &lt;td&gt;249.3&lt;/td&gt;
      &lt;td&gt;1064.95&lt;/td&gt;
      &lt;td&gt;California&amp;lt;br&amp;gt;Beef 228.7 Dairy 929.95&amp;lt;br&amp;gt;Frui...&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Now out data dictionary with some extra marker and colorbar arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = dict(type=&#39;choropleth&#39;,
            colorscale = &#39;YIOrRd&#39;,
            locations = df[&#39;code&#39;],
            z = df[&#39;total exports&#39;],
            locationmode = &#39;USA-states&#39;,
            text = df[&#39;text&#39;],
            marker = dict(line = dict(color = &#39;rgb(255,255,255)&#39;,width = 2)),
            colorbar = {&#39;title&#39;:&amp;quot;Millions USD&amp;quot;}
            ) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And our layout dictionary with some more arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;layout = dict(title = &#39;2011 US Agriculture Exports by State&#39;,
              geo = dict(scope=&#39;usa&#39;,
                         showlakes = True,
                         lakecolor = &#39;rgb(85,173,240)&#39;)
             )
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;choromap = go.Figure(data = [data],layout = layout)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-15-243104ae4228&amp;gt; in &amp;lt;module&amp;gt;
----&amp;gt; 1 choromap = go.Figure(data = [data],layout = layout)


~/.local/lib/python3.6/site-packages/plotly/graph_objs/_figure.py in __init__(self, data, layout, frames, skip_invalid, **kwargs)
    606             is invalid AND skip_invalid is False
    607         &amp;quot;&amp;quot;&amp;quot;
--&amp;gt; 608         super(Figure, self).__init__(data, layout, frames, skip_invalid, **kwargs)
    609 
    610     def add_area(


~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in __init__(self, data, layout_plotly, frames, skip_invalid, **kwargs)
    155 
    156         # ### Import traces ###
--&amp;gt; 157         data = self._data_validator.validate_coerce(data, skip_invalid=skip_invalid)
    158 
    159         # ### Save tuple of trace objects ###


~/.local/lib/python3.6/site-packages/_plotly_utils/basevalidators.py in validate_coerce(self, v, skip_invalid)
   2643                     else:
   2644                         trace = self.class_map[trace_type](
-&amp;gt; 2645                             skip_invalid=skip_invalid, **v_copy
   2646                         )
   2647                         res.append(trace)


~/.local/lib/python3.6/site-packages/plotly/graph_objs/__init__.py in __init__(self, arg, autocolorscale, coloraxis, colorbar, colorscale, customdata, customdatasrc, geo, hoverinfo, hoverinfosrc, hoverlabel, hovertemplate, hovertemplatesrc, hovertext, hovertextsrc, ids, idssrc, locationmode, locations, locationssrc, marker, meta, metasrc, name, reversescale, selected, selectedpoints, showscale, stream, text, textsrc, uid, uirevision, unselected, visible, z, zauto, zmax, zmid, zmin, zsrc, **kwargs)
  81395         self[&amp;quot;colorbar&amp;quot;] = colorbar if colorbar is not None else _v
  81396         _v = arg.pop(&amp;quot;colorscale&amp;quot;, None)
&amp;gt; 81397         self[&amp;quot;colorscale&amp;quot;] = colorscale if colorscale is not None else _v
  81398         _v = arg.pop(&amp;quot;customdata&amp;quot;, None)
  81399         self[&amp;quot;customdata&amp;quot;] = customdata if customdata is not None else _v


~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in __setitem__(self, prop, value)
   3477             # ### Handle simple property ###
   3478             else:
-&amp;gt; 3479                 self._set_prop(prop, value)
   3480 
   3481         # Handle non-scalar case


~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in _set_prop(self, prop, val)
   3764                 return
   3765             else:
-&amp;gt; 3766                 raise err
   3767 
   3768         # val is None


~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in _set_prop(self, prop, val)
   3759         validator = self._validators.get(prop)
   3760         try:
-&amp;gt; 3761             val = validator.validate_coerce(val)
   3762         except ValueError as err:
   3763             if self._skip_invalid:


~/.local/lib/python3.6/site-packages/_plotly_utils/basevalidators.py in validate_coerce(self, v)
   1619 
   1620         if not v_valid:
-&amp;gt; 1621             self.raise_invalid_val(v)
   1622 
   1623         return v


~/.local/lib/python3.6/site-packages/_plotly_utils/basevalidators.py in raise_invalid_val(self, v, inds)
    281                 typ=type_str(v),
    282                 v=repr(v),
--&amp;gt; 283                 valid_clr_desc=self.description(),
    284             )
    285         )


ValueError: 
    Invalid value of type &#39;builtins.str&#39; received for the &#39;colorscale&#39; property of choropleth
        Received value: &#39;YIOrRd&#39;

    The &#39;colorscale&#39; property is a colorscale and may be
    specified as:
      - A list of colors that will be spaced evenly to create the colorscale.
        Many predefined colorscale lists are included in the sequential, diverging,
        and cyclical modules in the plotly.colors package.
      - A list of 2-element lists where the first element is the
        normalized color level value (starting at 0 and ending at 1), 
        and the second item is a valid color string.
        (e.g. [[0, &#39;green&#39;], [0.5, &#39;red&#39;], [1.0, &#39;rgb(0, 0, 255)&#39;]])
      - One of the following named colorscales:
            [&#39;aggrnyl&#39;, &#39;agsunset&#39;, &#39;algae&#39;, &#39;amp&#39;, &#39;armyrose&#39;, &#39;balance&#39;,
             &#39;blackbody&#39;, &#39;bluered&#39;, &#39;blues&#39;, &#39;blugrn&#39;, &#39;bluyl&#39;, &#39;brbg&#39;,
             &#39;brwnyl&#39;, &#39;bugn&#39;, &#39;bupu&#39;, &#39;burg&#39;, &#39;burgyl&#39;, &#39;cividis&#39;, &#39;curl&#39;,
             &#39;darkmint&#39;, &#39;deep&#39;, &#39;delta&#39;, &#39;dense&#39;, &#39;earth&#39;, &#39;edge&#39;, &#39;electric&#39;,
             &#39;emrld&#39;, &#39;fall&#39;, &#39;geyser&#39;, &#39;gnbu&#39;, &#39;gray&#39;, &#39;greens&#39;, &#39;greys&#39;,
             &#39;haline&#39;, &#39;hot&#39;, &#39;hsv&#39;, &#39;ice&#39;, &#39;icefire&#39;, &#39;inferno&#39;, &#39;jet&#39;,
             &#39;magenta&#39;, &#39;magma&#39;, &#39;matter&#39;, &#39;mint&#39;, &#39;mrybm&#39;, &#39;mygbm&#39;, &#39;oranges&#39;,
             &#39;orrd&#39;, &#39;oryel&#39;, &#39;peach&#39;, &#39;phase&#39;, &#39;picnic&#39;, &#39;pinkyl&#39;, &#39;piyg&#39;,
             &#39;plasma&#39;, &#39;plotly3&#39;, &#39;portland&#39;, &#39;prgn&#39;, &#39;pubu&#39;, &#39;pubugn&#39;, &#39;puor&#39;,
             &#39;purd&#39;, &#39;purp&#39;, &#39;purples&#39;, &#39;purpor&#39;, &#39;rainbow&#39;, &#39;rdbu&#39;, &#39;rdgy&#39;,
             &#39;rdpu&#39;, &#39;rdylbu&#39;, &#39;rdylgn&#39;, &#39;redor&#39;, &#39;reds&#39;, &#39;solar&#39;, &#39;spectral&#39;,
             &#39;speed&#39;, &#39;sunset&#39;, &#39;sunsetdark&#39;, &#39;teal&#39;, &#39;tealgrn&#39;, &#39;tealrose&#39;,
             &#39;tempo&#39;, &#39;temps&#39;, &#39;thermal&#39;, &#39;tropic&#39;, &#39;turbid&#39;, &#39;twilight&#39;,
             &#39;viridis&#39;, &#39;ylgn&#39;, &#39;ylgnbu&#39;, &#39;ylorbr&#39;, &#39;ylorrd&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;iplot(choromap)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;world-choropleth-map&#34;&gt;World Choropleth Map&lt;/h1&gt;
&lt;p&gt;Now let&amp;rsquo;s see an example with a World Map:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&#39;2014_World_GDP&#39;)
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;data = dict(
        type = &#39;choropleth&#39;,
        locations = df[&#39;CODE&#39;],
        z = df[&#39;GDP (BILLIONS)&#39;],
        text = df[&#39;COUNTRY&#39;],
        colorbar = {&#39;title&#39; : &#39;GDP Billions US&#39;},
      ) 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;layout = dict(
    title = &#39;2014 Global GDP&#39;,
    geo = dict(
        showframe = False,
        projection = {&#39;type&#39;:&#39;Mercator&#39;}
    )
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;choromap = go.Figure(data = [data],layout = layout)
iplot(choromap)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Example Talk</title>
      <link>https://greydongilmore.github.io/talk/example-talk/</link>
      <pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/talk/example-talk/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click on the &lt;strong&gt;Slides&lt;/strong&gt; button above to view the built-in slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Slides can be added in a few ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create&lt;/strong&gt; slides using Wowchemy&amp;rsquo;s &lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Slides&lt;/em&gt;&lt;/a&gt; feature and link using &lt;code&gt;slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upload&lt;/strong&gt; an existing slide deck to &lt;code&gt;static/&lt;/code&gt; and link using &lt;code&gt;url_slides&lt;/code&gt; parameter in the front matter of the talk file&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embed&lt;/strong&gt; your slides (e.g. Google Slides) or presentation video on this page using &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcodes&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further event details, including &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;page elements&lt;/a&gt; such as image galleries, can be added to the body of this page.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The impact of localization and registration accuracy on estimates of deep brain stimulation electrode position in stereotactic space</title>
      <link>https://greydongilmore.github.io/publication/2025_abbass_loc_impact/</link>
      <pubDate>Fri, 18 Apr 2025 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2025_abbass_loc_impact/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mapping the topographic organization of the human zona incerta using diffusion MRI</title>
      <link>https://greydongilmore.github.io/publication/2025_haast_mapping_zi/</link>
      <pubDate>Mon, 03 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2025_haast_mapping_zi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Radiofrequency-thermocoagulation in pediatric epilepsy surgery: a systematic review and pooled analysis of cases</title>
      <link>https://greydongilmore.github.io/publication/2025_bottan_thermocoag/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2025_bottan_thermocoag/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Disrupting the epileptogenic network with stereoelectroencephalography-guided radiofrequency thermocoagulation</title>
      <link>https://greydongilmore.github.io/publication/2024_kreinter_disrupt_rf/</link>
      <pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2024_kreinter_disrupt_rf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MRI-degad: toward accurate conversion of gadolinium-enhanced T1w MRIs to non-contrast-enhanced scans using CNNs</title>
      <link>https://greydongilmore.github.io/publication/2024_ogunsanya_degad/</link>
      <pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2024_ogunsanya_degad/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Statistical segmentation model for accurate electrode positioning in Parkinson&#39;s deep brain stimulation based on clinical low-resolution image data and electrophysiology</title>
      <link>https://greydongilmore.github.io/publication/2024_varga_statistic_seg/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2024_varga_statistic_seg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Lack of spontaneous typical seizures during intracranial monitoring with stereo-electroencephalography</title>
      <link>https://greydongilmore.github.io/publication/2023_bottan_spontaneous/</link>
      <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2023_bottan_spontaneous/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A population-averaged structural connectomic brain atlas dataset from 422 HCP-aging subjects</title>
      <link>https://greydongilmore.github.io/publication/2023_xiao_pop_average/</link>
      <pubDate>Sun, 01 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2023_xiao_pop_average/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Magnetic resonance imaging datasets with anatomical fiducials for quality control and registration</title>
      <link>https://greydongilmore.github.io/publication/2023_taha/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2023_taha/</guid>
      <description></description>
    </item>
    
    <item>
      <title>An Indirect Deep Brain Stimulation Targeting Tool Using Salient Anatomical Fiducials</title>
      <link>https://greydongilmore.github.io/publication/2022_taha_indirect_dbs/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2022_taha_indirect_dbs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Waveform detection by deep learning reveals multi-area spindles that are selectively modulated by memory load</title>
      <link>https://greydongilmore.github.io/publication/2022_mofrad_wavform/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2022_mofrad_wavform/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Optimizing the selection of Parkinsonâs disease patients for neuromodulation using the levodopa challenge test</title>
      <link>https://greydongilmore.github.io/publication/2022_kulshreshtha_levodopa/</link>
      <pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2022_kulshreshtha_levodopa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Application of the anatomical fiducials framework to a clinical dataset of patients with Parkinsonâs disease</title>
      <link>https://greydongilmore.github.io/publication/2022_abbass_afids/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2022_abbass_afids/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Making PDFs Searchable</title>
      <link>https://greydongilmore.github.io/post/ocr-papers/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/ocr-papers/</guid>
      <description>&lt;p&gt;I make use of the advanced search feature in &lt;a href=&#34;https://www.zotero.org/&#34; target=&#34;_blank&#34;&gt;Zotereo&lt;/a&gt; frequently, which enables searching through manuscript PDFs. However, when you obtain manuscript PDF files from online databases, they may not be in a searchable format. This means you are unable to highlight and search for text within the PDF. I have written a small Python function that will recursively search though a directory and convert any found PDF to a searchable format.&lt;/p&gt;
&lt;p&gt;Optical Character Recognition (OCR) is a method to enable text recognition within images and documents. PDFs contain vector graphics that can contain raster objects (.png, .jpg etc.). The OCR process will first rasterize each page of the PDF file then an OCR &amp;ldquo;layer&amp;rdquo; is created.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The code to perform the bulk OCR conversion can be found in this &lt;a href=&#34;https://github.com/greydongilmore/ocr-pdf&#34; target=&#34;_blank&#34;&gt;GitHub repository&lt;/a&gt;. Once you have the project repository stored locally, follow these steps to run OCR on your Zotereo database.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You will need to install the command-line program &lt;a href=&#34;https://ocrmypdf.readthedocs.io/en/latest/installation.html&#34; target=&#34;_blank&#34;&gt;OCRmyPDF&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next, you will need to determine where Zotereo stores your PDF files. In Zotereo, right-click on any document and select &lt;strong&gt;Show File&lt;/strong&gt;. A new window will pop-up, make note of the full path to parent directory (i.e. /home/Zotereo/storage).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;center&gt;
    &lt;figure&gt;
        &lt;img src=&#34;./img/pdf_storage_location.png&#34; alt=&#34;pdf_storage_location&#34; width=&#34;80%&#34;/&gt;
        &lt;figcaption&gt;Zotereo file storage location.&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/center&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;In a terminal window, change into the GitHub project repository:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cd /home/user/Documents/Github/ocr-pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the required Python libraries by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;python -m pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the root of the repository, run the Python script by passing the full directory path determined in the first step:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;python main.py -i &amp;quot;full/path/to/PDF/storage/directory&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This process will take some time. First, the algorithm will search through all the PDFs and determine which files are not searchable. Once the non-searchable PDF files have been found, the OCR process is executed using &lt;strong&gt;ocrmypdf&lt;/strong&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adapting the listening time for micro-electrode recordings in deep brain stimulation interventions</title>
      <link>https://greydongilmore.github.io/publication/2021_martin_listening/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2021_martin_listening/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Extending convolutional neural networks for localizing the subthalamic nucleus from microelectrode recordings in Parkinsonâs disease</title>
      <link>https://greydongilmore.github.io/publication/2021_martin_cnn/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2021_martin_cnn/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A novel approach of using brachial plexus blockade as an experimental model for diagnosis of intraoperative nerve dysfunction with somatosensory evoked potentials: a blinded proof-of-concept study</title>
      <link>https://greydongilmore.github.io/publication/2021_chui_brachial_plexus/</link>
      <pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2021_chui_brachial_plexus/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Freesurfer Installation</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/freesurfer/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/freesurfer/</guid>
      <description>&lt;h2 id=&#34;download-software&#34;&gt;Download software&lt;/h2&gt;
&lt;p&gt;Download the &lt;a href=&#34;https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/6.0.0/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linux software version&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo tar -C /usr/local -xzvf /mnt/c/Users/*[your_username]*/Downloads/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will also need to install some dependancies:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install tcsh
sudo apt-get install libglu1
sudo apt-get install libxss1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;post-install-configurations&#34;&gt;Post-Install Configurations&lt;/h2&gt;
&lt;p&gt;Add Freesurfer to your path:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo &amp;quot;FREESURFER_HOME=/usr/local/freesurfer&amp;quot; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;source $FREESURFER_HOME/SetUpFreeSurfer.sh&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have run the install correctly you will see this output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Setting up environment for FreeSurfer/FS-FAST (and FSL)
FREESURFER_HOME /usr/local/freesurfer
FSFAST_HOME     /usr/local/freesurfer/fsfast
FSF_OUTPUT_FORMAT nii
SUBJECTS_DIR    /usr/local/freesurfer/subjects
MNI_DIR         /usr/local/freesurfer/mni
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;define-subjects_dir&#34;&gt;Define subjects_dir&lt;/h2&gt;
&lt;p&gt;FreeSurfer requires an environment variable called &lt;code&gt;SUBJECTS_DIR&lt;/code&gt;. This is the directory where subject data is stored.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export SUBJECTS_DIR=&amp;lt;path to subject data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;obtain-license&#34;&gt;Obtain license&lt;/h2&gt;
&lt;p&gt;You will need to obtain a &lt;a href=&#34;https://surfer.nmr.mgh.harvard.edu/registration.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;license key&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you obtain the &lt;code&gt;license.txt&lt;/code&gt; key file, copy it to your FreeSurfer installation directory. This is also the location defined by the &lt;code&gt;FREESURFER_HOME&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mv /mnt/c/Users/*[your_username]*/Downloads/license.txt $FREESURFER_HOME
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Direct visualization and characterization of the human zona incerta and surrounding structures.</title>
      <link>https://greydongilmore.github.io/publication/2020_lau_direct_visualization/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2020_lau_direct_visualization/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Image-Based Subthalamic Nucleus Segmentation for Deep Brain Surgery with Electrophysiology Aided Refinement</title>
      <link>https://greydongilmore.github.io/publication/2020_varga_mrisegmentation/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2020_varga_mrisegmentation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Adding application launch icon to favorites</title>
      <link>https://greydongilmore.github.io/post/linux_docs/app_icon/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/linux_docs/app_icon/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Download your own icon image&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find path to the executable of your application by running (replace brackets with name of applicaion):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;which [name_application]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Copy the path from this output.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Create\edit the &lt;code&gt;.desktop&lt;/code&gt; file for the application by running the command (remember to edit the application name):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gedit Desktop/[name_application].desktop
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following lines (replace the items in square brackets with your respect application) and save the file with the extension &lt;code&gt;.desktop&lt;/code&gt; (e.g. &lt;code&gt;[application name].desktop&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env xdg-open

[Desktop Entry]
Type=Application
Icon=[path_to_icon_file]
Name=[Name your application]
Comment=[Name your application]
Exec=[path_to_executable file_from_step2]
Categories=Development
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Right click on the file (should now be on your desktop), select properties, then permissions and select &lt;code&gt;Allow executing file as program&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, move this file to the desktop launcher path on your system:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mv /Desktop/*[name_of_file]* /usr/share/applications/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Install Advanced Normalization Tools</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/ants/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/ants/</guid>
      <description>&lt;h2 id=&#34;get-the-latest-ants-code&#34;&gt;Get the latest ANTs code&lt;/h2&gt;
&lt;p&gt;Download the latest code into an arbitrary directory, I use ~/code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mkdir ~/code 
cd ~/code
git clone https://github.com/ANTsX/ANTs.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will also need to install the ZLIB libraries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install zlib1g-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;run-cmakemake&#34;&gt;Run CMake/Make&lt;/h2&gt;
&lt;p&gt;I install my applications in &lt;code&gt;~/Applications&lt;/code&gt;, however the following will install ANTs in &lt;code&gt;~/bin&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mkdir -p ~/bin/ants
cd ~/bin/ants
ccmake ~/code/ANTs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hit &lt;strong&gt;&amp;lsquo;c&amp;rsquo;&lt;/strong&gt; to do an initial configuration. CMake will do some checking and then present options for review. Hit &lt;strong&gt;&amp;lsquo;c&amp;rsquo;&lt;/strong&gt; again to do another round of configuration. If there are no errors, you&amp;rsquo;re ready to generate the make files by pressing &lt;strong&gt;&amp;lsquo;g&amp;rsquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now you are back at the command line, it&amp;rsquo;s time to compile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This compiles in the most resource-efficient manner. To save time, you can use multiple threads, for example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;make -j 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;post-install-configuration&#34;&gt;Post-install Configuration&lt;/h2&gt;
&lt;p&gt;If you want to use ANTs scripts, copy them from the source directory &lt;code&gt;Scripts/&lt;/code&gt; to the bin directory where &lt;code&gt;antsRegistration&lt;/code&gt; etc are located:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;cp -r ~/bin/ants/Scripts/* ~/bin/ants/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming you&amp;rsquo;ve built in &lt;code&gt;~/bin/ants&lt;/code&gt;, there will now be a binary directory &lt;code&gt;~/bin/ants/bin&lt;/code&gt;, containing the programs (and scripts if you&amp;rsquo;ve included them). The scripts additionally require ANTSPATH to point to the bin directory including a trailing slash.&lt;/p&gt;
&lt;p&gt;You will need to edit your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.profile&lt;/code&gt; file by adding the following lines:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;export ANTSPATH=${HOME}/bin/ants/bin
export PATH=${ANTSPATH}:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now check this worked correctly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;which antsRegistration
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SSHFS Desktop Application</title>
      <link>https://greydongilmore.github.io/post/linux_docs/graham_shortcut/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/linux_docs/graham_shortcut/</guid>
      <description>&lt;h2 id=&#34;setup-fuse&#34;&gt;Setup fuse&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run the following in a terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;modprobe fuse
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a FUSE usergroup and add yourself to the group&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo groupadd fuse
sudo usermod -a -G fuse $USER
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a set of ssh-keys, press enter when asked to name the file (blank) and press enter when asked to enter a passphrase (blank):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transport the key to the remote server:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;ssh-copy-id -i .ssh/id_rsa.pub user@example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now when you run &lt;code&gt;sshfs&lt;/code&gt; you will not need to enter your password.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;create-shell-script&#34;&gt;Create Shell Script&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run the following command to create an empty shell script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;touch +x ~/Documents/sshfs_mount.sh
chmod +x ~/Documents/sshfs_mount.sh
gedit ~/Documents/sshfs_mount.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the command you normally run to connect to the remote server, change &lt;code&gt;mount_dir&lt;/code&gt; to match your local mount location:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
mount_dir=&amp;quot;/path/to/mount/directory&amp;quot;
if (! mountpoint -q $mount_dir); then
    sshfs user@example.com:/home/[user]/ $mount_dir -o   ServerAliveInterval=15,ServerAliveCountMax=3,Compression=no,follow_symlinks
else
    umount $mount_dir
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the script, the filesystem will be mounted/unmounted depending on the status. Save and close the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;create-desktop-entry-file&#34;&gt;Create Desktop Entry File&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run the following command to create an empty shell script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;touch ~/Documents/sshfs_mount.desktop
chmod +x ~/Documents/sshfs_mount.desktop
gedit ~/Documents/sshfs_mount.desktop
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paste the following into the document, ensure you update the brackets:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env xdg-open

[Desktop Entry]
Version=1.0
Type=Application
Terminal=false
Icon=[path/to/icon]
Name=[Name the application]
Exec=[path/to/sshfs_mount.sh]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Save and close.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move the desktop entry file into the applications directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mv ~/Documents/sshfs_mount.desktop /usr/share/applications/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Search in applications for the desktop entry file, right-click and add to favorites.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Image guidance in deep brain stimulation surgery to treat Parkinson&#39;s disease: a comprehensive review</title>
      <link>https://greydongilmore.github.io/publication/2020_xiao_guidance/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2020_xiao_guidance/</guid>
      <description></description>
    </item>
    
    <item>
      <title>NiftyReg Install</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/niftyreg/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/niftyreg/</guid>
      <description>&lt;h2 id=&#34;download-niftyreg&#34;&gt;Download NiftyReg&lt;/h2&gt;
&lt;p&gt;Obtain the newest version of &lt;a href=&#34;https://sourceforge.net/projects/niftyreg/files/latest/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NiftyReg&lt;/a&gt; or by running the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mkdir -p ~/code/niftyreg_source
cd ~/code/niftyreg_source
git clone https://github.com/SuperElastix/niftyreg.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;run-cmakemake&#34;&gt;Run CMake/Make&lt;/h2&gt;
&lt;p&gt;Make the build and install directories.&lt;/p&gt;
&lt;p&gt;The default install location is &lt;code&gt;/usr/local&lt;/code&gt;, which falls on your PATH. This is the easiest location to install. If you want to install somwhere else then specify the path in the &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; variable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mkdir -p ~/bin/niftyreg
cd ~/bin/niftyreg
ccmake ~/code/niftyreg_source/niftyreg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following options will be displayed, ensure you change &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; variable to the install directory path if you don&amp;rsquo;t want to use default:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Parameter&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;BUILD_ALL_DEP&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set to ON if you want to build All the dependencies&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;BUILD_SHARED_LIBS&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Build the libraries as shared build the libraries as shared&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;BUILD_TESTING&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set to ON if you want to build the unit tests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CMAKE_BUILD_TYPE&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Compiling options: Debug Release RelWithDebInfo MinSizeRel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;CMAKE_INSTALL_PREFIX&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set the path where the final install will be copied&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M_LIBRARY&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Path to a library.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PNG_INCLUDE_DIR&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set if you want NiftyReg to support the PNG file format for 2D images. Note that CMake will try to find the libpng on your system and will build it automatically if it does not find it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;USE_CUDA&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set to ON if you want to build the GPU code. The CUDA toolkit must be install otherwise CMake will return an error message&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;USE_OPENCL&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set to ON to use OpenCL for multi-CPU implementation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;USE_OPENMP&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set to ON to use OpenMP for multi-CPU implementation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;USE_SSE&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set to ON to use SIMD based implementation, mostly for cubic B-Spline related computation. Note that SIMD implementation has only be done for single precision.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Press &lt;strong&gt;&amp;lsquo;c&amp;rsquo;&lt;/strong&gt; to configure the NiftyReg project, press &lt;strong&gt;&amp;lsquo;c&amp;rsquo;&lt;/strong&gt; to configure the project. Once the project is correctly configured, press the &lt;strong&gt;&amp;lsquo;g&amp;rsquo;&lt;/strong&gt; key to generate the Makefiles. You can then build and install the project:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo make
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;post-install-configuration&#34;&gt;Post-Install Configuration&lt;/h2&gt;
&lt;p&gt;The project should then be installed into the &lt;code&gt;CMAKE_INSTALL_PREFIX&lt;/code&gt; directory you previously created.&lt;/p&gt;
&lt;p&gt;If you changed the install prefix directory, to one not on your PATH, you will need to add NiftyReg to your PATH. In order to use NiftyReg in any terminal, you will need to edit your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.profile&lt;/code&gt; file by adding the following lines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NREG=&amp;lt;path_to_your_niftyreg_install&amp;gt;
export PATH={NREG}/bin:${PATH}
export LD_LIBRARY_PATH={NREG}/lib:${LD_LIBRARY_PATH}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Close and re-open the linux terminal then run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;reg_f3d
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Assessing the effect of current steering on the total electrical energy delivered and ambulation in Parkinsonâs disease</title>
      <link>https://greydongilmore.github.io/publication/2020_hui_steering/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2020_hui_steering/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Intraoperative Localization of STN During DBS Surgery Using a Data-Driven Model</title>
      <link>https://greydongilmore.github.io/publication/2020_khosravi_datamodel/</link>
      <pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2020_khosravi_datamodel/</guid>
      <description></description>
    </item>
    
    <item>
      <title>FMRIB Software Library Installation</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/fsl/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/fsl/</guid>
      <description>&lt;h2 id=&#34;installing-on-pop_os&#34;&gt;Installing on Pop_OS!&lt;/h2&gt;
&lt;p&gt;You will first need to run the following steps prior to installing FSL.&lt;/p&gt;
&lt;p&gt;The following steps were originally written here &lt;a href=&#39;https://forums.linuxmint.com/viewtopic.php?p=1531616&amp;sid=eca87543f47ece83994a3e3b656447c3#p1531616&#39; target=&#34;_blank&#34;&gt; &lt;strong&gt;here&lt;/strong&gt; &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you run a backup prior to performing this hack&amp;hellip; just in case.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;move your current OS information files into a temporary location:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mv /etc/os-release /etc/os-release.pop &amp;amp;&amp;amp; sudo mv /etc/lsb-release /etc/lsb-release.pop
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;write a new &lt;code&gt;os-release&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo gedit /etc/os-release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy the following into this file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NAME=&amp;quot;Ubuntu&amp;quot;
VERSION=&amp;quot;20.04 LTS (Focal Fossa)&amp;quot;
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME=&amp;quot;Ubuntu 20.04 LTS&amp;quot;
VERSION_ID=&amp;quot;20.04&amp;quot;
HOME_URL=&amp;quot;https://www.ubuntu.com/&amp;quot;
SUPPORT_URL=&amp;quot;https://help.ubuntu.com/&amp;quot;
BUG_REPORT_URL=&amp;quot;https://bugs.launchpad.net/ubuntu/&amp;quot;
PRIVACY_POLICY_URL=&amp;quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&amp;quot;
VERSION_CODENAME=focal
UBUNTU_CODENAME=focal
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;write a new lsb-release file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo gedit /etc/lsb-release
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy the following into this file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DISTRIB_CODENAME=focal
DISTRIB_DESCRIPTION=&amp;quot;Ubuntu 20.04 LTS&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;now run the fslinstaller.py script in the below section and return here to Step 5 to return your OS information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;after running the FSL install steps, remove the files you wrote:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo rm /etc/os-release &amp;amp;&amp;amp; sudo rm /etc/lsb-release
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;move the original files back:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo mv /etc/os-release.pop /etc/os-release &amp;amp;&amp;amp; sudo mv /etc/lsb-release.pop /etc/lsb-release
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;download-fsl&#34;&gt;Download FSL&lt;/h2&gt;
&lt;p&gt;The easiest method is to download this &lt;a href=&#34;https://fsl.fmrib.ox.ac.uk/fsldownloads_registration/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;python script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You will need to register. On the subsequent page you will download the &lt;code&gt;fslinstaller.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Run the following in a linux terminal (the install will take awhile):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;python /mnt/c/Users/*[your_username]*/Downloads/fslinstaller.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will also need to install the package &lt;code&gt;wxpython&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pip install wxpython
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If that does not work then run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-16.04 wxPython
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;libraries-you-may-need-to-install&#34;&gt;Libraries you may need to install&lt;/h2&gt;
&lt;h3 id=&#34;multiple-image-network-graphics-library-libmng&#34;&gt;Multiple-image Network Graphics library (libmng)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install libmng2
sudo apt-get install libmng-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;png-library---development-libpng-dev&#34;&gt;PNG library - development (libpng-dev)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install libpng-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;optimized-blas-linear-algebra-library-libopenblas-base&#34;&gt;Optimized BLAS (linear algebra) library (libopenblas-base)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install libopenblas-base
export LD_LIBRARY_PATH=/usr/lib/openblas-base/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;libmngso1-error&#34;&gt;libmng.so.1 Error&lt;/h3&gt;
&lt;p&gt;You will need to create a symbolic link for the library dll &lt;code&gt;libmng.so.1&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo ln -s /usr/lib/x86_64-linux-gnu/libmng.so.2 /usr/lib/x86_64-linux-gnu/libmng.so.1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;independent-jpeg-groups-jpeg-runtime-library-libjpeg62&#34;&gt;Independent JPEG Group&amp;rsquo;s JPEG runtime library (libjpeg62)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install libjpeg62
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;png-library---runtime-libpng12deb&#34;&gt;PNG library - runtime (libpng12.deb)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wget -q -O /tmp/libpng12.deb http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb \
  &amp;amp;&amp;amp; sudo dpkg -i /tmp/libpng12.deb \
  &amp;amp;&amp;amp; rm /tmp/libpng12.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;gtk-graphical-user-interface-library-gtk20&#34;&gt;GTK+ graphical user interface library (gtk2.0)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install gtk2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;pulseaudio-for-other-random-libraries&#34;&gt;Pulseaudio for other random libraries&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install pulseaudio
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;you-may-also-receive-an-error-no-d-bus-daemon-running-run-the-following&#34;&gt;You may also receive an error &lt;code&gt;No D-BUS daemon running&lt;/code&gt;, run the following:&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo chown -R *[your username]*:admin ~/.dbus
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Google Remote Desktop</title>
      <link>https://greydongilmore.github.io/post/linux_docs/remote_desktop/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/linux_docs/remote_desktop/</guid>
      <description>&lt;h2 id=&#34;install-remote-desktop-extension&#34;&gt;Install Remote Desktop Extension&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Navigate to &lt;a href=&#34;https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp&#34; target=&#34;blank_&#34;&gt;Chrome Remote Desktop Web Store&lt;/a&gt; and install it by clicking &lt;code&gt;Add to Chrome&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Click &lt;code&gt;Launch App&lt;/code&gt; and the remote desktop app window should open.&lt;/p&gt;
&lt;h2 id=&#34;install-chrome-remote-desktop-package&#34;&gt;Install Chrome Remote Desktop Package&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; You will now need to get the &lt;code&gt;.deb&lt;/code&gt; for remote desktop with the following command in terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wget https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Then install it by running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt install ./chrome-remote-desktop_current_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; If the initial installation attempt will fail, simply run &lt;code&gt;sudo apt install -f&lt;/code&gt; to fix the missing dependencies and to complete the installation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; You will need to add yourself to the chrome-remote-desktop group then reboot for the changes to take effect.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo usermod -a -G chrome-remote-desktop $USER
sudo reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;create-session-file&#34;&gt;Create Session File&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; You will need to create a remote desktop session file in your home directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gedit ~/.chrome-remote-desktop-session
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Look in &lt;code&gt;/usr/share/xsessions/&lt;/code&gt; for the .desktop file for your linux environment. For example, ElementaryOS has a file named &lt;code&gt;Pantheon&lt;/code&gt; with the following command: &lt;code&gt;gnome-session --session=pantheon&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Within the &lt;code&gt;chrome-remote-desktop-session&lt;/code&gt; file enter the following (make sure to use your respective distro .desktop file):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exec /usr/sbin/lightdm-session &amp;quot;gnome-session --session=pantheon&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; If running ElementayOS you will also need to add the following to the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DESKTOP_SESSION=pantheon
XDG_CURRENT_DESKTOP=Pantheon 
XDG_RUNTIME_DIR=/run/user/1000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Save the file and close.&lt;/p&gt;
&lt;h2 id=&#34;post-install-configuration-setting-up-displays&#34;&gt;Post-Install Configuration (Setting up Displays)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Stop Chrome Remote Desktop:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;/opt/google/chrome-remote-desktop/chrome-remote-desktop --stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Backup the original configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo cp /opt/google/chrome-remote-desktop/chrome-remote-desktop /opt/google/chrome-remote-desktop/chrome-remote-desktop.orig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Edit the config (&lt;code&gt;chrome-remote-desktop&lt;/code&gt;) file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;gedit /opt/google/chrome-remote-desktop/chrome-remote-desktop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Find &lt;code&gt;DEFAULT_SIZES&lt;/code&gt; and update the remote desktop resolution. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DEFAULT_SIZES = &amp;quot;2560x1440&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; For multiple displays you will need to enter in the resolution for each one:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DEFAULT_SIZES = &amp;quot;2560x1440,2560x1440,2560x1440&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; Determine your main display number (obtain it with &lt;code&gt;echo $DISPLAY&lt;/code&gt; from terminal). Find &lt;code&gt;FIRST_X_DISPLAY_NUMBER&lt;/code&gt; and set the &lt;code&gt;FIRST_X_DISPLAY_NUMBER&lt;/code&gt; to the display number (Ubuntu 17.10 and lower: usually 0, Ubuntu 18.04: usually 1)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo $DISPLAY
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;FIRST_X_DISPLAY_NUMBER = 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; Around line 425, within the definition for &lt;code&gt;get_unused_display_number()&lt;/code&gt;, comment out sections that look for additional displays by adding &lt;code&gt;#&lt;/code&gt; infront:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# while os.path.exists(X_LOCK_FILE_TEMPLATE % display):
#   display += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt; Lastly, find &lt;code&gt;launch_session()&lt;/code&gt; and comment out &lt;code&gt;launch_x_server()&lt;/code&gt; and &lt;code&gt;launch_x_session()&lt;/code&gt; within &lt;code&gt;launch_session()&lt;/code&gt;. You will then add &lt;code&gt;display = self.get_unused_display_number()&lt;/code&gt; and &lt;code&gt;self.child_env[&amp;quot;DISPLAY&amp;quot;] = &amp;quot;:%d&amp;quot; % display&lt;/code&gt; to the definition. The function definition should look like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def launch_session(self, x_args):
    self._init_child_env()
    self._setup_pulseaudio()
    self._setup_gnubby()
    #self._launch_x_server(x_args)
    #self._launch_x_session()
    display = self.get_unused_display_number()
    self.child_env[&amp;quot;DISPLAY&amp;quot;] = &amp;quot;:%d&amp;quot; % display
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;9.&lt;/strong&gt; Save and exit the editor. Start Chrome Remote Desktop:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;/opt/google/chrome-remote-desktop/chrome-remote-desktop --start
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;launch-remote-desktop&#34;&gt;Launch Remote Desktop&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Finally, head to &lt;a href=&#34;https://remotedesktop.google.com/access/&#34; target=&#34;_blank&#34;&gt;Chrome Remote Web&lt;/a&gt; and Click &lt;code&gt;TURN ON&lt;/code&gt; to enable remote desktop access. Set the system name, set the remote desktop connection PIN and click &lt;code&gt;START&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zona incerta deep-brain stimulation in orthostatic tremor: efficacy and mechanism of improvement</title>
      <link>https://greydongilmore.github.io/publication/2019_gilmore_orthostatic/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2019_gilmore_orthostatic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Forward and backward walking in Parkinson disease: A factor analysis</title>
      <link>https://greydongilmore.github.io/publication/2019_gilmore_gait/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2019_gilmore_gait/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Letter to the Editor Regarding âStatistical Shape Analysis of Subthalamic Nucleus in Patients with Parkinsonâs Diseaseâ</title>
      <link>https://greydongilmore.github.io/publication/2019_gilmore_shape/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2019_gilmore_shape/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Unsupervised Clustering of Micro-Electrophysiological Signals for localization of Subthalamic Nucleus during DBS Surgery</title>
      <link>https://greydongilmore.github.io/publication/2019_khosravi_clustering/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2019_khosravi_clustering/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Slides</title>
      <link>https://greydongilmore.github.io/slides/example/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/slides/example/</guid>
      <description>&lt;h1 id=&#34;create-slides-in-markdown-with-wowchemy&#34;&gt;Create slides in Markdown with Wowchemy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wowchemy&lt;/a&gt; | &lt;a href=&#34;https://owchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Efficiently write slides in Markdown&lt;/li&gt;
&lt;li&gt;3-in-1: Create, Present, and Publish your slides&lt;/li&gt;
&lt;li&gt;Supports speaker notes&lt;/li&gt;
&lt;li&gt;Mobile friendly slides&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;controls&#34;&gt;Controls&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Next: &lt;code&gt;Right Arrow&lt;/code&gt; or &lt;code&gt;Space&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Previous: &lt;code&gt;Left Arrow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start: &lt;code&gt;Home&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finish: &lt;code&gt;End&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Overview: &lt;code&gt;Esc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Speaker notes: &lt;code&gt;S&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fullscreen: &lt;code&gt;F&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zoom: &lt;code&gt;Alt + Click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js#pdf-export&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PDF Export&lt;/a&gt;: &lt;code&gt;E&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;code-highlighting&#34;&gt;Code Highlighting&lt;/h2&gt;
&lt;p&gt;Inline code: &lt;code&gt;variable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Code block:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;porridge = &amp;quot;blueberry&amp;quot;
if porridge == &amp;quot;blueberry&amp;quot;:
    print(&amp;quot;Eating...&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;p&gt;In-line math: $x + y = z$&lt;/p&gt;
&lt;p&gt;Block math:&lt;/p&gt;
&lt;p&gt;$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;fragments&#34;&gt;Fragments&lt;/h2&gt;
&lt;p&gt;Make content appear incrementally&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press &lt;code&gt;Space&lt;/code&gt; to play!&lt;/p&gt;
&lt;span class=&#34;fragment &#34; &gt;
   One 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   **Two** 
&lt;/span&gt;
&lt;span class=&#34;fragment &#34; &gt;
   Three 
&lt;/span&gt;
&lt;hr&gt;
&lt;p&gt;A fragment can accept two optional parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;class&lt;/code&gt;: use a custom style (requires definition in custom CSS)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weight&lt;/code&gt;: sets the order in which a fragment appears&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;speaker-notes&#34;&gt;Speaker Notes&lt;/h2&gt;
&lt;p&gt;Add speaker notes to your presentation&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% speaker_note %}}
- Only the speaker can read these notes
- Press `S` key to view
{{% /speaker_note %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Press the &lt;code&gt;S&lt;/code&gt; key to view the speaker notes!&lt;/p&gt;
&lt;aside class=&#34;notes&#34;&gt;
  &lt;ul&gt;
&lt;li&gt;Only the speaker can read these notes&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;S&lt;/code&gt; key to view&lt;/li&gt;
&lt;/ul&gt;

&lt;/aside&gt;
&lt;hr&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;black: Black background, white text, blue links (default)&lt;/li&gt;
&lt;li&gt;white: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;league: Gray background, white text, blue links&lt;/li&gt;
&lt;li&gt;beige: Beige background, dark text, brown links&lt;/li&gt;
&lt;li&gt;sky: Blue background, thin dark text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;night: Black background, thick white text, orange links&lt;/li&gt;
&lt;li&gt;serif: Cappuccino background, gray text, brown links&lt;/li&gt;
&lt;li&gt;simple: White background, black text, blue links&lt;/li&gt;
&lt;li&gt;solarized: Cream-colored background, dark green text, blue links&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;

&lt;section data-noprocess data-shortcode-slide
  
      
      data-background-image=&#34;/media/boards.jpg&#34;
  &gt;

&lt;h2 id=&#34;custom-slide&#34;&gt;Custom Slide&lt;/h2&gt;
&lt;p&gt;Customize the slide style and background&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; slide background-image=&amp;quot;/media/boards.jpg&amp;quot; &amp;gt;}}
{{&amp;lt; slide background-color=&amp;quot;#0000FF&amp;quot; &amp;gt;}}
{{&amp;lt; slide class=&amp;quot;my-style&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h2 id=&#34;custom-css-example&#34;&gt;Custom CSS Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s make headers navy colored.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;assets/css/reveal_custom.css&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.reveal section h1,
.reveal section h2,
.reveal section h3 {
  color: navy;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h1 id=&#34;questions&#34;&gt;Questions?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/discussions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ask&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/managing-content/#create-slides&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Effects of Deep Brain Stimulation of the Subthalamic Nucleus Settings on Voice Quality, Intensity, and Prosody in Parkinson&#39;s Disease: Preliminary Evidence for Speech Optimization</title>
      <link>https://greydongilmore.github.io/publication/2019_abeyesekera/</link>
      <pubDate>Thu, 31 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2019_abeyesekera/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Medication status and dual-tasking on turning strategies in Parkinson disease</title>
      <link>https://greydongilmore.github.io/publication/2019_adamson/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2019_adamson/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Electrophysiological signal processing for intraoperative localization of subthalamic nuleus during deep brain stimulation surgery</title>
      <link>https://greydongilmore.github.io/publication/2018_khosravi_processing/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2018_khosravi_processing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Effect of Levodopa on Speech Dysfluency in Parkinson&#39;s Disease</title>
      <link>https://greydongilmore.github.io/publication/2019_im_dysfluency/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2019_im_dysfluency/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tips on reading academic papers</title>
      <link>https://greydongilmore.github.io/post/reading-academic-papers/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/reading-academic-papers/</guid>
      <description>&lt;p&gt;One frequently asked question amoung graduate students is &amp;ldquo;How do you organize/read manuscripts?&amp;rdquo;. I have found a workflow that works quite well and allows me to stay ontop of the endless amount of new publications.&lt;/p&gt;
&lt;h2 id=&#34;setup-an-rss-feed&#34;&gt;Setup an RSS feed&lt;/h2&gt;
&lt;p&gt;The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is &lt;a href=&#34;https://feedly.com/i/welcome&#34; target=&#34;_blank&#34;&gt;Feedly&lt;/a&gt;, which is simple and easy to use.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On the main page, select &lt;code&gt;Get started for free&lt;/code&gt;. If you do not want to link your social media accounts, select &lt;code&gt;Continue with Feedly&lt;/code&gt; and use an email address of your choice.&lt;/li&gt;
&lt;li&gt;Once you have logged in you should see a search box for searching potential topics. Head over to &lt;a href=&#34;https://www.ncbi.nlm.nih.gov/pubmed/&#34; target=&#34;_blank&#34;&gt;PubMed&lt;/a&gt; and perform a common search you use to find articles you are interested in. I will use &lt;code&gt;deep brain stimulation&lt;/code&gt; as an example.&lt;/li&gt;
&lt;li&gt;Once you search for the term in PubMed you will notice an option to &lt;code&gt;Create RSS&lt;/code&gt; underneath the search box. Click this option. Leave the default options set and click the &lt;strong&gt;XML&lt;/strong&gt; link to open a new tab.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./img/pubmed_search.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;In the new tab, copy the full URL and paste it into the search box on the Feedly page and hit Enter. Once the search load click on the &lt;code&gt;Follow&lt;/code&gt; tab, create a new feed for it and you will see it appear on the left side column.
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./img/feedly_add.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can now login and find all recent articles indexed on PubMed about the topic you are interested in. This is a great tool to use to keep up-to-date on publications.&lt;/p&gt;
&lt;h2 id=&#34;take-notes&#34;&gt;Take Notes&lt;/h2&gt;
&lt;p&gt;With any new article I come across, I try to make a quick summary note about it for later reference. A really nice tool for these notes is a software called &lt;a href=&#34;https://notable.md/&#34; target=&#34;_blank&#34;&gt;Notable&lt;/a&gt;. Notable is a Markdown based notetaking application that makes sharing notes very open and easy.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When you open Notable for the first time you will need to set your data directory. If you want to easily sync/share your notes, create a new Github repository and use that as your Notable data directory.&lt;/li&gt;
&lt;li&gt;I created a template note for myself that I use for each new article I read, which looks like:
















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./img/notable_template.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;If you want the template you can download it &lt;a href=&#34;./static/Untitled.md&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Voice quality severity and responsiveness to levodopa in Parkinson&#39;s disease</title>
      <link>https://greydongilmore.github.io/publication/2018_cushnie-sparrow_voiceseverity/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2018_cushnie-sparrow_voiceseverity/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Install and work with Github desktop</title>
      <link>https://greydongilmore.github.io/post/install-github-desktop/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/install-github-desktop/</guid>
      <description>&lt;p&gt;While working with Git is most often performed at the command line, it can often be daughnting for people who are not as comfortable with a terminal window. GitHub has made the entry point easier by introducing a user interface application - &lt;strong&gt;GitHub Desktop&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-github-desktop&#34;&gt;Setting up GitHub Desktop&lt;/h2&gt;
&lt;p&gt;The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is &lt;a href=&#34;https://desktop.github.com/&#34; target=&#34;_blank&#34;&gt;Feedly&lt;/a&gt;, which is simple and easy to use.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the application from the &lt;a href=&#34;https://desktop.github.com/&#34; target=&#34;_blank&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you have installed GitHub Desktop, launch it and sign in with your GitHub account:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/pic_01.png&#34; alt=&#34;pic_01&#34; width=&#34;60%&#34;/&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Once you are signed in, choose &lt;strong&gt;Clone a repository&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/pic_02.png&#34; alt=&#34;pic_02&#34; width=&#34;60%&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing Automatic Registration Toolbox</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/art/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/art/</guid>
      <description>&lt;h2 id=&#34;download-art&#34;&gt;Download ART&lt;/h2&gt;
&lt;p&gt;Download the newest version of &lt;a href=&#34;https://www.nitrc.org/projects/art/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ART&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make a new directory for the install and extract the tar package into it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mkdir ~/Applications/ART
cd ~/Applications/ART
tar -xvzf /mnt/c/Users/*[your_username]*/Downloads/acpcdetect2.0*.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;post-configuration&#34;&gt;Post Configuration&lt;/h2&gt;
&lt;p&gt;Set the &lt;code&gt;ARTHOME&lt;/code&gt; environment variable and add the binary directory to your PATH by editing your &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;vim ~/.basrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add these lines to the end:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export ARTHOME=/path/to/ART
export PATH=$ARTHOME/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;confirm-installation&#34;&gt;Confirm Installation&lt;/h2&gt;
&lt;p&gt;Execute &lt;code&gt;acpcdetect&lt;/code&gt; by running command in terminal&lt;/p&gt;
&lt;p&gt;You may get an error when executing &lt;code&gt;acpcdetect&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;acpcdetect: error while loading shared libraries: liblapack.so.3: cannot open shared object file: No such file or directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you get this error, run the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install libatlas-base-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will also need to install &lt;code&gt;pnmtopng&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install -y pnmtopng
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Make and CMake Installation</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/cmake/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/cmake/</guid>
      <description>&lt;h2 id=&#34;install-make&#34;&gt;Install Make&lt;/h2&gt;
&lt;p&gt;Install build essentials and Make first:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install make
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install build-essential
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-cmake&#34;&gt;Install CMake&lt;/h2&gt;
&lt;p&gt;Download the latest version of the &lt;a href=&#34;https://github.com/Kitware/CMake/releases/download/v3.13.3/cmake-3.13.3-Linux-x86_64.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake executable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In your linux shell run:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;chmod +x /mnt/c/Users/*[your_username]*/Downloads/cmake-*-Linux-x86_64.sh
sudo /mnt/c/Users/*[your_username]*/Downloads/cmake-*-Linux-x86_64.sh
export PATH=~/cmake-3.13.3-Linux-x86_64/bin/:$PATH
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Deep Brain Stimulation of the Subthalamic Nucleus Parameter Optimization for Vowel Acoustics and Speech Intelligibility in Parkinson&#39;s Disease</title>
      <link>https://greydongilmore.github.io/publication/2018_knowles_acoustics/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2018_knowles_acoustics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Activating Windows Linux Subsystem 2 (WSL2)</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/wsl2/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/wsl2/</guid>
      <description>&lt;h2 id=&#34;sign-up-for-windows-insider-program&#34;&gt;Sign up for Windows Insider program&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://insider.windows.com/en-us/getting-started/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Register for Windows Insider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sign up for Windows Insider program&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;activate-windows-insider-builds&#34;&gt;Activate Windows Insider Builds&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Enable Full Diagnostic Data&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go to Settings &amp;ndash;&amp;gt; Privacy &amp;ndash;&amp;gt; Diagnostics &amp;amp; feedback &amp;ndash;&amp;gt; Diagnostic data&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Full&lt;/strong&gt; as the option&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enable Telemetry Data via Registry&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open Registry Editor
&lt;ul&gt;
&lt;li&gt;Press Windows Key + R then type &lt;code&gt;regedit&lt;/code&gt; to open registry editor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Navigate to:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\DataCollection
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Right-click &lt;strong&gt;DataCollection&lt;/strong&gt;, click &lt;strong&gt;New&lt;/strong&gt; and then click &lt;strong&gt;DWORD (32-bit) Value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Name it as  &lt;strong&gt;AllowTelemetry&lt;/strong&gt;, and then press &lt;strong&gt;ENTER&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Double-click &lt;strong&gt;AllowTelemetry&lt;/strong&gt;, set the value as 3, and then click &lt;strong&gt;OK&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
 &lt;p align=&#34;center&#34;&gt;
   &lt;img width=&#34;500&#34; src=&#34;img/regedit_telemetry.png&#34;&gt;
 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Repeat the above steps for:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\DataCollection
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Restart your computer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Group Policy to enable Telemetry&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;strong&gt;Windows key + r&lt;/strong&gt; and type &lt;strong&gt;gpedit.msc&lt;/strong&gt; in the Run prompt, hit &lt;strong&gt;ENTER&lt;/strong&gt; to launch group policy editor&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;Computer Configuration&lt;/strong&gt; &amp;ndash;&amp;gt; &lt;strong&gt;Administrative Templates&lt;/strong&gt; &amp;ndash;&amp;gt; &lt;strong&gt;Windows Components&lt;/strong&gt; &amp;ndash;&amp;gt; &lt;strong&gt;Data Collection and Preview Builds&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Double-click &lt;strong&gt;Allow Telemetry&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Options&lt;/strong&gt; box, configure the level as 3, and then click &lt;strong&gt;OK&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
 &lt;p align=&#34;center&#34;&gt;
   &lt;img width=&#34;500&#34; src=&#34;img/group_telemetry.png&#34;&gt;
 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;activate-insider-build&#34;&gt;Activate Insider Build&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Search for &lt;strong&gt;Check for Updates&lt;/strong&gt; in the Windows search menu&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the new window select &lt;strong&gt;Windows Insider Program&lt;/strong&gt; at the bottom of the menu&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select Get Started and follow the instructions, making sure you select &lt;strong&gt;Fast&lt;/strong&gt; when asked&lt;/p&gt;
 &lt;p align=&#34;center&#34;&gt;
   &lt;img width=&#34;500&#34; src=&#34;img/windows_insider_greyed.png&#34;&gt;
 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you have completed the registration you will need to check for updates and let Windows install the new insider build.&lt;/p&gt;
 &lt;p align=&#34;center&#34;&gt;
   &lt;img width=&#34;500&#34; src=&#34;img/windows_insider_update.png&#34;&gt;
 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once done you should restart your computer&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;turn-on-linux-subsystem-feature&#34;&gt;Turn on linux subsystem feature&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open Windows PowerShell as administrator and run the commands:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You will need to restart your computer again&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;download-the-linux-distro&#34;&gt;Download the linux distro&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-ca/p/ubuntu/9nblggh4msv6?rtc=1&amp;amp;activetab=pivot:overviewtab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-ca/p/debian/9msvkqc78pk6?rtc=1&amp;amp;activetab=pivot:overviewtab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Debian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the distro&amp;rsquo;s page, select &lt;strong&gt;Get&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once done installing, open up &lt;strong&gt;Powershell&lt;/strong&gt; as administrator and run (replace distro with the name of the distro you installed):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wsl --set-version [Distro] 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wsl --set-default-version 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;finalizing&#34;&gt;Finalizing&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first time a newly installed distro runs, a Console window will open, and you&amp;rsquo;ll be asked to wait for a minute or two for the installation to complete&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once installation is complete, you will be prompted to create a new user account (and its password)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most distros ship with an empty/minimal package catalog. You should regularly be updating your package catalog, and upgrading your installed packages using your distro&amp;rsquo;s preferred package manager&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Install Terminator Linux Emulator</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/wsl_terminator/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/wsl_terminator/</guid>
      <description>&lt;h2 id=&#34;installing-an-x-server&#34;&gt;Installing an X Server&lt;/h2&gt;
&lt;p&gt;To run an X Window application, you will need to have an X Server installed and running on your Windows 10 machine. The most popular application is: &lt;a href=&#34;https://sourceforge.net/projects/vcxsrv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VcXsrv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After installing, VcXsrv creates a desktop shortcut. To start the server in multi-window mode run the following command in a command prompt:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;&amp;quot;C:\Program Files\VcXsrv\vcxsrv.exe&amp;quot; :0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl -dpi auto
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configuring-terminator&#34;&gt;Configuring Terminator&lt;/h2&gt;
&lt;p&gt;Once VcXsrv is installed, the next step is to install Terminator on WSL Bash:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install terminator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Terminator will not initalize a config file so you will need to do this manually:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mkdir -p ~/.config/terminator
touch ~/.config/terminator/config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Try launching Terminator by specifying the X Display to connect to (:0) in the linux shell:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;DISPLAY=:0 terminator &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you receive an error about D-Bus (&lt;code&gt;No D-BUS daemon running&lt;/code&gt;) then press &lt;code&gt;CTRL+C&lt;/code&gt; to abort the previous command and run the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install dbus-x11
sudo service dbus start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have completed the above run the previous command again:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;DISPLAY=:0 terminator &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A nice Terminator window should pop up.&lt;/p&gt;
&lt;h2 id=&#34;installing-zsh&#34;&gt;Installing Zsh&lt;/h2&gt;
&lt;p&gt;The next step is to install Zsh with oh-my-zsh. Installation is straightfoward:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install curl wget git zsh
curl -L https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may receive a message &lt;code&gt;Password: chsh: PAM: Authentication failure&lt;/code&gt; you can ignore this.&lt;/p&gt;
&lt;p&gt;Set the theme to &amp;ldquo;ys&amp;rdquo; at line 11 by replacing &lt;code&gt;robbyrussell&lt;/code&gt; in &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;vi ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;ZSH_THEME=&amp;quot;ys&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have never used &lt;code&gt;vi&lt;/code&gt; editor before, you will need to press the &lt;code&gt;i&lt;/code&gt; key to enter inout mode to make changes. Once you have made the change you will need to exit input mode by pressing &lt;code&gt;esc&lt;/code&gt;. In order to exit the editor and save you need to press &lt;code&gt;:&lt;/code&gt; followed by &lt;code&gt;wq&lt;/code&gt; to exit the editor with save.&lt;/p&gt;
&lt;p&gt;The only problem with Bash in WSL is it will always run Bash instead of Zsh. To get around that, add this to the end of your &lt;code&gt;~/.bashrc&lt;/code&gt; which will launch zsh instead when it starts up:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;vi ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;if [ -t 1 ]; then
  exec zsh
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;terminator-colorscheme&#34;&gt;Terminator Colorscheme&lt;/h2&gt;
&lt;p&gt;The next thing is to change the default Terminator colorscheme to Solarized Dark. The easiest way to do this, is to use the awesome node package &lt;a href=&#34;https://github.com/base16-builder/base16-builder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;base16-builder&lt;/a&gt;. You need to first install Node.js:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -
sudo apt install nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have installed Node.js you can then run the base-16builder install:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo npm install --global base16-builder
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to change directory access to the &lt;code&gt;configstore&lt;/code&gt; directory just created:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo chown -R [your_username] /home/[your_username]/.config/configstore
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you need to apply the scheme to the terminator config file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;mkdir -p .config/terminator
base16-builder -s solarized -t terminator -b dark &amp;gt; .config/terminator/config
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;dircolors&#34;&gt;Dircolors&lt;/h2&gt;
&lt;p&gt;To change the dircolors you can use &lt;a href=&#34;https://github.com/seebi/dircolors-solarized&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Solarized dircolors&lt;/a&gt; on Github and downloaded them to &lt;code&gt;.dir_colors&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;wget https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.256dark
mv dircolors.256dark .dir_colors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, added this to your &lt;code&gt;.zshrc&lt;/code&gt; to eval the Solarized dircolors on startup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;if [ -f ~/.dir_colors ]; then
  eval `dircolors ~/.dir_colors`
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;launching-terminator-directly&#34;&gt;Launching Terminator Directly&lt;/h2&gt;
&lt;p&gt;To launch a hidden command window using the WShell Object in VBS you need to type the folowing script into a text document.&lt;/p&gt;
&lt;p&gt;Right click on your desktop and create a new text doc. Then copy the following and save the file with the .vbs extension (e.g. startTerminator.vbs):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;args = &amp;quot;-c&amp;quot; &amp;amp; &amp;quot; -l &amp;quot; &amp;amp; &amp;quot;&amp;quot;&amp;quot;DISPLAY=:0 terminator&amp;quot;&amp;quot;&amp;quot;
WScript.CreateObject(&amp;quot;Shell.Application&amp;quot;).ShellExecute &amp;quot;bash&amp;quot;, args, &amp;quot;&amp;quot;, &amp;quot;open&amp;quot;, 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Move this &lt;code&gt;.vbs&lt;/code&gt; file into a safe place such as &amp;ldquo;C:\Users[your_username]&amp;rdquo;. Right click on the file and &amp;lsquo;Send to&amp;rsquo; the desktop as a shortcut. Right click on the new shortcut and select properties. In the &amp;lsquo;Target&amp;rsquo; field type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Windows\System32\wscript.exe C:\Users\*[your_username]*\startTerminator.vbs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Click &amp;lsquo;Apply&amp;rsquo;. You can then set the icon of the shortcut by saving &lt;a href=&#34;https://www.google.com/imgres?imgurl=http://www.iconarchive.com/download/i89875/alecive/flatwoken/Apps-Terminator.ico&amp;amp;imgrefurl=http://www.iconarchive.com/show/flatwoken-icons-by-alecive/Apps-Terminator-icon.html&amp;amp;docid=q0xx5aXq6WGXIM&amp;amp;tbnid=izoeFerwzIqyVM:&amp;amp;vet=1&amp;amp;w=256&amp;amp;h=256&amp;amp;source=sh/x/im&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this icon file&lt;/a&gt; to the same place you saved the &lt;code&gt;.vbs&lt;/code&gt; file. Right click on the shortcut again, properties and at the bottom select &amp;lsquo;Change Icon&amp;hellip;&amp;rsquo;. From here you can select the icon file you just downloaded.&lt;/p&gt;
&lt;p&gt;In the &amp;lsquo;Start in&amp;rsquo; field type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%USERPROFILE%
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s impossible to have Termiator start in your Linux home directory through this method since that path is not &amp;ldquo;known&amp;rdquo; to Windows. To get around it, add this to your .zshrc so it CD&amp;rsquo;s to your home directory on startup:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;vi ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;if [ -t 1 ]; then
  cd ~
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;other-customizations&#34;&gt;Other customizations&lt;/h2&gt;
&lt;p&gt;If you want to further modify your terminator theme you can add lines to the file &lt;code&gt;~/.config/terminator/config&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To change the opening size of the terminal window add the variable &lt;code&gt;size&lt;/code&gt; under layouts:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;vi ~/.config/terminator/config
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[layouts]
  [[default]]
    [[[child1]]]
      parent = window0
      profile = Base16 Solarized Dark
      type = Terminal
    [[[window0]]]
      parent = &amp;quot;&amp;quot;
      size = 1594, 465
      type = Window
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Close terminator and re-open.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Segmentation and detection of physical activities during a sitting task in Parkinsonâs disease participants using multiple inertial sensors</title>
      <link>https://greydongilmore.github.io/publication/2017_memar_segmentation/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2017_memar_segmentation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Using Wearable Technology to Generate Objective Parkinsonâs Disease Dyskinesia Severity Score: Possibilities for Home Monitoring</title>
      <link>https://greydongilmore.github.io/publication/2017_delrobaei_dyskinesia/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2017_delrobaei_dyskinesia/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The current state of postoperative imaging in the presence of deep brain stimulation electrodes</title>
      <link>https://greydongilmore.github.io/publication/2017_gilmore_dbsimaging/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2017_gilmore_dbsimaging/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dcm2niix Installation</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/dcm2niix/</link>
      <pubDate>Sun, 28 May 2017 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/dcm2niix/</guid>
      <description>&lt;h2 id=&#34;run-install&#34;&gt;Run Install&lt;/h2&gt;
&lt;p&gt;Run the following code in a linux terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install dcm2niix
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-dependencies&#34;&gt;Install Dependencies&lt;/h2&gt;
&lt;p&gt;There are a few packages that allow dcm2niix to run faster:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt-get install python-gdcm
sudo apt-get install pigz
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Future Perspectives: Assessment Tools and Rehabilitation in the New Age</title>
      <link>https://greydongilmore.github.io/publication/2017_gilmore_perspectives/</link>
      <pubDate>Wed, 22 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2017_gilmore_perspectives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mount Remote Drive with SSHFS</title>
      <link>https://greydongilmore.github.io/post/windows_docs/windows_sshfs/</link>
      <pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/windows_docs/windows_sshfs/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the latest stable installer of &lt;a href=&#34;https://github.com/billziss-gh/winfsp/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WinFSP&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the latest stable installer of &lt;a href=&#34;https://github.com/billziss-gh/sshfs-win/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSHFS-Win&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open &lt;strong&gt;File Explorer&lt;/strong&gt;, right-click on &lt;strong&gt;This PC&lt;/strong&gt; and choose &lt;strong&gt;Map network drive&lt;/strong&gt;. Choose a drive to mount at and enter the following in the folder field:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;\\sshfs\[your_login_name]@graham.computecanada.ca/projects/rrg-akhanf/cfmm-bids
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure you check the box &lt;strong&gt;Connect using different credentials&lt;/strong&gt; if your computer login password is different from Sharcnet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img width=&#34;500&#34; src=&#34;img/map_network_sshfs.png&#34;&gt;
&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;You should then see the network drive in your file explorer!&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&#34;center&#34;&gt;
  &lt;img width=&#34;600&#34; src=&#34;img/drive_directory.png&#34;&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Example Project</title>
      <link>https://greydongilmore.github.io/project/example/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/project/example/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;
&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;
&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;
&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;
&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deep brain stimulation and its effects on Parkinson disease spatiotemporal gait parameters</title>
      <link>https://greydongilmore.github.io/publication/2015_gilmore_msc/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/publication/2015_gilmore_msc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Activating Windows Linux Subsystem (WSL)</title>
      <link>https://greydongilmore.github.io/post/wsl_docs/wsl/</link>
      <pubDate>Wed, 28 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/post/wsl_docs/wsl/</guid>
      <description>&lt;h2 id=&#34;turn-on-linux-subsystem-feature&#34;&gt;Turn on linux subsystem feature&lt;/h2&gt;
&lt;p&gt;Open Windows PowerShell as administrator and run the command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart your computer when prompted.&lt;/p&gt;
&lt;h2 id=&#34;download-the-linux-distro&#34;&gt;Download the linux distro&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-ca/p/ubuntu/9nblggh4msv6?rtc=1&amp;amp;activetab=pivot:overviewtab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-ca/p/debian/9msvkqc78pk6?rtc=1&amp;amp;activetab=pivot:overviewtab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Debian&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the distro&amp;rsquo;s page, select &amp;ldquo;Get&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first time a newly installed distro runs, a Console window will open, and you&amp;rsquo;ll be asked to wait for a minute or two for the installation to complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once installation is complete, you will be prompted to create a new user account (and its password).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most distros ship with an empty/minimal package catalog. I strongly recommend regularly updating your package catalog, and upgrading your installed packages using your distro&amp;rsquo;s preferred package manager.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;add-link-to-the-linux-subsystem-in-windows-quick-access&#34;&gt;Add link to the linux subsystem in Windows Quick Access&lt;/h2&gt;
&lt;p&gt;Depending on the version of linux you installed, the absolute path will be found either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;C:\Users\*[your_username]*\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_*[unique_code]*\LocalState\rootfs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:\Users\*[your_username]*\AppData\Local\lxss&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When you find the correct location, right click on the parent folder and select &amp;lsquo;Pin to Quick Access&amp;rsquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://greydongilmore.github.io/admin/config.yml</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/admin/config.yml</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://greydongilmore.github.io/courses/ml_intro/05_linear_regression/05_01_linear_regression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/05_linear_regression/05_01_linear_regression/</guid>
      <description>&lt;h1 id=&#34;linear-regression&#34;&gt;Linear Regression&lt;/h1&gt;
&lt;p&gt;The linear regression (LR) model is a simple machine learning approach used for target variables that are continuous (i.e. variables that are real-valued). The LR model takes as its input both a vector of features (conventionally labeled &lt;strong&gt;X&lt;/strong&gt;) and a vector of labels (&lt;strong&gt;y&lt;/strong&gt;). Often different terminology is used âcalling &lt;strong&gt;X&lt;/strong&gt; our set of variables or predictors, and &lt;strong&gt;y&lt;/strong&gt; our outcome or dependent variableâbut the idea is the same. The data are plotted, and a straight line is then fit to these data points. The objective is to fit the line to the data points so that the distance between the line and points are minimized.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://greydongilmore.github.io/courses/ml_intro/05_linear_regression/05_02_linear_regression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/05_linear_regression/05_02_linear_regression/</guid>
      <description>&lt;h1 id=&#34;linear-regression&#34;&gt;Linear Regression&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s return to our running house price-prediction example. Predicting sales price from the features is a regression problem, because sale price varies continuously. What we&amp;rsquo;re trying to find is some optimal function that, given a matrix of feature scores, can produce a set of continuous values that best approximates (for whatever definition of &amp;ldquo;best&amp;rdquo; we like) the true house price of our houses.&lt;/p&gt;
&lt;p&gt;First we import the required libraries then investigate the data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

all_data = pd.read_csv(&#39;../data/house_prices.csv&#39;, sep=&#39;,&#39;, index_col=0).reset_index(drop=True)

all_data.info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 1460 entries, 0 to 1459
Data columns (total 80 columns):
MSSubClass       1460 non-null int64
MSZoning         1460 non-null object
LotFrontage      1201 non-null float64
LotArea          1460 non-null int64
Street           1460 non-null object
Alley            91 non-null object
LotShape         1460 non-null object
LandContour      1460 non-null object
Utilities        1460 non-null object
LotConfig        1460 non-null object
LandSlope        1460 non-null object
Neighborhood     1460 non-null object
Condition1       1460 non-null object
Condition2       1460 non-null object
BldgType         1460 non-null object
HouseStyle       1460 non-null object
OverallQual      1460 non-null int64
OverallCond      1460 non-null int64
YearBuilt        1460 non-null int64
YearRemodAdd     1460 non-null int64
RoofStyle        1460 non-null object
RoofMatl         1460 non-null object
Exterior1st      1460 non-null object
Exterior2nd      1460 non-null object
MasVnrType       1452 non-null object
MasVnrArea       1452 non-null float64
ExterQual        1460 non-null object
ExterCond        1460 non-null object
Foundation       1460 non-null object
BsmtQual         1423 non-null object
BsmtCond         1423 non-null object
BsmtExposure     1422 non-null object
BsmtFinType1     1423 non-null object
BsmtFinSF1       1460 non-null int64
BsmtFinType2     1422 non-null object
BsmtFinSF2       1460 non-null int64
BsmtUnfSF        1460 non-null int64
TotalBsmtSF      1460 non-null int64
Heating          1460 non-null object
HeatingQC        1460 non-null object
CentralAir       1460 non-null object
Electrical       1459 non-null object
1stFlrSF         1460 non-null int64
2ndFlrSF         1460 non-null int64
LowQualFinSF     1460 non-null int64
GrLivArea        1460 non-null int64
BsmtFullBath     1460 non-null int64
BsmtHalfBath     1460 non-null int64
FullBath         1460 non-null int64
HalfBath         1460 non-null int64
BedroomAbvGr     1460 non-null int64
KitchenAbvGr     1460 non-null int64
KitchenQual      1460 non-null object
TotRmsAbvGrd     1460 non-null int64
Functional       1460 non-null object
Fireplaces       1460 non-null int64
FireplaceQu      770 non-null object
GarageType       1379 non-null object
GarageYrBlt      1379 non-null float64
GarageFinish     1379 non-null object
GarageCars       1460 non-null int64
GarageArea       1460 non-null int64
GarageQual       1379 non-null object
GarageCond       1379 non-null object
PavedDrive       1460 non-null object
WoodDeckSF       1460 non-null int64
OpenPorchSF      1460 non-null int64
EnclosedPorch    1460 non-null int64
3SsnPorch        1460 non-null int64
ScreenPorch      1460 non-null int64
PoolArea         1460 non-null int64
PoolQC           7 non-null object
Fence            281 non-null object
MiscFeature      54 non-null object
MiscVal          1460 non-null int64
MoSold           1460 non-null int64
YrSold           1460 non-null int64
SaleType         1460 non-null object
SaleCondition    1460 non-null object
SalePrice        1460 non-null int64
dtypes: float64(3), int64(34), object(43)
memory usage: 912.6+ KB
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Select only columns that are numeric
all_data = all_data.select_dtypes([&#39;number&#39;])

# Remove any rows that contain NaN
for ifeature in list(all_data):
    all_data = all_data[pd.notnull(all_data[ifeature])]

all_data.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(1121, 37)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s also plot our target variable, Sales Price, to see what the distribution looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot(all_data[&#39;SalePrice&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;05_02_linear_regression_files/05_02_linear_regression_4_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;training-a-linear-regression-model&#34;&gt;Training a Linear Regression Model&lt;/h2&gt;
&lt;p&gt;We will need to first split up our data into an &lt;strong&gt;X&lt;/strong&gt; array that contains the features to train on, and a &lt;strong&gt;y&lt;/strong&gt; array with the target variable, in this case the Sale Price. We start by setting the X and y variables, split into train and test sets using scikit learns &lt;strong&gt;train_test_split&lt;/strong&gt; function and initialize the &lt;strong&gt;LinearRegression&lt;/strong&gt; estimator:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.model_selection import train_test_split

# Set input features and output variable
y = all_data[&#39;SalePrice&#39;]
X = all_data.drop([&#39;SalePrice&#39;], axis =1)

# Split data into test and train sets
X_train, X_test, y_train, y_test = train_test_split(X, y.to_numpy().ravel(), test_size=0.30, random_state=101)

# OLS (and many other variants of regression) is housed in the linear_model module
from sklearn.linear_model import LinearRegression

# initialize the model
lr_model = LinearRegression()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;LinearRegression&lt;/strong&gt; estimator, unlike many others, has very few configurable parameters. Above, we initialize it with all of the default values by passing no arguments to the function. Now we&amp;rsquo;re ready to fit some data! We can do that by calling the &lt;strong&gt;.fit()&lt;/strong&gt; method. This will be true for every &lt;strong&gt;Estimator&lt;/strong&gt; in scikit-learn. We will use our training sub-datasets we created:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Fit the model
lr_model.fit(X_train, y_train);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have a fitted model we need to evaluate the accuracy of this training process. We always want to evaluate the trained model prior to applying it to test data.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# The sklearn convention is to denote fitted parameters with a trailing underscore
print(&#39;Model y intercept:&#39;,lr_model.intercept_,&#39;\n&#39;)
print(&#39;Model feature coefficients:&#39;,lr_model.coef_,&#39;\n&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Model y intercept: -1348228.3926262031 

Model feature coefficients: [-8.75772924e+01  5.95600326e+01  1.18930737e+00  1.38647884e+04
  4.91899261e+03  4.10628404e+02  1.81486446e+02  1.51819223e+01
  2.69056767e+01 -1.07411164e+00 -3.69107465e-01  2.54624576e+01
  1.84098928e+01  2.14677482e+01  7.35941390e+00  4.72370548e+01
 -8.14206679e+02 -6.09318362e+03 -1.52754837e+03 -1.82409326e+03
 -1.58292462e+04 -2.59304669e+04  5.44696494e+03 -4.36801780e+01
 -4.51893373e+01  4.11495671e+03  2.38219900e+01  4.82163185e+00
  2.38325092e+01  3.04386635e+01  9.87034508e+00  4.14229568e+01
  1.26489368e+02 -2.30107736e+00  2.62862323e+02  1.01150684e+02] 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use these parameter estimates (y intercept and coefficients) to manually construct and apply a prediction equation (i.e., $\hat{y} = -0.557 + 1.43x$) if we want to. The other thing we can look at is the coefficient.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;coeff_df = pd.DataFrame(lr_model.coef_,X.columns,columns=[&#39;Coefficient&#39;])
coeff_df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Coefficient&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;MSSubClass&lt;/th&gt;
      &lt;td&gt;-87.577292&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;LotFrontage&lt;/th&gt;
      &lt;td&gt;59.560033&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;LotArea&lt;/th&gt;
      &lt;td&gt;1.189307&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;OverallQual&lt;/th&gt;
      &lt;td&gt;13864.788358&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;OverallCond&lt;/th&gt;
      &lt;td&gt;4918.992610&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Interpreting the coefficients:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Holding all other features fixed, a 1 unit increase in &lt;strong&gt;Lot Frontage&lt;/strong&gt; is associated with an **increase of $59.56 **.&lt;/li&gt;
&lt;li&gt;Holding all other features fixed, a 1 unit increase in &lt;strong&gt;Lot Area&lt;/strong&gt; is associated with an **increase of $1.18 **.&lt;/li&gt;
&lt;li&gt;Holding all other features fixed, a 1 unit increase in &lt;strong&gt;Overall Condition&lt;/strong&gt; is associated with an **increase of $4918.99 **.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next step is to use the trained model to predict new house Sale Price on new data. We do this by making use of the &lt;strong&gt;.predict()&lt;/strong&gt; method that all &lt;strong&gt;Estimator&lt;/strong&gt; classes implement. For example, here are the predicted scores for our &lt;strong&gt;X&lt;/strong&gt; test data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lr_predictions = lr_model.predict(X_test)

plt.scatter(y_test,lr_predictions);
plt.xlabel(&#39;Test Data Actual Sales Price&#39;);
plt.ylabel(&#39;Predicted Sales Price&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;05_02_linear_regression_files/05_02_linear_regression_15_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We can also plot the residual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot((y_test-lr_predictions),bins=50);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;05_02_linear_regression_files/05_02_linear_regression_17_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Just to underscore how little we had to do, here&amp;rsquo;s the whole example again, in three lines:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Initialize the linear regression estimator
lr_model = LinearRegression()

# Fit the model
lr_model.fit(X_train, y_train)

# Generate predictions
lr_predictions = lr_model.predict(X_test)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;performance-metrics&#34;&gt;Performance metrics&lt;/h1&gt;
&lt;p&gt;Once we&amp;rsquo;ve fit our model, it&amp;rsquo;s natural to want to know how well it performs. In machine learning, the focus of model performance is on prediction; typically, we have some objective quantitative metric we care about, and to the degree that a model can produce better values on that metric, we incline to evaluate it more favorably. This doesn&amp;rsquo;t mean that we have to single-mindedly base our evaluation of model on just one quantity; in practice, many other considerations may come into play (e.g., computational efficiency, interpretability, etc.). The point is mainly that machine learning practitionersâat least in applied settingsâtend to care much more than traditional scientists do about what models can actually &lt;em&gt;do&lt;/em&gt;, and much less about what&amp;rsquo;s going on inside them.&lt;/p&gt;
&lt;h2 id=&#34;the-coefficient-of-determination&#34;&gt;The coefficient of determination&lt;/h2&gt;
&lt;p&gt;For the rest of this tutorial, we&amp;rsquo;re going to focus our attention on one particular metric of predictive performance: the coefficient of determination, or $R^2$. $R^2$ quantifies the proportion of variance in the outcome variable (e.g., house price) explained by the fitted model:&lt;/p&gt;
&lt;p&gt;R-squared (R2) is the measure used to determine which line minimizes this distance:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.codecogs.com/eqnedit.php?latex=R^{2}&amp;space;=&amp;space;\frac{Explained&amp;space;variation}{Total&amp;space;variation}&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?R^{2}&amp;space;=&amp;space;\frac{Explained&amp;space;variation}{Total&amp;space;variation}&#34; title=&#34;R^{2} = \frac{Explained variation}{Total variation}&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;$R^2$ is the most widely used measure of performance in the individual differences literature, and we&amp;rsquo;ll stick with tradition here. But this shouldn&amp;rsquo;t be taken as an indication that there&amp;rsquo;s anything particularly special about $R^2$. In fact, in many applications, it&amp;rsquo;s a pretty bad metric, because it&amp;rsquo;s defined with reference to the relative variation in a particular sample, and completely ignores the absolute deviation of predictions from the true scores (i.e., a model can have an $R^2$ of 1 while generating a predicted score distribution entirely outside the range of the true scores). For our purposes though, $R^2$ is a sensible metric, because for most individual differences variables, absolute scores don&amp;rsquo;t really mean anything anywayâwe&amp;rsquo;re almost always interested in how variation across individuals relates to variation in some other measure or construct.&lt;/p&gt;
&lt;p&gt;Here are three other common evaluation metrics for machine learning problems:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mean Absolute Error&lt;/strong&gt; (MAE) is the mean of the absolute value of the errors:&lt;/p&gt;
&lt;p&gt;$$\frac 1n\sum_{i=1}^n|y_i-\hat{y}_i|$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mean Squared Error&lt;/strong&gt; (MSE) is the mean of the squared errors:&lt;/p&gt;
&lt;p&gt;$$\frac 1n\sum_{i=1}^n(y_i-\hat{y}_i)^2$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Root Mean Squared Error&lt;/strong&gt; (RMSE) is the square root of the mean of the squared errors:&lt;/p&gt;
&lt;p&gt;$$\sqrt{\frac 1n\sum_{i=1}^n(y_i-\hat{y}_i)^2}$$&lt;/p&gt;
&lt;p&gt;Comparing these metrics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MAE&lt;/strong&gt; is the easiest to understand, because it&amp;rsquo;s the average error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MSE&lt;/strong&gt; is more popular than MAE, because MSE &amp;ldquo;punishes&amp;rdquo; larger errors, which tends to be useful in the real world.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RMSE&lt;/strong&gt; is even more popular than MSE, because RMSE is interpretable in the &amp;ldquo;y&amp;rdquo; units.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these are &lt;strong&gt;loss functions&lt;/strong&gt;, because we want to minimize them.&lt;/p&gt;
&lt;h2 id=&#34;how-well-did-we-do&#34;&gt;How well did we do?&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s see how well the linear regression model we fitted earlier (using the house features as predictors) explains the variance in sales price. We&amp;rsquo;ll make use of scikit-learn&amp;rsquo;s &lt;strong&gt;metrics&lt;/strong&gt; module, which contains a large number of predefined performance metrics. As is true of &lt;strong&gt;Estimator&lt;/strong&gt; objects, all metrics in scikit-learn follow the same usage pattern: we pass in the true scores and the model&amp;rsquo;s predicted scores, respectively.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# the metrics module contains predefined scoring functions
# for commonly used metrics like r^2, MSE, etc. 
from sklearn import metrics

# scoring functions are called by passing an array of
# true scores and and an array of predicted scores as
# inputs
print(&#39;Model score:&#39;, metrics.r2_score(y_test, lr_predictions))
print(&#39;MAE:&#39;, metrics.mean_absolute_error(y_test, lr_predictions))
print(&#39;MSE:&#39;, metrics.mean_squared_error(y_test, lr_predictions))
print(&#39;RMSE:&#39;, np.sqrt(metrics.mean_squared_error(y_test, lr_predictions)))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Model score: 0.5238801531365112
MAE: 26110.712069211004
MSE: 3851956330.37256
RMSE: 62064.130787215254
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the $R^2$ score we get the amount of variance explained by the model, which means we can explain about 52% of the variance in sales price using 27 features of the home.&lt;/p&gt;
&lt;p&gt;For convenience, scikit-learn estimators have a &lt;strong&gt;.score()&lt;/strong&gt; method you can use as an alternative to the above. Instead of generating predicted scores and then explicitly feeding them to a metric function like &lt;strong&gt;r2_score&lt;/strong&gt;, you can call &lt;strong&gt;.score()&lt;/strong&gt; directly on the estimator after the &lt;strong&gt;fit()&lt;/strong&gt; step, and the prediction will be done implicitly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Initialize the estimator and fit the data, just like before
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)
# Now instead of generating predictions explicitly,
# we just call .score(). Note that we lose the ability to
# specify the metric: LinearRegression.score() always uses
# the R^2 metric.
lr_model.score(X_test, y_test)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;0.5238801531365112
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also look at how well we did visually by plotting the predicted vs. actual sales price values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;range_plot = range(100,300)

fig, ax = plt.subplots(figsize=(10,6))
lr_1 = ax.plot(range_plot, lr_predictions[range_plot], color=&#39;blue&#39;, label=&#39;Linear Regression&#39;)
lr_2 = ax.plot(range_plot, y_test[range_plot], color=&#39;red&#39;, label = &#39;Actual&#39;)
ax.set_ylim(0, 800000)
ax.set_xlim(range_plot[0], range_plot[-1])
plt.title(&#39;Linear Regression: Actual vs. Predicted Sales Price&#39;, fontweight=&#39;bold&#39;)
plt.xlabel(&#39;Sample&#39;, fontweight=&#39;bold&#39;)
plt.ylabel(&#39;Sales Price (USD)&#39;, fontweight=&#39;bold&#39;)
plt.legend(handles=[lr_1[0],lr_2[0]])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;05_02_linear_regression_files/05_02_linear_regression_26_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>https://greydongilmore.github.io/courses/ml_intro/06_logistic_regression/06_01_logistic_regression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://greydongilmore.github.io/courses/ml_intro/06_logistic_regression/06_01_logistic_regression/</guid>
      <description>&lt;h1 id=&#34;logistic-regression&#34;&gt;Logistic Regression&lt;/h1&gt;
&lt;p&gt;For this section we will work with the &lt;a href=&#34;https://www.kaggle.com/c/titanic&#34; target=&#34;_blank&#34;&gt;Titanic Data Set from Kaggle&lt;/a&gt;. We&amp;rsquo;ll be trying to predict a classification problem - survival or deceased.
Let&amp;rsquo;s begin our understanding of implementing Logistic Regression in Python for classification. We&amp;rsquo;ll use a &amp;ldquo;semi-cleaned&amp;rdquo; version of the titanic data set, if you use the data set hosted directly on Kaggle, you may need to do some additional cleaning not shown in this notebook.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s import some libraries and load the dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

train = pd.read_csv(&#39;../data/titanic_train.csv&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s view the data present in the dataset:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;PassengerId&lt;/th&gt;
      &lt;th&gt;Survived&lt;/th&gt;
      &lt;th&gt;Pclass&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Sex&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;SibSp&lt;/th&gt;
      &lt;th&gt;Parch&lt;/th&gt;
      &lt;th&gt;Ticket&lt;/th&gt;
      &lt;th&gt;Fare&lt;/th&gt;
      &lt;th&gt;Cabin&lt;/th&gt;
      &lt;th&gt;Embarked&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Braund, Mr. Owen Harris&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;A/5 21171&lt;/td&gt;
      &lt;td&gt;7.2500&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Cumings, Mrs. John Bradley (Florence Briggs Th...&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;PC 17599&lt;/td&gt;
      &lt;td&gt;71.2833&lt;/td&gt;
      &lt;td&gt;C85&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Heikkinen, Miss. Laina&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;STON/O2. 3101282&lt;/td&gt;
      &lt;td&gt;7.9250&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Futrelle, Mrs. Jacques Heath (Lily May Peel)&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;113803&lt;/td&gt;
      &lt;td&gt;53.1000&lt;/td&gt;
      &lt;td&gt;C123&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Allen, Mr. William Henry&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;373450&lt;/td&gt;
      &lt;td&gt;8.0500&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h1 id=&#34;exploratory-data-analysis&#34;&gt;Exploratory Data Analysis&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s begin some exploratory data analysis! We&amp;rsquo;ll start by checking out missing data!&lt;/p&gt;
&lt;h2 id=&#34;missing-data&#34;&gt;Missing Data&lt;/h2&gt;
&lt;p&gt;We can use seaborn to create a simple heatmap to see where we are missing data!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap=&#39;viridis&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;06_01_logistic_regression_files/06_01_logistic_regression_5_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We&amp;rsquo;ll probably drop this later, or change it to another feature like &amp;ldquo;Cabin Known: 1 or 0&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s continue on by visualizing some more of the data such as our target variable survival:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.set_style(&#39;whitegrid&#39;);
sns.countplot(x=&#39;Survived&#39;,data=train,palette=&#39;RdBu_r&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;06_01_logistic_regression_files/06_01_logistic_regression_7_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We can manipulate the data a bit and look at the difference in survival betwen men and women:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.set_style(&#39;whitegrid&#39;);
sns.countplot(x=&#39;Survived&#39;,hue=&#39;Sex&#39;,data=train,palette=&#39;RdBu_r&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;06_01_logistic_regression_files/06_01_logistic_regression_9_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We can also split the data up based on the class level of the passengers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.set_style(&#39;whitegrid&#39;);
sns.countplot(x=&#39;Survived&#39;,hue=&#39;Pclass&#39;,data=train,palette=&#39;rainbow&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;06_01_logistic_regression_files/06_01_logistic_regression_11_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s now look at the distribution of age for the passengers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.distplot(train[&#39;Age&#39;].dropna(),kde=False,color=&#39;darkred&#39;,bins=30);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;06_01_logistic_regression_files/06_01_logistic_regression_13_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;data-cleaning&#34;&gt;Data Cleaning&lt;/h2&gt;
&lt;p&gt;We want to fill in missing age data instead of just dropping the missing age data rows. One way to do this is by filling in the mean age of all the passengers (imputation). However we can be smarter about this and check the average age by passenger class. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;plt.figure(figsize=(12, 7));
sns.boxplot(x=&#39;Pclass&#39;,y=&#39;Age&#39;,data=train,palette=&#39;winter&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;06_01_logistic_regression_files/06_01_logistic_regression_15_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We&amp;rsquo;ll use these average age values to impute based on Pclass for Age.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]
    
    if pd.isnull(Age):
        if Pclass == 1:
            return 37
        elif Pclass == 2:
            return 29
        else:
            return 24
    else:
        return Age
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now apply that function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train[&#39;Age&#39;] = train[[&#39;Age&#39;,&#39;Pclass&#39;]].apply(impute_age,axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&amp;rsquo;s check that heat map again!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap=&#39;viridis&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;06_01_logistic_regression_files/06_01_logistic_regression_21_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Great! Let&amp;rsquo;s go ahead and drop the Cabin column and the row in Embarked that is NaN.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train.drop(&#39;Cabin&#39;,axis=1,inplace=True);
train.dropna(inplace=True);

train.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;PassengerId&lt;/th&gt;
      &lt;th&gt;Survived&lt;/th&gt;
      &lt;th&gt;Pclass&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Sex&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;SibSp&lt;/th&gt;
      &lt;th&gt;Parch&lt;/th&gt;
      &lt;th&gt;Ticket&lt;/th&gt;
      &lt;th&gt;Fare&lt;/th&gt;
      &lt;th&gt;Embarked&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Braund, Mr. Owen Harris&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;A/5 21171&lt;/td&gt;
      &lt;td&gt;7.2500&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Cumings, Mrs. John Bradley (Florence Briggs Th...&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;PC 17599&lt;/td&gt;
      &lt;td&gt;71.2833&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Heikkinen, Miss. Laina&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;STON/O2. 3101282&lt;/td&gt;
      &lt;td&gt;7.9250&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Futrelle, Mrs. Jacques Heath (Lily May Peel)&lt;/td&gt;
      &lt;td&gt;female&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;113803&lt;/td&gt;
      &lt;td&gt;53.1000&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Allen, Mr. William Henry&lt;/td&gt;
      &lt;td&gt;male&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;373450&lt;/td&gt;
      &lt;td&gt;8.0500&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;converting-categorical-features&#34;&gt;Converting Categorical Features&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll need to convert categorical features to dummy variables using pandas. If we do not convert then our machine learning algorithm won&amp;rsquo;t be able to directly take in those features as inputs.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train.info()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
Int64Index: 889 entries, 0 to 890
Data columns (total 11 columns):
PassengerId    889 non-null int64
Survived       889 non-null int64
Pclass         889 non-null int64
Name           889 non-null object
Sex            889 non-null object
Age            889 non-null float64
SibSp          889 non-null int64
Parch          889 non-null int64
Ticket         889 non-null object
Fare           889 non-null float64
Embarked       889 non-null object
dtypes: float64(2), int64(5), object(4)
memory usage: 83.3+ KB
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;sex = pd.get_dummies(train[&#39;Sex&#39;],drop_first=True)
embark = pd.get_dummies(train[&#39;Embarked&#39;],drop_first=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train.drop([&#39;Sex&#39;,&#39;Embarked&#39;,&#39;Name&#39;,&#39;Ticket&#39;],axis=1,inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train = pd.concat([train,sex,embark],axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;train.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;PassengerId&lt;/th&gt;
      &lt;th&gt;Survived&lt;/th&gt;
      &lt;th&gt;Pclass&lt;/th&gt;
      &lt;th&gt;Age&lt;/th&gt;
      &lt;th&gt;SibSp&lt;/th&gt;
      &lt;th&gt;Parch&lt;/th&gt;
      &lt;th&gt;Fare&lt;/th&gt;
      &lt;th&gt;male&lt;/th&gt;
      &lt;th&gt;Q&lt;/th&gt;
      &lt;th&gt;S&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;22.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;7.2500&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;38.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;71.2833&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;26.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;7.9250&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;53.1000&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;35.0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;8.0500&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Great! Our data is ready for our model!&lt;/p&gt;
&lt;h1 id=&#34;building-a-logistic-regression-model&#34;&gt;Building a Logistic Regression model&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s start by splitting our data into a training set and test set (there is another test.csv file that you can play around with in case you want to use all this data for training).&lt;/p&gt;
&lt;h2 id=&#34;train-test-split&#34;&gt;Train Test Split&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(train.drop(&#39;Survived&#39;,axis=1), 
                                                    train[&#39;Survived&#39;], test_size=0.30, 
                                                    random_state=101)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;training-and-predicting&#34;&gt;Training and Predicting&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()
logmodel.fit(X_train,y_train)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;predictions = logmodel.predict(X_test)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s move on to evaluate our model!&lt;/p&gt;
&lt;h2 id=&#34;evaluation&#34;&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;We can check precision,recall,f1-score using classification report!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sklearn.metrics import classification_report

print(classification_report(y_test,predictions))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not so bad! You might want to explore other feature engineering and the other titanic_text.csv file, some suggestions for feature engineering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Try grabbing the Title (Dr.,Mr.,Mrs,etc..) from the name as a feature&lt;/li&gt;
&lt;li&gt;Maybe the Cabin letter could be a feature&lt;/li&gt;
&lt;li&gt;Is there any info you can get from the ticket?&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
