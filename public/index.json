[{"authors":null,"categories":null,"content":"I earned my Ph.D. in Biomedical Engineering at Western University, where I built open-source stereotactic planning software for functional neurosurgery. My work focuses on improving targeting accuracy and post-operative electrode localization for movement disorders and epilepsy through imaging, electrophysiology, and clinical software.\n","date":1744934400,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1744934400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I earned my Ph.D. in Biomedical Engineering at Western University, where I built open-source stereotactic planning software for functional neurosurgery. My work focuses on improving targeting accuracy and post-operative electrode localization for movement disorders and epilepsy through imaging, electrophysiology, and clinical software.","tags":null,"title":"Greydon Gilmore","type":"authors"},{"authors":null,"categories":null,"content":"This is an introductory tutorial on machine learning using the scikit-learn and Keras Python packages. Prerequisites are minimal; chiefly, I assume that the reader has a little bit of prior programming experience—preferably in Python. A passing familiarity with basic inferential statistical methods (primarily linear regression) is also helpful, but isn\u0026rsquo;t essential. Some of the material in thi tutorial is borrowed from Jake Vanderplas\u0026rsquo;s excellent scikit-learn tutorial. The main differences between the present tutorial and most others out there are that (a) this tutorial is more verbose than most (i.e., the emphasis is on conceptual understanding rather than just on learning the scikit-learn API), and (b) most of the examples are drawn from more unique datasets and contain application to real world examples.\nSoftware All of the code in this tutorial is written in Python. There is nothing intrinsically special about Python in the machine learning context; in principle, all of the examples and simulations in these pages could have been written in other languages (R, Matlab, etc.). Indeed, there are plenty of machine learning tutorials out there written in other languages.That said, Python does have a number of practical advantages over other languages. Chief among these is the fact that it\u0026rsquo;s currently the most widely used language in the data science and machine learning community. This means there are exceptional tools written in Python for virtually every domain of machine learning. Exhibit A is the scikit-learn package for machine learning. Scikit-learn is the world\u0026rsquo;s most widely used machine learning, and some of the reasons for its popularity will hopefully soon become clear. Scikit-learn is itself built on the numpy numerical computing library, which we\u0026rsquo;ll also use fairly regular. Exihbit B is the Keras package for machine learning. Keras is a high-level neural networks API, written in Python and capable of running on top of TensorFlow. It was developed with a focus on enabling fast experimentation.\nThe scikit-learn package Now that we know what machine learning is, let\u0026rsquo;s turn to the scikit-learn package. Scikit-learn is the most widely-used machine learning package in Python (and probably the most widely-used ML package, period). Its popularity stems from its simple, elegant API, stellar documentation, and comprehensive support for many of the most widely used machine learning algorithms (the main exception being deep learning, which we will use Keras for). Scikit-learn provides well-organized, high-quality tools for virtually all aspects of the typical machine learning workflow, including data loading and preprocessing, feature extraction and feature selection, dimensionality reduction, model selection and evaluation, and so on.\nPython Setup First you will need to install Python, depending on what operating system you are using there are different approaches.\nMac  Install Homebrew by opening a Terminal window and pasting the following line.  /usr/bin/ruby -e $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)  Homebrew asks you to enter your password so it can finalize the installation. Enter your user account password and hit enter Once Homebrew has finished installing, return to your terminal and run the following command:  brew install python3  Windows  You will need to download the windows python installer. Underneath the heading at the top that says Python Releases for Windows, click on the link for the Latest Python 3 Release - Python 3.x.x Scroll to the bottom and select either Windows x86-64 executable installer for 64-bit or Windows x86 executable installer for 32-bit Install by double-clicking on the downloaded file.  Linux  Open a terminal window and run the following commands:  sudo apt-get install python3.6 sudo apt install python3-pip  Python Interactor Several Python integrated development environments (IDE) exist to make writting Python code easier. The one I use the most, and I highly recommend, is Spyder IDE. Spyder is a powerful scientific environment written in Python, for Python, and designed by and for scientists, engineers and data analysts. It offers a unique combination of the advanced editing, analysis, debugging, and profiling functionality of a comprehensive development tool with the data exploration, interactive execution, deep inspection, and beautiful visualization capabilities of a scientific package.\nOnce you have installed Python, installing Spyder is straight forward. You will need to open a terminal or command prompt and type the following\npip install spyder  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"e2fd4b12992d1e7e0d36d6f54c764ce6","permalink":"https://greydongilmore.github.io/courses/ml_intro/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/ml_intro/","section":"courses","summary":"Tutorial page for slides and midterm/exam review material.","tags":null,"title":"Introduction To Machine Learning","type":"docs"},{"authors":null,"categories":null,"content":"Tutorial Slides Semester 2  Tutorial #13 PDF PowerPoint Tutorial #14 PDF PowerPoint Tutorial #15 PDF PowerPoint Tutorial #16 PDF PowerPoint Tutorial #17 PDF PowerPoint  Semester 1  Tutorial #1 PowerPoint Tutorial #2 PDF PowerPoint Tutorial #3 PDF PowerPoint Tutorial #4 PDF PowerPoint Tutorial #5 PDF PowerPoint Tutorial #6 PDF PowerPoint Tutorial #7 PDF PowerPoint Tutorial #8 PDF PowerPoint Tutorial #9 PDF PowerPoint Tutorial #10 PDF PowerPoint Tutorial #11 PDF PowerPoint Tutorial #12 PDF PowerPoint  Midterm Material Midterm 1  Review Slides PDF PowerPoint Practice Midterm PDF Worksheet - Blank PDF Worksheet - Answers PDF  Midterm 2  Review Slides PDF PowerPoint Checklist PDF Practice Midterm PDF Worksheet PDF  Midterm 3  Review Slides PDF PowerPoint Review Slides With Answers PDF PowerPoint Practice Worksheet - BLANK WORD Practice Worksheet - ANSWERS WORD Diagrams/Tables Worksheet - BLANK WORD Diagrams/Tables Worksheet - ANSWERS WORD  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"1655c6b5104ea1b3e1124b4b9c703594","permalink":"https://greydongilmore.github.io/courses/phys2130/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/phys2130/","section":"courses","summary":"Tutorial page for slides and midterm/exam review material.","tags":null,"title":"Phys 2130","type":"docs"},{"authors":null,"categories":null,"content":"Data pre-processing techniques generally refer to the addition, deletion, or transformation of training set data. Different models have different sensitivities to the type of predictors in the model; how the predictors enter the model is also important. Transformations of the data to reduce the impact of data skewness or outliers can lead to significant improvements in performance.\nIn general, the work required to make your dataset easy to analyze.\n Easy to use column names Fixing inconsistent variables Merging with other datasets Reshaping (melt, pivot, ect..) Dealing with missing values  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"de3e374e96860b2c5f2eb6941f2ed955","permalink":"https://greydongilmore.github.io/courses/ml_intro/03_01_data_preprocessing/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/03_01_data_preprocessing/","section":"courses","summary":"Data pre-processing techniques generally refer to the addition, deletion, or transformation of training set data. Different models have different sensitivities to the type of predictors in the model; how the predictors enter the model is also important.","tags":null,"title":"Data Processing Intro","type":"docs"},{"authors":null,"categories":null,"content":"What is machine learning? Here\u0026rsquo;s a working definition: machine learning is the field of science/engineering that seeks to build systems capable of learning from experience.\nThis is a very broad definition, and in practice, the set of activities that get labeled \u0026ldquo;machine learning\u0026rdquo; is pretty heterogeneous. However, two elements are common to nearly all machine learning applications: (a) the emphasis is on developing algorithms that can learn (semi-)autonomously from data, rather than static rule-based systems that must be explicitly designed or updated by humans; and (b) algorithm evaluation focuses heavily on the ability to meet objective quantitative targets.\nFundamentally, machine learning involves building mathematical models to help understand data. \u0026ldquo;Learning\u0026rdquo; enters the fray when we give these models tunable parameters that can be adapted to observed data; in this way the program can be considered to be \u0026ldquo;learning\u0026rdquo; from the data. Once these models have been fit to previously seen data, they can be used to predict and understand aspects of newly observed data.\nWithin the subsequent subsections we will cover the basics of machine learning including terminology and basic principles.\nExploratory Data Analysis In exploratory data analysis (EDA), a major component of the data science lifecycle, we summarize, visualize, and transform data in order to understand them more deeply. Through exploratory data analysis we seek to deeply understand our data. Maintaining \u0026ldquo;a state of flexibility\u0026rdquo; helps us know what to look for. Fluency with our computational tools allows us to conduct our search. In this chapter, we emphasize the necessary attitude as we introduce increasingly sophisticated tools. Although EDA varies between domains of study, we almost always begin EDA by understanding:\n The data types of columns and the granularity of rows in the dataset. The distributions of quantitative data and measures of center and spread. Relationships between quantities in the dataset.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6e5476c5613134682887dbbe9c95325b","permalink":"https://greydongilmore.github.io/courses/ml_intro/04_01_ml_basics/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/04_01_ml_basics/","section":"courses","summary":"What is machine learning? Here\u0026rsquo;s a working definition: machine learning is the field of science/engineering that seeks to build systems capable of learning from experience.\nThis is a very broad definition, and in practice, the set of activities that get labeled \u0026ldquo;machine learning\u0026rdquo; is pretty heterogeneous.","tags":null,"title":"ML Basics Intro","type":"docs"},{"authors":null,"categories":null,"content":"The following are simple operations you can perform within python. We start with very basic operations and work up to more complex operations such as defining functions and methods\n   Symbol Task Performed     + Addition   - Subtraction   / division   % mod   * multiplication   // floor division   ** to the power of    Arithmetic Operations The following are simple math expressions that can be done in Python.\n# Addition 1 + 1 # Multiplication 1 * 3 # Division 1 / 2 # Square 2 ** 4 # Find remainder - called modulus 4 % 2 # Find remainder - called modulus 5 % 2 # BEDMAS (2 + 3) * (5 + 5)  2  Variable Assignment A name that is used to denote something or a value is called a variable. When assigning variables, the variable name should be something meaningful. This way you will remeber what it is for. Variables can not start with a number or special character. In python, variables can be declared and values can be assigned to it as follows:\n# I prefer sepearting words in a variable with '_', you can also use camelCase name_of_var = 2 nameOfVar = 2 # Assign numbers to variables. These are now objects in Python. x = 2 y = 3 # Since they are objects you can now use them to perform operations z = x + y z # Multiple variables can be assigned with the same value at once x = y = 1 print (x,y)  1 1  Strings # When using strings you can use single quotes or double quotes 'single quotes' \u0026quot;double quotes\u0026quot; # If you want a string to contain an apostrophe then use double quotes around the string... \u0026quot; wrap lot's of other quotes\u0026quot;  'single quotes'  Printing variables x = 'hello' # Use the built-in function to print variables/objects out print(x) # Use the format function to set the values within the string enclosed by curly braces {} num = 12 name = 'Sam' # Either of these methods work... print('My number is: {one}, and my name is: {two}'.format(one=num,two=name)) print('My number is: {}, and my name is: {}'.format(num,name))  Lists # With only integers [1,2,3] # With integers and strings ['hi',1,[1,2]] # Adding new values to a list my_list = ['a','b','c'] my_list.append('d') print(my_list) # Indexing a list by the items index my_list[0] # Indexing using a slice notation : my_list[1:] # Replace existing values in list my_list[0] = 'NEW' print(my_list) # You can create nested lists as well nest = [1,2,3,[4,5,['target']]] nest[3] nest[3][2] nest[3][2][0]  ['a', 'b', 'c', 'd'] ['NEW', 'b', 'c', 'd'] 'target'  Dictionaries d = {'key1':'item1','key2':'item2'} d d['key1']  Booleans True  True  False  False  Tuples t = (1,2,3) t[0] # You can not assign items to a tuple like you can with a list t[0] = 'NEW'  Sets {1,2,3} {1,2,3,1,2,1,2,3,3,3,3,2,2,2,1,1,2}  {1, 2, 3}  Relational Operators    Symbol Task Performed     == True, if it is equal   != True, if not equal to   \u0026lt; less than   \u0026gt; greater than   \u0026lt;= less than or equal to   \u0026gt;= greater than or equal to    # False statements 1 \u0026gt; 2 'hi' == 'bye' # True statements 1 \u0026lt; 2 1 \u0026gt;= 1 1 \u0026lt;= 4 1 == 1  False  Logic Operators # Using 'and' to indicate both conditions need to be True (1 \u0026gt; 2) and (2 \u0026lt; 3) # Using 'or' to indicate only one conditions needs to be True (1 \u0026gt; 2) or (2 \u0026lt; 3) # You can have as many conditional statements as you want (1 == 2) or (2 == 3) or (4 == 4)  False  if,elif, else Statements # IF statement if 1 \u0026lt; 2: print('Yep!') # IF ELSE statement if 1 \u0026lt; 2: print('first') else: print('last') if 1 \u0026gt; 2: print('first') else: print('last') # IF, ELIF, ELSE statement if 1 == 2: print('first') elif 3 == 3: print('middle') else: print('Last')  Yep!  For Loops seq = [1,2,3,4,5] for item in seq: print(item) for item in seq: print('Yep') # You can name the iterator whatever you like for jelly in seq: print(jelly+jelly)  While Loops i = 1 while i \u0026lt; 5: print('i is: {}'.format(i)) i = i+1  i is: 1 i is: 2 i is: 3 i is: 4  range() function range(5) # Great for using in For loops for i in range(5): print(i) # You can use it to create lists list(range(5))  range(0, 5)  List comprehension x = [1,2,3,4] # Perform operations within a For loop and append the outputs to a list object out = [] for item in x: out.append(item**2) print(out)  A very useful technique in Python is the one line for loop:\n[item**2 for item in x]  Defining functions def my_func(param1='default'): \u0026quot;\u0026quot;\u0026quot; Docstring goes here. \u0026quot;\u0026quot;\u0026quot; print(param1) # To call your function you need to include brackets at the end my_func my_func()  Now that you have defined your function with an input you can provide new inputs to the function to perform an operation\n# You can either call the defined input varible for your function my_func(param1='new param') # Or you can just provide the input, remember if you have multiple function inputs the position of these inputs matter! my_func('new param')  new param  # Use the 'Return' function to return a value from within your function and assign it to a variable def square(x): return x**2 out = square(2) print(out)  Lambda, map and filter Instead of writing a function you can use the lambda function instead:\ndef times2(var): return var*2 times2(2) # lambda lambda var: var*2 # map seq = [1,2,3,4,5] map(times2,seq) # Combining lambda and map together you get list(map(times2,seq)) # Here is more detail list(map(lambda var: var*2,seq)) # Using the filter function to return values that meet a condition filter(lambda item: item%2 == 0,seq) list(filter(lambda item: item%2 == 0,seq))  [2, 4]  Methods One of the most useful aspects of the Python language is that everything is an object and has inherent methods.\nstring methods # Assign 'st' to be a string st = 'hello my name is Sam' # A string type in Python has several methods # To return all lowercase st.lower() # All uppercase st.upper() # Split the string at white spaces st.split() # You can use the split method to split at a character you want tweet = 'Go Sports! #Sports' tweet.split('#') # You can return only the part of the string you want after the split method tweet.split('#')[1]  dictionary methods d = {'key1': 'item1', 'key2': 'item2'} # Print the keys in a dictionary d.keys() # Print the items in a dictionary d.items()  dict_keys(['key1', 'key2'])  list methods lst = [1,2,3] lst.pop() lst # Find a value within a list 'x' in [1,2,3] 'x' in ['x','y','z']  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"f0e78606df289232dcb8dd4d4a1a20df","permalink":"https://greydongilmore.github.io/courses/ml_intro/01_01_python_basics_operations/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/01_01_python_basics_operations/","section":"courses","summary":"The following are simple operations you can perform within python. We start with very basic operations and work up to more complex operations such as defining functions and methods\n   Symbol Task Performed     + Addition   - Subtraction   / division   % mod   * multiplication   // floor division   ** to the power of    Arithmetic Operations The following are simple math expressions that can be done in Python.","tags":null,"title":"Operations in Python","type":"docs"},{"authors":null,"categories":null,"content":"We ended the last section observing some puzzling behavior: the performance of our linear regression model appeared to decrease with increasing sample size, which is probably not what we would have intuitively expected. In this section, we\u0026rsquo;ll explore the reasons for, and implications of, this important phenomenon.\n# our core libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt # scikit-learn stuff we've already encountered from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error  To get a better understanding of what\u0026rsquo;s going on, we\u0026rsquo;ll set aside our relatively complex personality dataset in this section in favor of simpler bivariate examples. Once we\u0026rsquo;re comfortable with the key ideas, we\u0026rsquo;ll bring the data back and explore it some more in the next sections.\nLet\u0026rsquo;s start by sampling some data from a noisy function where the underlying functional form is quadratic.\n# we wrap the data generation code in a function so we can call # it again later. def make_xy(n, sd=0.5): ''' Generate x and y variables from a fixed quadratic function, adding noise. ''' x = np.random.normal(size=n) y = (0.7 * x) ** 2 + 0.1 * x + np.random.normal(10, sd, size=n) return x, y  # fix the random number generator so we get reproducible results np.random.seed(10) x, y = make_xy(30) plt.scatter(x, y);     Suppose we try to fit these data with a linear model\u0026hellip;\nest = LinearRegression() est.fit(x[:, None], y) x_range = np.linspace(x.min(), x.max(), 100) reg_line = est.predict(x_range[:, None]) plt.scatter(x, y) plt.plot(x_range, reg_line); mse = mean_squared_error(y, est.predict(x[:, None])) plt.title(f\u0026quot;Mean squared error: {mse:.2f}\u0026quot;);     The fit looks\u0026hellip; meh. It seems pretty clear that our linear regression model is underfitting the data—meaning, there are clear patterns in the data that the fitted model fails to describe.\nWhat can we do about this? Well, the problem here is that our model is insufficiently flexible; our straight regression line can\u0026rsquo;t bend itself to fit the contours of the observed data. Clearly, the solution is to use a more flexible estimator! A linear fit won\u0026rsquo;t cut it—we need to fit curves.\nJust to make sure we don\u0026rsquo;t underfit again, let\u0026rsquo;s use a really flexible estimator—specifically, 10th degree polynomial regression.\nThis is also a good opportunity to introduce a helpful object in scikit-learn called a Pipeline. The idea behind a Pipeline is that we can stack arbitrarily many transformation steps together in a sequence, and then cap them off with an estimator of our choice. The whole pipeline will then behave like a single estimator—i.e., we only need to call fit() and predict() once. This will allow us to introduce a preprocessing step before the LinearRegression model gets our data, in which we create a bunch of polynomial features (by taking x**2, x**3, x**4, and so on—all the way up to x**10). We\u0026rsquo;ll make use of scikit-learn\u0026rsquo;s handy PolynomialFeatures transformer, which can be found in the preprocessing module (there are all kinds of other useful data preprocessing tools in there).\nHere\u0026rsquo;s the result of our second model-fitting exercise:\nfrom sklearn.preprocessing import PolynomialFeatures from sklearn.pipeline import Pipeline # wrap the pipeline creation process in a function, so we can # conveniently parameterize the degree of the polynomial. def make_pipeline(degree=1): # Polynomial regression is just linear regression with polynomial # features, so we can use scikit-learn's PolyNomialFeatures helper # to generate an expanded design matrix as an extra pipeline step # before model estimation. polynomial_features = PolynomialFeatures(degree=degree, include_bias=False) # Construct an sklearn Pipeline, which behaves like a single Estimator. pipeline = Pipeline([ (\u0026quot;polynomial_features\u0026quot;, polynomial_features), (\u0026quot;linear_regression\u0026quot;, LinearRegression()) ]) return pipeline  Now we can initialize a pipeline with degree=10, and fit it to our toy data:\n# play with this! DEGREE = 10 pipeline = make_pipeline(DEGREE) pipeline.fit(x[:, None], y) reg_line = pipeline.predict(x_range[:, None]) plt.scatter(x, y) plt.plot(x_range, reg_line) mse = mean_squared_error(y, pipeline.predict(x[:, None])) plt.title(f\u0026quot;Mean squared error: {mse:.2f}\u0026quot;);     On paper, this model fits the data much better than the first model, in the sense that it reduces the mean squared error relative to the simpler linear model. But, much as it seemed clear that the previous model was underfitting, it should now be intuitively obvious to you that the 10th-degree polynomial model is overfitting. That is, the line of best fit bends in some fairly unnatural ways in order to capture individual data points. While this helps reduce the error in these particular data, it\u0026rsquo;s hard to imagine that the same line would still be very close to the data if we sampled from the same distribution a second or third time.\nWe can test this intuition by doing exactly that: we sample some more data from the same process, and see how well our fitted model predicts the new scores.\ntest_x, test_y = make_xy(30) plt.scatter(test_x, test_y) # Update the x range x_range = np.linspace(test_x.min(), test_x.max(), 100) reg_line = pipeline.predict(x_range[:, None]) plt.plot(x_range, reg_line) mse = mean_squared_error(y, pipeline.predict(test_x[:, None])) plt.title(f\u0026quot;Mean squared error: {mse:.2f}\u0026quot;);     That\u0026rsquo;s\u0026hellip; not so good. We can see that the fitted model generates wildly off-base predictions for new observations outside its original training range (though, if we zoomed in, we\u0026rsquo;d find that it\u0026rsquo;s not so hot for observations within the original range either).\nOf course, since we created the data-generating process ourselves, and know the ground truth in this case, we may as well go ahead and fit the data with the correct functional form, which i this case is a polynomial with degree 2:\n# Call our pipeline-generation function pipeline = make_pipeline(2) # Fit to the training data pipeline.fit(x[:, None], y) # Predict values for range of x x_range = np.linspace(x.min(), x.max(), 100) reg_line = pipeline.predict(x_range[:, None]) # Plot plt.scatter(x, y) plt.plot(x_range, reg_line) mse = mean_squared_error(y, pipeline.predict(x[:, None])) plt.title(f\u0026quot;Mean squared error: {mse:.2f}\u0026quot;);     There, that looks much better.\nOf course, in the real world, we rarely know the ground truth (if we did, we wouldn\u0026rsquo;t need to fit a model in the first place!). So we\u0026rsquo;d have to navigate between the two extremes of overfitting and underfitting in some other way. Finding this delicate balance is one of the central problems of machine learning—perhaps the central problem. For any given dataset, a more flexible model will be able to capture more nuanced, subtle patterns in the data. The cost of flexibility, however, is that such a model is also more likely to hallucinate—i.e., to fit patterns in the data that are only there because of noise, and won\u0026rsquo;t generalize to new samples. Conversely, a less flexible model is only capable of fitting simple patterns in the data. This means it will avoid chasing down rabbit holes full of spurious patterns; but it does so at the cost of missing out on a lot of real patterns.\nOne way to think about this is that, as an analyst, the choice you face is almost never between good models and bad models, but rather, between lazy and energetic ones (later on, we\u0026rsquo;ll also see that there are many different ways to be lazy or energetic). In the above example, the straight line is a lazy model: it has only one degree of freedom to play with, and if it can\u0026rsquo;t fit the data well with that one degree of variation, it doesn\u0026rsquo;t care. It\u0026rsquo;ll just sigh and go back to the couch to watch Game of Thrones.\nThe 10th-degree polynomial, by contrast, is hyperactive and prone to conspiracy theories: it sees patterns everywhere, and is very interested in convincing you that all of the conspiracies are real.\nGetting it right in any given situation requires you to strike a balance between these two extremes. Unfortunately, the precise point of optimality varies on a case-by-case basis, so there is, as they say in machine learning, no free lunch.\nLater on, we\u0026rsquo;ll connect the ideas of overfitting vs. underfitting (or, relatedly, flexibility vs. stability) to another key concept—the bias-variance tradeoff. For now though, let\u0026rsquo;s hone our intuitions about overfitting and underfitting by interactively playing with our polynomial regression model a bit more.\n##### provides interactive widget support from ipywidgets import interact def plot_fit(n=30, sd=0.5, degree=1, seed=500, show_fit=True): np.random.seed(seed) x, y = make_xy(n, sd) x_test, y_test = make_xy(n, sd) pipeline = make_pipeline(degree) pipeline.fit(x[:, None], y) fig, axes = plt.subplots(1, 2, sharex=True, sharey=True, figsize=(12, 5)) axes[0].scatter(x, y) all_x = np.r_[x, x_test] x_range = np.linspace(all_x.min(), all_x.max(), 100) mse = mean_squared_error(y, pipeline.predict(x[:, None])) axes[0].set_title(f\u0026quot;Training sample (MSE = {mse:.2f})\u0026quot;, fontsize=16); axes[1].scatter(x_test, y_test, color='g') mse = mean_squared_error(y_test,pipeline.predict(x_test[:, None])) axes[1].set_title(f\u0026quot;Test sample (MSE = {mse:.2f})\u0026quot;, fontsize=16); if show_fit: reg_line = pipeline.predict(x_range[:, None]) axes[0].plot(x_range, reg_line) axes[1].plot(x_range, reg_line, 'g') # uncomment next line for static version # plot_fit(degree=10) interact(plot_fit, n=(10, 500, 10), sd=(0, 5, 0.1), degree=(1, 20), seed=(1, 1000, 1), show_fit=True);  interactive(children=(IntSlider(value=30, description='n', max=500, min=10, step=10), FloatSlider(value=0.5, d…  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"c20ff4d5fede091d98e83bab58eb140a","permalink":"https://greydongilmore.github.io/courses/ml_intro/11_01_overfitting_underfitting/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/11_01_overfitting_underfitting/","section":"courses","summary":"We ended the last section observing some puzzling behavior: the performance of our linear regression model appeared to decrease with increasing sample size, which is probably not what we would have intuitively expected.","tags":null,"title":"Over and Underfitting","type":"docs"},{"authors":null,"categories":null,"content":"Visualising Data The purpose of scientific computation is insight not numbers: To understand the meaning of the (many) numbers we compute, we often need postprocessing, statistical analysis and graphical visualisation of our data. The ensuing sections will outline the use of plotting tools within Python, mainly Matplotlib, Pandas and Plotly.\nMatplotlib The Python library Matplotlib is a python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments. Matplotlib tries to make easy things easy and hard things possible. You can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc, with just a few lines of code.\nFor more detailed information, check these links:\n The project web page for matplotlib. The source code for matplotlib. A large gallery showcaseing various types of plots matplotlib can create. A good matplotlib tutorial. Another good matplotlib reference.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"903ff0663f55802781eafb522de90600","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_01_plotting/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_01_plotting/","section":"courses","summary":"Visualising Data The purpose of scientific computation is insight not numbers: To understand the meaning of the (many) numbers we compute, we often need postprocessing, statistical analysis and graphical visualisation of our data.","tags":null,"title":"Plotting Intro","type":"docs"},{"authors":null,"categories":null,"content":"Time series analysis refers to the analysis of change in the trend of the data over a period of time. Time series analysis has a variety of applications. One such application is the prediction of the future value of an item based on its past values. Future stock price prediction is probably the best example of such an application. In this tutorial, we will see how we can perform time series analysis with the help of Keras. We will be predicting the future stock prices of the Apple Company (AAPL), based on its stock prices of the past 5 years.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"423d46f89861d424ef342557530e9cc0","permalink":"https://greydongilmore.github.io/courses/ml_intro/21_01_timeseries_analysis/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/21_01_timeseries_analysis/","section":"courses","summary":"Time series analysis refers to the analysis of change in the trend of the data over a period of time. Time series analysis has a variety of applications. One such application is the prediction of the future value of an item based on its past values.","tags":null,"title":"Time Series Intro","type":"docs"},{"authors":null,"categories":null,"content":"The data that we are going to use for this article will be downloaded from Yahoo Finance. For training our algorithm, we will be using the Apple stock prices for the past 5 years. To perform this task we will first define a function that will work to scrape the Yahoo finance website.\nimport pandas as pd import numpy as np import requests import re from datetime import datetime, timedelta from io import StringIO ############################################################################### # Data Scraping Class for Yahoo Finance # ############################################################################### class YahooFinanceHistory: timeout = 2 crumb_link = 'https://finance.yahoo.com/quote/{0}/history?p={0}' crumble_regex = r'CrumbStore\u0026quot;:{\u0026quot;crumb\u0026quot;:\u0026quot;(.*?)\u0026quot;}' quote_link = 'https://query1.finance.yahoo.com/v7/finance/download/{quote}?period1={dfrom}\u0026amp;period2={dto}\u0026amp;interval=1d\u0026amp;events=history\u0026amp;crumb={crumb}' def __init__(self, symbol, days_back=7): self.symbol = symbol self.session = requests.Session() self.dt = timedelta(days=days_back) def get_crumb(self): response = self.session.get(self.crumb_link.format(self.symbol), timeout=self.timeout) response.raise_for_status() match = re.search(self.crumble_regex, response.text) if not match: raise ValueError('Could not get crumb from Yahoo Finance') else: self.crumb = match.group(1) def get_quote(self): if not hasattr(self, 'crumb') or len(self.session.cookies) == 0: self.get_crumb() now = datetime.utcnow() dateto = int(now.timestamp()) datefrom = int((now - self.dt).timestamp()) url = self.quote_link.format(quote=self.symbol, dfrom=datefrom, dto=dateto, crumb=self.crumb) response = self.session.get(url) response.raise_for_status() return pd.read_csv(StringIO(response.text), parse_dates=['Date'])  stock = 'AMD' df = YahooFinanceHistory(stock, days_back=2000).get_quote()  df.tail()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  Date Open High Low Close Adj Close Volume     1375 2019-11-21 40.419998 40.709999 38.639999 39.520000 39.520000 88069400   1376 2019-11-22 39.360001 39.889999 38.189999 39.150002 39.150002 56931900   1377 2019-11-25 39.500000 40.169998 39.490002 39.790001 39.790001 45769500   1378 2019-11-26 39.299999 39.480000 38.810001 38.990002 38.990002 43603300   1379 2019-11-27 39.459999 39.759998 39.070000 39.410000 39.410000 33630100     import matplotlib.pyplot as plt from pandas.plotting import register_matplotlib_converters register_matplotlib_converters() df_plot = df #setting index as date df_plot['Date'] = pd.to_datetime(df_plot.Date,format='%Y-%m-%d') df_plot.index = df_plot['Date'] #plot plt.figure(figsize=(16,8)); plt.plot(df_plot['Close'], label='Close Price history'); plt.title('{} 5 Year Stock Price'.format(stock), fontweight='bold', fontsize=16); plt.xlabel('Days', fontweight='bold'); plt.ylabel('Price (USD)', fontweight='bold');     You can see that the trend is highly non-linear and it is very difficult to capture the trend using this information. This is where the power of Long Short-Term Memory network (LSTM) can be utilized. LSTM is a type of recurrent neural network capable of remembering the past information and while predicting the future values, it takes this past information into account.\nPredicting Future Stock Prices Stock price prediction is similar to any other machine learning problem where we are given a set of features and we have to predict a corresponding value. We will perform the same steps as we do perform in order to solve any machine learning problem.\nAs a rule of thumb, whenever you use a neural network, you should normalize or scale your data. We will use MinMaxScaler class from the sklearn.preprocessing library to scale our data between 0 and 1.\nAs mentioned earlier, in a time series problems, we have to predict a value at time T, based on the data from days T-N where N can be any number of steps. In this tutorial, we are going to predict the opening stock price of the data based on the opening stock prices for the past 60 days (prediction_window_size). I have tried and tested different numbers and found that the best results are obtained when past 60 time steps are used. You can try different numbers and see how your algorithm performs.\nfrom sklearn.preprocessing import MinMaxScaler from sklearn.model_selection import train_test_split # Number of days to use for prediction prediction_window_size = 60 # Creating dataframe data = df.sort_index(ascending=True, axis=0) new_data = pd.DataFrame(index=range(0,len(df)),columns=['Date', 'Close']) for i in range(0,len(data)): new_data['Date'][i] = data['Date'][i] new_data['Close'][i] = data['Close'][i] # Setting index new_data.index = new_data.Date new_data.drop('Date', axis=1, inplace=True) # Converting dataset into x_train and y_train scaler = MinMaxScaler(feature_range=(0, 1)) scaled_data = scaler.fit_transform(new_data.values) x_train, y_train = [], [] for i in range(prediction_window_size, len(scaled_data)): x_train.append(scaled_data[i-prediction_window_size:i,0]) y_train.append(scaled_data[i,0]) x_train, y_train = np.array(x_train), np.array(y_train) x_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))  In the script above we create two lists: x_train (features) and y_train (labels). There are 1380 records in the scaled_data data. We execute a loop that starts from 61st record and stores all the previous 60 records to the feature_set list. The 61st record is stored in the y_train labels list. We need to convert both the x_train and the y_train lists to numpy arrays before we can use it for training.\nIn order to train LSTM on our data, we need to convert our data into the shape accepted by the LSTM. We need to convert our data into three-dimensional format. The first dimension is the number of records or rows in the dataset which is 1320 in our case. The second dimension is the number of time steps which is 60 while the last dimension is the number of indicators. Since we are only using one feature, i.e Close, the number of indicators will be one.\nCreate and Fit LSTM Network We have preprocessed our data and have converted it into the desired format. Now is the time to create our LSTM. The LSTM model that we are going to create will be a sequential model with multiple layers. We will add four LSTM layers to our model followed by a dense layer that predicts the future stock price.\nIn the script below we imported the Sequential class from keras.models library and Dense, LSTM, and Dropout classes from keras.layers library. To add a layer to the sequential model, the add method is used. Inside the add method, we passed our LSTM layer. The first parameter to the LSTM layer is the number of neurons or nodes that we want in the layer. The second parameter is return_sequences, which is set to true since we will add more layers to the model. The first parameter to the input_shape is the number of time steps while the last parameter is the number of indicators.\nCreating LSTM and Dropout Layers Let\u0026rsquo;s now add a dropout layer to our model. Dropout layer is added to avoid over-fitting, which is a phenomenon where a machine learning model performs better on the training data compared to the test data. We will then add three more LSTM and dropout layers to our model.\nCreating Dense Layer To make our model more robust, we add a dense layer at the end of the model. The number of neurons in the dense layer will be set to 1 since we want to predict a single value in the output.\nModel Compilation Finally, we need to compile our LSTM before we can train it on the training data. The following script compiles the our model. We call the compile method on the Sequential model object which is \u0026ldquo;model\u0026rdquo; in our case. We use the mean squared error as loss function and to reduce the loss or to optimize the algorithm, we use the adam optimizer.\nAlgorithm Training Now is the time to train the model that we defined. To do so, we call the fit method on the model and pass it our training features and labels. Depending upon your hardware, model training can take some time.\nfrom keras.models import Sequential from keras.layers import Dense, Dropout, LSTM # Initialising the RNN model = Sequential() # Adding the first LSTM layer and some Dropout regularisation model.add(LSTM(units = 50, return_sequences = True, input_shape = (x_train.shape[1], 1))) model.add(Dropout(0.2)) # Adding a second LSTM layer and some Dropout regularisation model.add(LSTM(units = 50, return_sequences = True)) model.add(Dropout(0.2)) # Adding a third LSTM layer and some Dropout regularisation model.add(LSTM(units = 50, return_sequences = True)) model.add(Dropout(0.2)) # Adding a fourth LSTM layer and some Dropout regularisation model.add(LSTM(units = 50)) model.add(Dropout(0.2)) # Adding the output layer model.add(Dense(units = 1)) # Compiling the RNN model.compile(optimizer = 'adam', loss = 'mean_squared_error') # Fitting the RNN to the Training set model.fit(x_train, y_train, epochs = 100, batch_size = 32,verbose=0);  Testing our LSTM We have successfully trained our LSTM, now is the time to test the performance of our algorithm on the test set by predicting the opening stock prices for one full year. However, as we did with the training data, we need to convert our test data in the right format.\n# predicting 246 values, using past 60 from the train data total_prediction_days = 365 inputs = new_data[-(total_prediction_days+prediction_window_size):].values inputs = inputs.reshape(-1,1) inputs = scaler.transform(inputs) X_test = [] for i in range(prediction_window_size, inputs.shape[0]): X_test.append(inputs[i-prediction_window_size:i,0]) X_test = np.array(X_test) X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))  Making Predictions Now is the time to see the magic. We preprocessed our test data and now we can use it to make predictions. To do so, we simply need to call the predict method on the model that we trained. Since we scaled our data, the predictions made by the LSTM are also scaled. We need to reverse the scaled prediction back to their actual values. To do so, we can use the ìnverse_transform method of the scaler object we created during training. Take a look at the following script:\nclosing_price = model.predict(X_test) closing_price = scaler.inverse_transform(closing_price)  How Did We Do? # Split data into test and train sets data_idx = len(new_data) - len(closing_price) train.loc[:,0] = new_data[:data_idx] valid.loc[:,0] = new_data[data_idx:] valid.loc[:,'Predictions'] = closing_price  fig, ax = plt.subplots(figsize=(10,6)) plt1 = ax.plot(train['Close']); plt2 = ax.plot(valid[['Close', 'Predictions']]); plt.title('{} Closing Price'.format(stock), fontweight='bold', fontsize=16) plt.xlabel('Days', fontweight='bold') plt.ylabel('Price (USD)', fontweight='bold') plt.legend(plt2, ('Actual', 'Prediction'), loc='center left', bbox_to_anchor=(1, 0.5));     y_pred = (closing_price \u0026gt; 0.5) valid_true = new_data.values[-len(closing_price):] rms = np.sqrt(np.mean(np.power((valid_true-closing_price),2))) trade_dataset_temp = df trade_dataset_temp['y_pred'] = np.NaN trade_dataset_temp.iloc[(len(trade_dataset_temp) - len(y_pred)):,-1:] = y_pred trade_dataset = trade_dataset_temp.dropna() trade_dataset['Tomorrows Returns'] = 0. trade_dataset['Tomorrows Returns'] = np.log(trade_dataset['Close']/trade_dataset['Close'].shift(1)) trade_dataset['Tomorrows Returns'] = trade_dataset['Tomorrows Returns'].shift(-1) trade_dataset['Strategy Returns'] = 0. trade_dataset['Strategy Returns'] = np.where(trade_dataset['y_pred'] == True, trade_dataset['Tomorrows Returns'], - trade_dataset['Tomorrows Returns']) trade_dataset['Cumulative Market Returns'] = np.cumsum(trade_dataset['Tomorrows Returns']) trade_dataset['Cumulative Strategy Returns'] = np.cumsum(trade_dataset['Strategy Returns']) plt.figure(figsize=(10,5)) plt.plot(trade_dataset['Cumulative Market Returns'], color='r', label='Market Returns') plt.plot(trade_dataset['Cumulative Strategy Returns'], color='g', label='Strategy Returns') plt.legend() plt.show()     ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"12dca65457447bcc76324cf620256b93","permalink":"https://greydongilmore.github.io/courses/ml_intro/21_02_timeseries_analysis/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/21_02_timeseries_analysis/","section":"courses","summary":"The data that we are going to use for this article will be downloaded from Yahoo Finance. For training our algorithm, we will be using the Apple stock prices for the past 5 years.","tags":null,"title":"Data Crunching","type":"docs"},{"authors":null,"categories":null,"content":"To learn how to do machine learning we\u0026rsquo;re going to need some data to work with. To facilitate learning and experimentation, scikit-learn includes a datasets module containing a number of widely-used toy datasets. Here\u0026rsquo;s how we could load the (in)famous Iris dataset:\nfrom sklearn import datasets # Load a dictionary (technically, a Bunch) containing the data iris = datasets.load_iris() # 'data' and 'target' contains the feature data and classes, respectively X, y = iris['data'], iris['target']  X contains feature information for 150 individual Iris flowers drawn from 3 different species. y contains the true class information for all flowers. If we want to inspect the features in a tabular form, we can easily load the data into a pandas DataFrame:\n# Here we're importing the pandas package, which we'll use extensively # for data manipulation. In future sections, we'll put the core imports # at the top of the notebook, which is the convention in Python. import pandas as pd # Initialize a new pandas DataFrame from the X matrix and the feature names data = pd.DataFrame(X, columns=iris['feature_names']) data.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  sepal length (cm) sepal width (cm) petal length (cm) petal width (cm)     0 5.1 3.5 1.4 0.2   1 4.9 3.0 1.4 0.2   2 4.7 3.2 1.3 0.2   3 4.6 3.1 1.5 0.2   4 5.0 3.6 1.4 0.2     In principle, we could use the iris dataset (or one of the other datasets bundled with scikit-learn) for many of the examples we\u0026rsquo;ll work through. But the iris dataset has some limitations—most notably, it\u0026rsquo;s fairly small (only 150 rows and 4 features), and has nothing to do with real world applications. Instead, we\u0026rsquo;ll use data that should be of interest to many individuals: house pricing dataset and time-series stock prices. The housing price dataset consists of various house features along with the sales price of the home. The time-series stock price datasets will be harvested from Yahoo finance.\nWe will first make use of the house pricing dataset to learn the basics of machine learning. We\u0026rsquo;ll use pandas—the reference data analysis library in Python—to do this. Pandas provides us with a fairly magical read_csv function that can read in almost any kind of tabular data.\n# read_csv is a workhorse function that can read almost any kind of # plain-text format. The returned object is a pandas DataFrame. all_data = pd.read_csv('data/house_prices.csv', sep=',', index_col=0).reset_index(drop=True)  Representing the data Once the data have been read in, we can take a look at the first few rows:\n# head() display the first few rows of the dataset. all_data.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  MSSubClass MSZoning LotFrontage LotArea Street Alley LotShape LandContour Utilities LotConfig ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold YrSold SaleType SaleCondition SalePrice     0 60 RL 65.0 8450 Pave NaN Reg Lvl AllPub Inside ... 0 NaN NaN NaN 0 2 2008 WD Normal 208500   1 20 RL 80.0 9600 Pave NaN Reg Lvl AllPub FR2 ... 0 NaN NaN NaN 0 5 2007 WD Normal 181500   2 60 RL 68.0 11250 Pave NaN IR1 Lvl AllPub Inside ... 0 NaN NaN NaN 0 9 2008 WD Normal 223500   3 70 RL 60.0 9550 Pave NaN IR1 Lvl AllPub Corner ... 0 NaN NaN NaN 0 2 2006 WD Abnorml 140000   4 60 RL 84.0 14260 Pave NaN IR1 Lvl AllPub FR2 ... 0 NaN NaN NaN 0 12 2008 WD Normal 250000    5 rows × 80 columns\n As we can see, the data are tabular. Every row represents a different house, and every column represents a different variable. In machine learning terminology, we typically refer to the rows and columns as samples and features, respectively. We can thus think of our data as a two-dimensional n (samples) x p (features) matrix. The vast majority of algorithms implemented in the scikit-learn and keras packages expect to receive numerical matrices of this kind as their primary inputs. (Note that some of the columns in our dataset—e.g., \u0026ldquo;MSZoning\u0026rdquo; and \u0026ldquo;LotShape\u0026rdquo;—contains strings or categorical values, so we need to pre-process these columns). One option would be to recode these columns into a numerical form before we could make proper use of them by defining different levels. The other option would be to just remove them. Since we have 80 features, we will just remove them for now. The original dataset consists of 80 columns and 1460 samples.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"a443c11f299cf9b70c346e0981e48f7b","permalink":"https://greydongilmore.github.io/courses/ml_intro/03_02_data_preprocessing/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/03_02_data_preprocessing/","section":"courses","summary":"To learn how to do machine learning we\u0026rsquo;re going to need some data to work with. To facilitate learning and experimentation, scikit-learn includes a datasets module containing a number of widely-used toy datasets.","tags":null,"title":"Data Loading","type":"docs"},{"authors":null,"categories":null,"content":"Matplotlib is the \u0026ldquo;grandfather\u0026rdquo; library of data visualization with Python. It was created by John Hunter. He created it to try to replicate MatLab\u0026rsquo;s (another programming language) plotting capabilities in Python. So if you happen to be familiar with matlab, matplotlib will feel natural to you.\nIt is an excellent 2D and 3D graphics library for generating scientific figures.\nSome of the major Pros of Matplotlib are:\n Generally easy to get started for simple plots Support for custom labels and texts Great control of every element in a figure High-quality output in many formats Very customizable in general  Matplotlib allows you to create reproducible figures programmatically. Let\u0026rsquo;s learn how to use it! Before continuing this lecture, I encourage you just to explore the official Matplotlib web page.\nInstallation You\u0026rsquo;ll need to install matplotlib first with either:\npip install matplotlib  Importing Import the matplotlib.pyplot module under the name plt (the tidy way):\nimport matplotlib.pyplot as plt  You\u0026rsquo;ll also need to use this line to see plots in the notebook:\n%matplotlib inline  That line is only for jupyter notebooks, if you are using another editor, you\u0026rsquo;ll use: plt.show() at the end of all your plotting commands to have the figure pop up in another window.\nBasic Example Let\u0026rsquo;s walk through a very simple example using two numpy arrays. You can also use lists, but most likely you\u0026rsquo;ll be passing numpy arrays or pandas columns (which essentially also behave like arrays).\n** The data we want to plot:**\nimport numpy as np x = np.linspace(0, 5, 11) y = x ** 2  x  array([ 0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. ])  y  array([ 0. , 0.25, 1. , 2.25, 4. , 6.25, 9. , 12.25, 16. , 20.25, 25. ])  Basic Matplotlib Commands We can create a very simple line plot using the following ( I encourage you to pause and use Shift+Tab along the way to check out the document strings for the functions we are using).\nplt.plot(x, y, 'r') # 'r' is the color red plt.xlabel('X Axis Title Here') plt.ylabel('Y Axis Title Here') plt.title('String Title Here') plt.show()     Creating Multiplots on Same Canvas # plt.subplot(nrows, ncols, plot_number) plt.subplot(1,2,1) plt.plot(x, y, 'r--') # More on color options later plt.subplot(1,2,2) plt.plot(y, x, 'g*-');      Matplotlib Object Oriented Method Now that we\u0026rsquo;ve seen the basics, let\u0026rsquo;s break it all down with a more formal introduction of Matplotlib\u0026rsquo;s Object Oriented API. This means we will instantiate figure objects and then call methods or attributes from that object.\nIntroduction to the Object Oriented Method The main idea in using the more formal Object Oriented method is to create figure objects and then just call methods or attributes off of that object. This approach is nicer when dealing with a canvas that has multiple plots on it.\nTo begin we create a figure instance. Then we can add axes to that figure:\n# Create Figure (empty canvas) fig = plt.figure() # Add set of axes to figure axes = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # left, bottom, width, height (range 0 to 1) # Plot on that set of axes axes.plot(x, y, 'b') axes.set_xlabel('Set X Label') # Notice the use of set_ to begin methods axes.set_ylabel('Set y Label') axes.set_title('Set Title')  \u0026lt;matplotlib.text.Text at 0x111c85198\u0026gt;     Code is a little more complicated, but the advantage is that we now have full control of where the plot axes are placed, and we can easily add more than one axis to the figure:\n# Creates blank canvas fig = plt.figure() axes1 = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes axes2 = fig.add_axes([0.2, 0.5, 0.4, 0.3]) # inset axes # Larger Figure Axes 1 axes1.plot(x, y, 'b') axes1.set_xlabel('X_label_axes2') axes1.set_ylabel('Y_label_axes2') axes1.set_title('Axes 2 Title') # Insert Figure Axes 2 axes2.plot(y, x, 'r') axes2.set_xlabel('X_label_axes2') axes2.set_ylabel('Y_label_axes2') axes2.set_title('Axes 2 Title');     subplots() The plt.subplots() object will act as a more automatic axis manager.\nBasic use cases:\n# Use similar to plt.figure() except use tuple unpacking to grab fig and axes fig, axes = plt.subplots() # Now use the axes object to add stuff to plot axes.plot(x, y, 'r') axes.set_xlabel('x') axes.set_ylabel('y') axes.set_title('title');     Then you can specify the number of rows and columns when creating the subplots() object:\n# Empty canvas of 1 by 2 subplots fig, axes = plt.subplots(nrows=1, ncols=2)     # Axes is an array of axes to plot on axes  array([\u0026lt;matplotlib.axes._subplots.AxesSubplot object at 0x111f0f8d0\u0026gt;, \u0026lt;matplotlib.axes._subplots.AxesSubplot object at 0x1121f5588\u0026gt;], dtype=object)  We can iterate through this array:\nfor ax in axes: ax.plot(x, y, 'b') ax.set_xlabel('x') ax.set_ylabel('y') ax.set_title('title') # Display the figure object fig     A common issue with matplolib is overlapping subplots or figures. We ca use fig.tight_layout() or plt.tight_layout() method, which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content:\nfig, axes = plt.subplots(nrows=1, ncols=2) for ax in axes: ax.plot(x, y, 'g') ax.set_xlabel('x') ax.set_ylabel('y') ax.set_title('title') fig plt.tight_layout()     Figure size, aspect ratio and DPI Matplotlib allows the aspect ratio, DPI and figure size to be specified when the Figure object is created. You can use the figsize and dpi keyword arguments.\n figsize is a tuple of the width and height of the figure in inches dpi is the dots-per-inch (pixel per inch).  For example:\nfig = plt.figure(figsize=(8,4), dpi=100)  \u0026lt;matplotlib.figure.Figure at 0x11228ea58\u0026gt;  The same arguments can also be passed to layout managers, such as the subplots function:\nfig, axes = plt.subplots(figsize=(12,3)) axes.plot(x, y, 'r') axes.set_xlabel('x') axes.set_ylabel('y') axes.set_title('title');     Saving figures Matplotlib can generate high-quality output in a number formats, including PNG, JPG, EPS, SVG, PGF and PDF.\nTo save a figure to a file we can use the savefig method in the Figure class:\nfig.savefig(\u0026quot;filename.png\u0026quot;)  Here we can also optionally specify the DPI and choose between different output formats:\nfig.savefig(\u0026quot;filename.png\u0026quot;, dpi=200)   Legends, labels and titles Now that we have covered the basics of how to create a figure canvas and add axes instances to the canvas, let\u0026rsquo;s look at how decorate a figure with titles, axis labels, and legends.\nFigure titles A title can be added to each axis instance in a figure. To set the title, use the set_title method in the axes instance:\nax.set_title(\u0026quot;title\u0026quot;);  Axis labels Similarly, with the methods set_xlabel and set_ylabel, we can set the labels of the X and Y axes:\nax.set_xlabel(\u0026quot;x\u0026quot;) ax.set_ylabel(\u0026quot;y\u0026quot;);  Legends You can use the label=\u0026ldquo;label text\u0026rdquo; keyword argument when plots or other objects are added to the figure, and then using the legend method without arguments to add the legend to the figure:\nfig = plt.figure() ax = fig.add_axes([0,0,1,1]) ax.plot(x, x**2, label=\u0026quot;x**2\u0026quot;) ax.plot(x, x**3, label=\u0026quot;x**3\u0026quot;) ax.legend()  \u0026lt;matplotlib.legend.Legend at 0x113a3d8d0\u0026gt;     Notice how are legend overlaps some of the actual plot!\nThe legend function takes an optional keyword argument loc that can be used to specify where in the figure the legend is to be drawn. The allowed values of loc are numerical codes for the various places the legend can be drawn. See the documentation page for details. Some of the most common loc values are:\n# Lots of options.... ax.legend(loc=1) # upper right corner ax.legend(loc=2) # upper left corner ax.legend(loc=3) # lower left corner ax.legend(loc=4) # lower right corner # .. many more options are available # Most common to choose ax.legend(loc=0) # let matplotlib decide the optimal location fig     Colors with the color= parameter We can also define colors by their names or RGB hex codes and optionally provide an alpha value using the color and alpha keyword arguments. Alpha indicates opacity.\nfig, ax = plt.subplots() ax.plot(x, x+1, color=\u0026quot;blue\u0026quot;, alpha=0.5) # half-transparant ax.plot(x, x+2, color=\u0026quot;#8B008B\u0026quot;) # RGB hex code ax.plot(x, x+3, color=\u0026quot;#FF8C00\u0026quot;) # RGB hex code  [\u0026lt;matplotlib.lines.Line2D at 0x112179390\u0026gt;]     Line and marker styles To change the line width, we can use the linewidth or lw keyword argument. The line style can be selected using the linestyle or ls keyword arguments:\nfig, ax = plt.subplots(figsize=(12,6)) ax.plot(x, x+1, color=\u0026quot;red\u0026quot;, linewidth=0.25) ax.plot(x, x+2, color=\u0026quot;red\u0026quot;, linewidth=0.50) ax.plot(x, x+3, color=\u0026quot;red\u0026quot;, linewidth=1.00) ax.plot(x, x+4, color=\u0026quot;red\u0026quot;, linewidth=2.00) # possible linestype options ‘-‘, ‘–’, ‘-.’, ‘:’, ‘steps’ ax.plot(x, x+5, color=\u0026quot;green\u0026quot;, lw=3, linestyle='-') ax.plot(x, x+6, color=\u0026quot;green\u0026quot;, lw=3, ls='-.') ax.plot(x, x+7, color=\u0026quot;green\u0026quot;, lw=3, ls=':') # custom dash line, = ax.plot(x, x+8, color=\u0026quot;black\u0026quot;, lw=1.50) line.set_dashes([5, 10, 15, 10]) # format: line length, space length, ... # possible marker symbols: marker = '+', 'o', '*', 's', ',', '.', '1', '2', '3', '4', ... ax.plot(x, x+ 9, color=\u0026quot;blue\u0026quot;, lw=3, ls='-', marker='+') ax.plot(x, x+10, color=\u0026quot;blue\u0026quot;, lw=3, ls='--', marker='o') ax.plot(x, x+11, color=\u0026quot;blue\u0026quot;, lw=3, ls='-', marker='s') ax.plot(x, x+12, color=\u0026quot;blue\u0026quot;, lw=3, ls='--', marker='1') # marker size and color ax.plot(x, x+13, color=\u0026quot;purple\u0026quot;, lw=1, ls='-', marker='o', markersize=2) ax.plot(x, x+14, color=\u0026quot;purple\u0026quot;, lw=1, ls='-', marker='o', markersize=4) ax.plot(x, x+15, color=\u0026quot;purple\u0026quot;, lw=1, ls='-', marker='o', markersize=8, markerfacecolor=\u0026quot;red\u0026quot;) ax.plot(x, x+16, color=\u0026quot;purple\u0026quot;, lw=1, ls='-', marker='s', markersize=8, markerfacecolor=\u0026quot;yellow\u0026quot;, markeredgewidth=3, markeredgecolor=\u0026quot;green\u0026quot;);     Control over axis appearance In this section we will look at controlling axis sizing properties in a matplotlib figure.\nPlot range We can configure the ranges of the axes using the set_ylim and set_xlim methods in the axis object, or axis('tight') for automatically getting \u0026ldquo;tightly fitted\u0026rdquo; axes ranges:\nfig, axes = plt.subplots(1, 3, figsize=(12, 4)) axes[0].plot(x, x**2, x, x**3) axes[0].set_title(\u0026quot;default axes ranges\u0026quot;) axes[1].plot(x, x**2, x, x**3) axes[1].axis('tight') axes[1].set_title(\u0026quot;tight axes\u0026quot;) axes[2].plot(x, x**2, x, x**3) axes[2].set_ylim([0, 60]) axes[2].set_xlim([2, 5]) axes[2].set_title(\u0026quot;custom axes range\u0026quot;);     Special Plot Types There are many specialized plots we can create, such as barplots, histograms, scatter plots, and much more. Most of these type of plots we will actually create using seaborn, a statistical plotting library for Python. But here are a few examples of these type of plots:\nplt.scatter(x,y)  \u0026lt;matplotlib.collections.PathCollection at 0x1122be438\u0026gt;     from random import sample data = sample(range(1, 1000), 100) plt.hist(data)  (array([ 14., 11., 9., 12., 6., 7., 13., 13., 6., 9.]), array([ 28. , 123.5, 219. , 314.5, 410. , 505.5, 601. , 696.5, 792. , 887.5, 983. ]), \u0026lt;a list of 10 Patch objects\u0026gt;)     data = [np.random.normal(0, std, 100) for std in range(1, 4)] # rectangular box plot plt.boxplot(data,vert=True,patch_artist=True);     ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"5e43ab55bcb31211654987081a43e7a8","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_02_plotting_matplotlib/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_02_plotting_matplotlib/","section":"courses","summary":"Matplotlib is the \u0026ldquo;grandfather\u0026rdquo; library of data visualization with Python. It was created by John Hunter. He created it to try to replicate MatLab\u0026rsquo;s (another programming language) plotting capabilities in Python.","tags":null,"title":"Matplotlib","type":"docs"},{"authors":null,"categories":null,"content":"Machine Learning Categories At the most fundamental level, machine learning can be categorized into two main types: supervised learning and unsupervised learning\nSupervised learning Learning is supervised whenever we know the true values that our model is trying to predict, and hence, are in a position to \u0026ldquo;supervise\u0026rdquo; the learning process by quantifying prediction accuracy and making iterative adjustments.\nSome examples of supervised learning problems:\n Determining whether or not incoming email is spam Predicting a person\u0026rsquo;s age from personality scores Diagnosing schizophrenia based on genetic markers  Within the class of supervised learning problems, we can draw a further distinction between classification problems and regression problems. In both cases, the goal is to develop a predictive model that recovers the true labels as accurately as possible. The difference between the two lies in the nature of the labels: in classification, the labels are discrete; in regression, they\u0026rsquo;re continuous.\nFor example, suppose someone hands us the following data:\nimport matplotlib.pyplot as plt # scikit-learn has some handy utilities for generating structure data from sklearn.datasets import make_blobs X, y = make_blobs(n_samples=50, centers=2, random_state=1, cluster_std=1) point_style = dict(cmap='Paired', s=len(X)) plt.scatter(*X.T,c=y, **point_style);     With supervised learning we are provided labels for the data so we can have an idea of what the difference between custers.\nUnsupervised learning Learning is unsupervised when there\u0026rsquo;s no ground truth or right answer, and the goal is just to learn some useful structure from the data. The learning algorithm receives no direct guidance about how well it\u0026rsquo;s performing.\nFor example, suppose someone hands us the following data, with no further explanation and no labels:\n# scikit-learn has some handy utilities for generating structure data X, y = make_blobs(n_samples=50, centers=2, random_state=1, cluster_std=1) plt.scatter(*X.T);     It would be natural to think that these data are generated from three distinct clusters. But since the data are unlabeled, we don\u0026rsquo;t know for a fact that this assignment is correct; we\u0026rsquo;re inferring the grouping in an unsupervised way, based on whatever principle are built into our estimation method (e.g., our visual system\u0026rsquo;s tendency to group objects together based on proximity). The lack of access to the ground truth—and often, it\u0026rsquo;s not even clear that there is any ground truth—underscores the difficulty of the unsupervised learning challenge.\nClassification Now let\u0026rsquo;s look at classification. In this case, the target labels we\u0026rsquo;re trying to predict are discrete (or categorical). For example, building a model that takes a structural brain image as input and outputs a prediction about whether the brain belongs to a dog or a cat is a classification problem, because the output is discrete: each brain belongs to one of the two classes (or categories), and no brain ever takes on an an intermediate value (though our classifiers can certainly make a graded or probabilistic prediction about which class a brain belongs to).\nIn practice, we can often turn regression problems into classification problems by discretizing the data in some way. To make the point really clear, let\u0026rsquo;s continue with the last plot within the unsupervised section. Here we have two-dimensional data: that is, we have two features for each point, represented by the (x,y) positions of the points on the plane. In addition, we have one of three class labels for each point, here represented by the colors of the points. From these features and labels, we would like to create a model that will let us decide whether a new point should be labeled color 1, color 2 or color 3.\nThere are a number of possible models for such a classification task, but here we will use an extremely simple one. We will make the assumption that the two groups can be separated by drawing a straight line through the plane between them, such that points on each side of the line fall in the same group. Here the model is a quantitative version of the statement \u0026ldquo;a straight line separates the classes\u0026rdquo;, while the model parameters are the particular numbers describing the location and orientation of that line for our data. The optimal values for these model parameters are learned from the data (this is the \u0026ldquo;learning\u0026rdquo; in machine learning), which is often called training the model.\nimport numpy as np from sklearn.svm import SVC X, y = make_blobs(n_samples=50, centers=2, random_state=1, cluster_std=1) # fit the support vector classifier model clf = SVC(kernel='linear') clf.fit(X, y) # Get contours describing the model xx = np.linspace(-12, 1, 10) yy = np.linspace(-7, 7, 10) xy1, xy2 = np.meshgrid(xx, yy) Z = np.array([clf.decision_function([t]) for t in zip(xy1.flat, xy2.flat)]).reshape(xy1.shape) # plot points and model fig, ax = plt.subplots(figsize=(8, 6)); line_style = dict(levels = [-1.0, 0.0, 1.0], linestyles = ['dashed', 'solid', 'dashed'], colors = 'gray', linewidths=1) ax.scatter(X[:, 0], X[:, 1], c=y, **point_style); ax.contour(xy1, xy2, Z, **line_style);     ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1ea57d4944a73b082dcebd0f1848daa7","permalink":"https://greydongilmore.github.io/courses/ml_intro/04_02_ml_basics_categories/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/04_02_ml_basics_categories/","section":"courses","summary":"Machine Learning Categories At the most fundamental level, machine learning can be categorized into two main types: supervised learning and unsupervised learning\nSupervised learning Learning is supervised whenever we know the true values that our model is trying to predict, and hence, are in a position to \u0026ldquo;supervise\u0026rdquo; the learning process by quantifying prediction accuracy and making iterative adjustments.","tags":null,"title":"ML Categories","type":"docs"},{"authors":null,"categories":null,"content":"NumPy (or Numpy) is a Linear Algebra Library for Python, the reason it is so important for Data Science with Python is that almost all of the libraries in the PyData Ecosystem rely on NumPy as one of their main building blocks.\nNumpy is also incredibly fast, as it has bindings to C libraries. For more info on why you would want to use Arrays instead of lists, check out this great StackOverflow post.\nWe will only learn the basics of NumPy, to get started we need to install it!\nUsing NumPy Once you\u0026rsquo;ve installed NumPy you can import it as a library:\nimport numpy as np  Numpy has many built-in functions and capabilities. We won\u0026rsquo;t cover them all but instead we will focus on some of the most important aspects of Numpy: vectors,arrays,matrices, and number generation. Let\u0026rsquo;s start by discussing arrays.\nNumpy Arrays NumPy arrays are the main way we will use Numpy throughout the course. Numpy arrays essentially come in two flavors: vectors and matrices. Vectors are strictly 1-d arrays and matrices are 2-d (but you should note a matrix can still have only one row or one column).\nLet\u0026rsquo;s begin our introduction by exploring how to create NumPy arrays.\nFrom a Python List We can create an array by directly converting a list or list of lists:\nmy_list = [1,2,3] my_list  [1, 2, 3]  np.array(my_list)  array([1, 2, 3])  my_matrix = [[1,2,3],[4,5,6],[7,8,9]] my_matrix  [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  np.array(my_matrix)  array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  Built-in Methods There are lots of built-in ways to generate Arrays\narange Return evenly spaced values within a given interval.\nnp.arange(0,10)  array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])  np.arange(0,11,2)  array([ 0, 2, 4, 6, 8, 10])  zeros and ones Generate arrays of zeros or ones\nnp.zeros(3)  array([0., 0., 0.])  np.zeros((5,5))  array([[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]])  np.ones(3)  array([1., 1., 1.])  np.ones((3,3))  array([[1., 1., 1.], [1., 1., 1.], [1., 1., 1.]])  linspace Return evenly spaced numbers over a specified interval.\nnp.linspace(0,10,3)  array([ 0., 5., 10.])  np.linspace(0,10,50)  array([ 0. , 0.20408163, 0.40816327, 0.6122449 , 0.81632653, 1.02040816, 1.2244898 , 1.42857143, 1.63265306, 1.83673469, 2.04081633, 2.24489796, 2.44897959, 2.65306122, 2.85714286, 3.06122449, 3.26530612, 3.46938776, 3.67346939, 3.87755102, 4.08163265, 4.28571429, 4.48979592, 4.69387755, 4.89795918, 5.10204082, 5.30612245, 5.51020408, 5.71428571, 5.91836735, 6.12244898, 6.32653061, 6.53061224, 6.73469388, 6.93877551, 7.14285714, 7.34693878, 7.55102041, 7.75510204, 7.95918367, 8.16326531, 8.36734694, 8.57142857, 8.7755102 , 8.97959184, 9.18367347, 9.3877551 , 9.59183673, 9.79591837, 10. ])  eye Creates an identity matrix\nnp.eye(4)  array([[1., 0., 0., 0.], [0., 1., 0., 0.], [0., 0., 1., 0.], [0., 0., 0., 1.]])  Random Numpy also has lots of ways to create random number arrays:\nrand Create an array of the given shape and populate it with random samples from a uniform distribution over [0, 1).\nnp.random.rand(2)  array([0.48986762, 0.01468397])  np.random.rand(5,5)  array([[0.49717583, 0.85567488, 0.94414447, 0.66025653, 0.85163724], [0.32891759, 0.74810469, 0.16001041, 0.77051371, 0.88918009], [0.74608104, 0.58533077, 0.40581863, 0.25006859, 0.79847227], [0.06457888, 0.14487206, 0.72442204, 0.62528167, 0.73544863], [0.38535387, 0.7203514 , 0.34161177, 0.99193526, 0.79151416]])  randn Return a sample (or samples) from the \u0026ldquo;standard normal\u0026rdquo; distribution. Unlike rand which is uniform:\nnp.random.randn(2)  array([-1.31222401, 1.20662849])  np.random.randn(5,5)  array([[ 0.05155323, -2.03255688, 1.09044905, 1.37866648, -0.43513118], [-0.113966 , 0.06371491, -0.58679889, 0.32057308, -1.90984774], [ 0.44065855, -0.93779379, 1.61012331, -1.21481517, 1.65470737], [ 1.31027626, 0.15909068, 0.85816313, -0.91927387, 1.13879634], [-0.18915251, -0.48102558, 0.38557437, 1.03093896, 2.00252213]])  randint Return random integers from low (inclusive) to high (exclusive).\nnp.random.randint(1,100)  42  np.random.randint(1,100,10)  array([73, 70, 12, 99, 69, 26, 10, 41, 92, 6])  Array Attributes and Methods Let\u0026rsquo;s discuss some useful attributes and methods or an array:\narr = np.arange(25) ranarr = np.random.randint(0,50,10)  arr  array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])  ranarr  array([29, 42, 21, 45, 11, 47, 46, 43, 25, 19])  Reshape Returns an array containing the same data with a new shape.\narr.reshape(5,5)  array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]])  max,min,argmax,argmin These are useful methods for finding max or min values. Or to find their index locations using argmin or argmax\nranarr  array([29, 42, 21, 45, 11, 47, 46, 43, 25, 19])  ranarr.max()  47  ranarr.argmax()  5  ranarr.min()  11  ranarr.argmin()  4  Shape Shape is an attribute that arrays have (not a method):\n# Vector arr.shape  (25,)  # Notice the two sets of brackets arr.reshape(1,25)  array([[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]])  arr.reshape(1,25).shape  (1, 25)  arr.reshape(25,1)  array([[ 0], [ 1], [ 2], [ 3], [ 4], [ 5], [ 6], [ 7], [ 8], [ 9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24]])  arr.reshape(25,1).shape  (25, 1)  dtype You can also grab the data type of the object in the array:\narr.dtype  dtype('int64')  NumPy Indexing and Selection In this section we will discuss how to select elements or groups of elements from an array.\nimport numpy as np  #Creating sample array arr = np.arange(0,11)  #Show arr  array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  Bracket Indexing and Selection The simplest way to pick one or some elements of an array looks very similar to python lists:\n#Get a value at an index arr[8]  8  #Get values in a range arr[1:5]  array([1, 2, 3, 4])  #Get values in a range arr[0:5]  array([0, 1, 2, 3, 4])  Broadcasting Numpy arrays differ from a normal Python list because of their ability to broadcast:\n#Setting a value with index range (Broadcasting) arr[0:5]=100 #Show arr  array([100, 100, 100, 100, 100, 5, 6, 7, 8, 9, 10])  # Reset array, we'll see why I had to reset in a moment arr = np.arange(0,11) #Show arr  array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  #Important notes on Slices slice_of_arr = arr[0:6] #Show slice slice_of_arr  array([0, 1, 2, 3, 4, 5])  #Change Slice slice_of_arr[:]=99 #Show Slice again slice_of_arr  array([99, 99, 99, 99, 99, 99])  Now note the changes also occur in our original array!\narr  array([99, 99, 99, 99, 99, 99, 6, 7, 8, 9, 10])  Data is not copied, it\u0026rsquo;s a view of the original array! This avoids memory problems!\n#To get a copy, need to be explicit arr_copy = arr.copy() arr_copy  array([99, 99, 99, 99, 99, 99, 6, 7, 8, 9, 10])  Indexing a 2D array (matrices) The general format is arr_2d[row][col] or arr_2d[row,col]. I recommend usually using the comma notation for clarity.\narr_2d = np.array(([5,10,15],[20,25,30],[35,40,45])) #Show arr_2d  array([[ 5, 10, 15], [20, 25, 30], [35, 40, 45]])  #Indexing row arr_2d[1]  array([20, 25, 30])  # Format is arr_2d[row][col] or arr_2d[row,col] # Getting individual element value arr_2d[1][0]  20\n# Getting individual element value arr_2d[1,0]  20  # 2D array slicing #Shape (2,2) from top right corner arr_2d[:2,1:]  array([[10, 15], [25, 30]])  #Shape bottom row arr_2d[2]  array([35, 40, 45])  #Shape bottom row arr_2d[2,:]  array([35, 40, 45])  Fancy Indexing Fancy indexing allows you to select entire rows or columns out of order,to show this, let\u0026rsquo;s quickly build out a numpy array:\n#Set up matrix arr2d = np.zeros((10,10))  #Length of array arr_length = arr2d.shape[1]  #Set up array for i in range(arr_length): arr2d[i] = i arr2d  array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [3., 3., 3., 3., 3., 3., 3., 3., 3., 3.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [5., 5., 5., 5., 5., 5., 5., 5., 5., 5.], [6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.], [8., 8., 8., 8., 8., 8., 8., 8., 8., 8.], [9., 9., 9., 9., 9., 9., 9., 9., 9., 9.]])  Fancy indexing allows the following\narr2d[[2,4,6,8]]  array([[2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [8., 8., 8., 8., 8., 8., 8., 8., 8., 8.]])  #Allows in any order arr2d[[6,4,2,7]]  array([[6., 6., 6., 6., 6., 6., 6., 6., 6., 6.], [4., 4., 4., 4., 4., 4., 4., 4., 4., 4.], [2., 2., 2., 2., 2., 2., 2., 2., 2., 2.], [7., 7., 7., 7., 7., 7., 7., 7., 7., 7.]])  More Indexing Help Indexing a 2d matrix can be a bit confusing at first, especially when you start to add in step size. Try google image searching NumPy indexing to fins useful images, like this one:\nSelection Let\u0026rsquo;s briefly go over how to use brackets for selection based off of comparison operators.\narr = np.arange(1,11) arr  array([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  arr \u0026gt; 4  array([False, False, False, False, True, True, True, True, True, True])  bool_arr = arr\u0026gt;4  bool_arr  array([False, False, False, False, True, True, True, True, True, True])  arr[bool_arr]  array([ 5, 6, 7, 8, 9, 10])  arr[arr\u0026gt;2]  array([ 3, 4, 5, 6, 7, 8, 9, 10])  x = 2 arr[arr\u0026gt;x]  array([ 3, 4, 5, 6, 7, 8, 9, 10])  NumPy Operations Arithmetic You can easily perform array with array arithmetic, or scalar with array arithmetic. Let\u0026rsquo;s see some examples:\nimport numpy as np arr = np.arange(0,10)  arr + arr  array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18])  arr * arr  array([ 0, 1, 4, 9, 16, 25, 36, 49, 64, 81])  arr - arr  array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  # Warning on division by zero, but not an error! # Just replaced with nan arr/arr  /home/ggilmore/.local/lib/python3.6/site-packages/ipykernel_launcher.py:3: RuntimeWarning: invalid value encountered in true_divide This is separate from the ipykernel package so we can avoid doing imports until array([nan, 1., 1., 1., 1., 1., 1., 1., 1., 1.])  # Also warning, but not an error instead infinity 1/arr  /home/ggilmore/.local/lib/python3.6/site-packages/ipykernel_launcher.py:2: RuntimeWarning: divide by zero encountered in true_divide array([ inf, 1. , 0.5 , 0.33333333, 0.25 , 0.2 , 0.16666667, 0.14285714, 0.125 , 0.11111111])  arr**3  array([ 0, 1, 8, 27, 64, 125, 216, 343, 512, 729])  Universal Array Functions Numpy comes with many universal array functions, which are essentially just mathematical operations you can use to perform the operation across the array. Let\u0026rsquo;s show some common ones:\n#Taking Square Roots np.sqrt(arr)  array([0. , 1. , 1.41421356, 1.73205081, 2. , 2.23606798, 2.44948974, 2.64575131, 2.82842712, 3. ])  #Calcualting exponential (e^) np.exp(arr)  array([1.00000000e+00, 2.71828183e+00, 7.38905610e+00, 2.00855369e+01, 5.45981500e+01, 1.48413159e+02, 4.03428793e+02, 1.09663316e+03, 2.98095799e+03, 8.10308393e+03])  np.max(arr) #same as arr.max()  9  np.sin(arr)  array([ 0. , 0.84147098, 0.90929743, 0.14112001, -0.7568025 , -0.95892427, -0.2794155 , 0.6569866 , 0.98935825, 0.41211849])  np.log(arr)  /home/ggilmore/.local/lib/python3.6/site-packages/ipykernel_launcher.py:1: RuntimeWarning: divide by zero encountered in log \u0026quot;\u0026quot;\u0026quot;Entry point for launching an IPython kernel. array([ -inf, 0. , 0.69314718, 1.09861229, 1.38629436, 1.60943791, 1.79175947, 1.94591015, 2.07944154, 2.19722458])  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"12d5684adc0944968804a2685713f885","permalink":"https://greydongilmore.github.io/courses/ml_intro/01_02_python_basics_numpy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/01_02_python_basics_numpy/","section":"courses","summary":"NumPy (or Numpy) is a Linear Algebra Library for Python, the reason it is so important for Data Science with Python is that almost all of the libraries in the PyData Ecosystem rely on NumPy as one of their main building blocks.","tags":null,"title":"Numpy","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial we cover some more advanced topics which you won\u0026rsquo;t usually use as often.\nLogarithmic scale It is also possible to set a logarithmic scale for one or both axes. This functionality is in fact only one application of a more general transformation system in Matplotlib. Each of the axes' scales are set seperately using set_xscale and set_yscale methods which accept one parameter (with the value \u0026ldquo;log\u0026rdquo; in this case):\nfig, axes = plt.subplots(1, 2, figsize=(10,4)) axes[0].plot(x, x**2, x, np.exp(x)) axes[0].set_title(\u0026quot;Normal scale\u0026quot;) axes[1].plot(x, x**2, x, np.exp(x)) axes[1].set_yscale(\u0026quot;log\u0026quot;) axes[1].set_title(\u0026quot;Logarithmic scale (y)\u0026quot;);     Placement of ticks and custom tick labels We can explicitly determine where we want the axis ticks with set_xticks and set_yticks, which both take a list of values for where on the axis the ticks are to be placed. We can also use the set_xticklabels and set_yticklabels methods to provide a list of custom text labels for each tick location:\nfig, ax = plt.subplots(figsize=(10, 4)) ax.plot(x, x**2, x, x**3, lw=2) ax.set_xticks([1, 2, 3, 4, 5]) ax.set_xticklabels([r'$\\alpha$', r'$\\beta$', r'$\\gamma$', r'$\\delta$', r'$\\epsilon$'], fontsize=18) yticks = [0, 50, 100, 150] ax.set_yticks(yticks) ax.set_yticklabels([\u0026quot;$%.1f$\u0026quot; % y for y in yticks], fontsize=18); # use LaTeX formatted labels     There are a number of more advanced methods for controlling major and minor tick placement in matplotlib figures, such as automatic placement according to different policies. See http://matplotlib.org/api/ticker_api.html for details.\nScientific notation With large numbers on axes, it is often better use scientific notation:\nfig, ax = plt.subplots(1, 1) ax.plot(x, x**2, x, np.exp(x)) ax.set_title(\u0026quot;scientific notation\u0026quot;) ax.set_yticks([0, 50, 100, 150]) from matplotlib import ticker formatter = ticker.ScalarFormatter(useMathText=True) formatter.set_scientific(True) formatter.set_powerlimits((-1,1)) ax.yaxis.set_major_formatter(formatter)     Axis number and axis label spacing # distance between x and y axis and the numbers on the axes matplotlib.rcParams['xtick.major.pad'] = 5 matplotlib.rcParams['ytick.major.pad'] = 5 fig, ax = plt.subplots(1, 1) ax.plot(x, x**2, x, np.exp(x)) ax.set_yticks([0, 50, 100, 150]) ax.set_title(\u0026quot;label and axis spacing\u0026quot;) # padding between axis label and axis numbers ax.xaxis.labelpad = 5 ax.yaxis.labelpad = 5 ax.set_xlabel(\u0026quot;x\u0026quot;) ax.set_ylabel(\u0026quot;y\u0026quot;);     # restore defaults matplotlib.rcParams['xtick.major.pad'] = 3 matplotlib.rcParams['ytick.major.pad'] = 3  Axis position adjustments Unfortunately, when saving figures the labels are sometimes clipped, and it can be necessary to adjust the positions of axes a little bit. This can be done using subplots_adjust:\nfig, ax = plt.subplots(1, 1) ax.plot(x, x**2, x, np.exp(x)) ax.set_yticks([0, 50, 100, 150]) ax.set_title(\u0026quot;title\u0026quot;) ax.set_xlabel(\u0026quot;x\u0026quot;) ax.set_ylabel(\u0026quot;y\u0026quot;) fig.subplots_adjust(left=0.15, right=.9, bottom=0.1, top=0.9);     Axis grid With the grid method in the axis object, we can turn on and off grid lines. We can also customize the appearance of the grid lines using the same keyword arguments as the plot function:\nfig, axes = plt.subplots(1, 2, figsize=(10,3)) # default grid appearance axes[0].plot(x, x**2, x, x**3, lw=2) axes[0].grid(True) # custom grid appearance axes[1].plot(x, x**2, x, x**3, lw=2) axes[1].grid(color='b', alpha=0.5, linestyle='dashed', linewidth=0.5)     Axis spines We can also change the properties of axis spines:\nfig, ax = plt.subplots(figsize=(6,2)) ax.spines['bottom'].set_color('blue') ax.spines['top'].set_color('blue') ax.spines['left'].set_color('red') ax.spines['left'].set_linewidth(2) # turn off axis spine to the right ax.spines['right'].set_color(\u0026quot;none\u0026quot;) ax.yaxis.tick_left() # only ticks on the left side     Twin axes Sometimes it is useful to have dual x or y axes in a figure; for example, when plotting curves with different units together. Matplotlib supports this with the twinx and twiny functions:\nfig, ax1 = plt.subplots() ax1.plot(x, x**2, lw=2, color=\u0026quot;blue\u0026quot;) ax1.set_ylabel(r\u0026quot;area $(m^2)$\u0026quot;, fontsize=18, color=\u0026quot;blue\u0026quot;) for label in ax1.get_yticklabels(): label.set_color(\u0026quot;blue\u0026quot;) ax2 = ax1.twinx() ax2.plot(x, x**3, lw=2, color=\u0026quot;red\u0026quot;) ax2.set_ylabel(r\u0026quot;volume $(m^3)$\u0026quot;, fontsize=18, color=\u0026quot;red\u0026quot;) for label in ax2.get_yticklabels(): label.set_color(\u0026quot;red\u0026quot;)     Axes where x and y is zero fig, ax = plt.subplots() ax.spines['right'].set_color('none') ax.spines['top'].set_color('none') ax.xaxis.set_ticks_position('bottom') ax.spines['bottom'].set_position(('data',0)) # set position of x spine to x=0 ax.yaxis.set_ticks_position('left') ax.spines['left'].set_position(('data',0)) # set position of y spine to y=0 xx = np.linspace(-0.75, 1., 100) ax.plot(xx, xx**3);     Other 2D plot styles In addition to the regular plot method, there are a number of other functions for generating different kind of plots. See the matplotlib plot gallery for a complete list of available plot types. Some of the more useful ones are show below:\nn = np.array([0,1,2,3,4,5])  fig, axes = plt.subplots(1, 4, figsize=(12,3)) axes[0].scatter(xx, xx + 0.25*np.random.randn(len(xx))) axes[0].set_title(\u0026quot;scatter\u0026quot;) axes[1].step(n, n**2, lw=2) axes[1].set_title(\u0026quot;step\u0026quot;) axes[2].bar(n, n**2, align=\u0026quot;center\u0026quot;, width=0.5, alpha=0.5) axes[2].set_title(\u0026quot;bar\u0026quot;) axes[3].fill_between(x, x**2, x**3, color=\u0026quot;green\u0026quot;, alpha=0.5); axes[3].set_title(\u0026quot;fill_between\u0026quot;);     Text annotation Annotating text in matplotlib figures can be done using the text function. It supports LaTeX formatting just like axis label texts and titles:\nfig, ax = plt.subplots() ax.plot(xx, xx**2, xx, xx**3) ax.text(0.15, 0.2, r\u0026quot;$y=x^2$\u0026quot;, fontsize=20, color=\u0026quot;blue\u0026quot;) ax.text(0.65, 0.1, r\u0026quot;$y=x^3$\u0026quot;, fontsize=20, color=\u0026quot;green\u0026quot;);     Figures with multiple subplots and insets Axes can be added to a matplotlib Figure canvas manually using fig.add_axes or using a sub-figure layout manager such as subplots, subplot2grid, or gridspec:\nsubplots fig, ax = plt.subplots(2, 3) fig.tight_layout()     subplot2grid fig = plt.figure() ax1 = plt.subplot2grid((3,3), (0,0), colspan=3) ax2 = plt.subplot2grid((3,3), (1,0), colspan=2) ax3 = plt.subplot2grid((3,3), (1,2), rowspan=2) ax4 = plt.subplot2grid((3,3), (2,0)) ax5 = plt.subplot2grid((3,3), (2,1)) fig.tight_layout()     gridspec import matplotlib.gridspec as gridspec  fig = plt.figure() gs = gridspec.GridSpec(2, 3, height_ratios=[2,1], width_ratios=[1,2,1]) for g in gs: ax = fig.add_subplot(g) fig.tight_layout()     add_axes Manually adding axes with add_axes is useful for adding insets to figures:\nfig, ax = plt.subplots() ax.plot(xx, xx**2, xx, xx**3) fig.tight_layout() # inset inset_ax = fig.add_axes([0.2, 0.55, 0.35, 0.35]) # X, Y, width, height inset_ax.plot(xx, xx**2, xx, xx**3) inset_ax.set_title('zoom near origin') # set axis range inset_ax.set_xlim(-.2, .2) inset_ax.set_ylim(-.005, .01) # set axis tick locations inset_ax.set_yticks([0, 0.005, 0.01]) inset_ax.set_xticks([-0.1,0,.1]);     Colormap and contour figures Colormaps and contour figures are useful for plotting functions of two variables. In most of these functions we will use a colormap to encode one dimension of the data. There are a number of predefined colormaps. It is relatively straightforward to define custom colormaps, matplotlib has pre-defined colormaps for you to choose from.\nalpha = 0.7 phi_ext = 2 * np.pi * 0.5 def flux_qubit_potential(phi_m, phi_p): return 2 + alpha - 2 * np.cos(phi_p) * np.cos(phi_m) - alpha * np.cos(phi_ext - 2*phi_p)  phi_m = np.linspace(0, 2*np.pi, 100) phi_p = np.linspace(0, 2*np.pi, 100) X,Y = np.meshgrid(phi_p, phi_m) Z = flux_qubit_potential(X, Y).T  pcolor fig, ax = plt.subplots() p = ax.pcolor(X/(2*np.pi), Y/(2*np.pi), Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max()) cb = fig.colorbar(p, ax=ax)     imshow fig, ax = plt.subplots() im = ax.imshow(Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1]) im.set_interpolation('bilinear') cb = fig.colorbar(im, ax=ax)     contour fig, ax = plt.subplots() cnt = ax.contour(Z, cmap=matplotlib.cm.RdBu, vmin=abs(Z).min(), vmax=abs(Z).max(), extent=[0, 1, 0, 1])     3D figures To use 3D graphics in matplotlib, we first need to create an instance of the Axes3D class. 3D axes can be added to a matplotlib figure canvas in exactly the same way as 2D axes; or, more conveniently, by passing a projection='3d' keyword argument to the add_axes or add_subplot methods.\nfrom mpl_toolkits.mplot3d.axes3d import Axes3D  Surface plots fig = plt.figure(figsize=(14,6)) # `ax` is a 3D-aware axis instance because of the projection='3d' keyword argument to add_subplot ax = fig.add_subplot(1, 2, 1, projection='3d') p = ax.plot_surface(X, Y, Z, rstride=4, cstride=4, linewidth=0) # surface_plot with color grading and color bar ax = fig.add_subplot(1, 2, 2, projection='3d') p = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=matplotlib.cm.coolwarm, linewidth=0, antialiased=False) cb = fig.colorbar(p, shrink=0.5)     Wire-frame plot fig = plt.figure(figsize=(8,6)) ax = fig.add_subplot(1, 1, 1, projection='3d') p = ax.plot_wireframe(X, Y, Z, rstride=4, cstride=4)     Coutour plots with projections fig = plt.figure(figsize=(8,6)) ax = fig.add_subplot(1,1,1, projection='3d') ax.plot_surface(X, Y, Z, rstride=4, cstride=4, alpha=0.25) cset = ax.contour(X, Y, Z, zdir='z', offset=-np.pi, cmap=matplotlib.cm.coolwarm) cset = ax.contour(X, Y, Z, zdir='x', offset=-np.pi, cmap=matplotlib.cm.coolwarm) cset = ax.contour(X, Y, Z, zdir='y', offset=3*np.pi, cmap=matplotlib.cm.coolwarm) ax.set_xlim3d(-np.pi, 2*np.pi); ax.set_ylim3d(0, 3*np.pi); ax.set_zlim3d(-np.pi, 2*np.pi);     ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"191ef5c9e8e58ae524a54bf79797d102","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_03_plotting_advance_matplotlib/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_03_plotting_advance_matplotlib/","section":"courses","summary":"In this tutorial we cover some more advanced topics which you won\u0026rsquo;t usually use as often.\nLogarithmic scale It is also possible to set a logarithmic scale for one or both axes.","tags":null,"title":"Advanced Matplotlib","type":"docs"},{"authors":null,"categories":null,"content":"Data Types We often begin exploratory data analysis by examining the types of data that occur in a table. Although there are multiple ways of categorizing data types, in this book we discuss three broad types of data:\n Nominal data, which represents categories that do not have a natural ordering. For example: political party affiliation (Democrat, Republican, Other), sex (male, female, other), and computer operating system (Windows, MacOS, Linux). Ordinal data, which represents ordered categories. For example: T-shirt sizes (small, medium, large), Likert-scale responses (disagree, neutral, agree), and level of education (high school, college, graduate school). Ordinal and nominal data are considered subtypes of categorical data. Numerical data, which represents amounts or quantities. For example: heights, prices, and distances.  We refer to these types as statistical data types, or simply data types.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6a117cff1fa314fa7459613e83322867","permalink":"https://greydongilmore.github.io/courses/ml_intro/04_03_ml_basics_data_types/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/04_03_ml_basics_data_types/","section":"courses","summary":"Data Types We often begin exploratory data analysis by examining the types of data that occur in a table. Although there are multiple ways of categorizing data types, in this book we discuss three broad types of data:","tags":null,"title":"Data Types","type":"docs"},{"authors":null,"categories":null,"content":"Having some features we can use to make predictions is great, but we also need to know what we\u0026rsquo;re trying to predict! Conventionally, the target of the prediction process is a vector of scores usually labeled y. The features are thus seperated into two main variables denoted with X and y. The X variable will contain all of the features and samples except for the output or target feature sale price. We are using sale price as our target predictor feature, which gets assigned to the y variable.\nfrom sklearn.model_selection import train_test_split # Set final input features and output variable y = X['SalePrice'] X = X.drop(['SalePrice'], axis =1) # Split data into test and train sets X_train, X_test, y_train, y_test = train_test_split(X, y.to_numpy().ravel(), test_size=0.30, random_state=101)  The first approach to remove some of the features will be to examine the correlation between the features and the independent variable (target) of sale price:\nimport seaborn as sns # matplotlib is Python's main plotting library. # the plt module provides high-level access to plots. import matplotlib.pyplot as plt ### tells the jupyter notebook to display plots in-line %matplotlib inline # Select only columns that are numeric all_data = all_data.select_dtypes(['number']) # Create correlation matrix correlation_matrix = all_data.corr() fig, ax = plt.subplots(figsize=(10,7)) sns.heatmap(data=correlation_matrix, annot=True, ax=ax);  We will now remove features that have a low correlation with sales price as these features to not contribute significantly:\n# Correlation with output variable cor_target = abs(correlation_matrix[\u0026quot;SalePrice\u0026quot;]) # Selecting correlated features above threshold relevant_features = cor_target[cor_target\u0026gt;0.1] X = all_data[relevant_features.index.values] # Remove any rows that contain NaN for ifeature in relevant_features.index.values: X = X[pd.notnull(X[ifeature])]  # Histogram of the sales X['SalePrice'].plot(kind='hist', color='purple', edgecolor='black', figsize=(10,6), bins = 30); plt.title('Distribution of House Sale Price', fontweight='bold'); plt.xlabel('Sale Price (USD)', fontweight='bold'); plt.ylabel('Frequency', fontweight='bold');  The cleaned-up version of the distribution of sales price, the dataset now contains 1121 samples and 27 features.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"62beaab597ad945f756d67fa92aafe69","permalink":"https://greydongilmore.github.io/courses/ml_intro/03_03_data_preprocessing_input_variables/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/03_03_data_preprocessing_input_variables/","section":"courses","summary":"Having some features we can use to make predictions is great, but we also need to know what we\u0026rsquo;re trying to predict! Conventionally, the target of the prediction process is a vector of scores usually labeled y.","tags":null,"title":"Input Variables","type":"docs"},{"authors":null,"categories":null,"content":"Pandas is a newer package built on top of NumPy, and provides an efficient implementation of a DataFrame. DataFrames are essentially multidimensional arrays with attached row and column labels, and often with heterogeneous types and/or missing data. As well as offering a convenient storage interface for labeled data, Pandas implements a number of powerful data operations familiar to users of both database frameworks and spreadsheet programs.\nAt the very basic level, Pandas objects can be thought of as enhanced versions of NumPy structured arrays in which the rows and columns are identified with labels rather than simple integer indices. As we will see during the course of this chapter, Pandas provides a host of useful tools, methods, and functionality on top of the basic data structures, but nearly everything that follows will require an understanding of what these structures are. Thus, before we go any further, let\u0026rsquo;s introduce these three fundamental Pandas data structures: the Series, DataFrame, and Index.\nSeries The first main data type we will learn about for pandas is the Series data type. Let\u0026rsquo;s import Pandas and explore the Series object. A Series is very similar to a NumPy array (in fact it is built on top of the NumPy array object). What differentiates the NumPy array from a Series, is that a Series can have axis labels, meaning it can be indexed by a label, instead of just a number location. It also doesn\u0026rsquo;t need to hold numeric data, it can hold any arbitrary Python Object.\nLet\u0026rsquo;s explore this concept through some examples:\nimport numpy as np import pandas as pd  You can convert a list,numpy array, or dictionary to a Series:\nlabels = ['a','b','c'] my_list = [10,20,30] arr = np.array([10,20,30]) d = {'a':10,'b':20,'c':30}  ** Using Lists**\npd.Series(data=my_list)  0 10 1 20 2 30 dtype: int64  pd.Series(data=my_list,index=labels)  a 10 b 20 c 30 dtype: int64  pd.Series(my_list,labels)  a 10 b 20 c 30 dtype: int64  ** NumPy Arrays **\npd.Series(arr)  0 10 1 20 2 30 dtype: int64  pd.Series(arr,labels)  a 10 b 20 c 30 dtype: int64  ** Dictionary**\npd.Series(d)  a 10 b 20 c 30 dtype: int64  Data in a Series A pandas Series can hold a variety of object types:\npd.Series(data=labels)  0 a 1 b 2 c dtype: object  # Even functions (although unlikely that you will use this) pd.Series([sum,print,len])  0 \u0026lt;built-in function sum\u0026gt; 1 \u0026lt;built-in function print\u0026gt; 2 \u0026lt;built-in function len\u0026gt; dtype: object  Using an Index The key to using a Series is understanding its index. Pandas makes use of these index names or numbers by allowing for fast look ups of information (works like a hash table or dictionary).\nLet\u0026rsquo;s see some examples of how to grab information from a Series. Let us create two sereis, ser1 and ser2:\nser1 = pd.Series([1,2,3,4],index = ['USA', 'Germany','USSR', 'Japan'])  ser1  USA 1 Germany 2 USSR 3 Japan 4 dtype: int64  ser2 = pd.Series([1,2,5,4],index = ['USA', 'Germany','Italy', 'Japan'])  ser2  USA 1 Germany 2 Italy 5 Japan 4 dtype: int64  ser1['USA']  1  Operations are then also done based off of index:\nser1 + ser2  Germany 4.0 Italy NaN Japan 8.0 USA 2.0 USSR NaN dtype: float64  Let\u0026rsquo;s stop here for now and move on to DataFrames, which will expand on the concept of Series!\nDataFrames DataFrames are the workhorse of pandas and are directly inspired by the R programming language. We can think of a DataFrame as a bunch of Series objects put together to share the same index. Let\u0026rsquo;s use pandas to explore this topic!\nimport pandas as pd import numpy as np  from numpy.random import randn np.random.seed(101)  df = pd.DataFrame(randn(5,4),index='A B C D E'.split(),columns='W X Y Z'.split())  df     W X Y Z     A 2.706850 0.628133 0.907969 0.503826   B 0.651118 -0.319318 -0.848077 0.605965   C -2.018168 0.740122 0.528813 -0.589001   D 0.188695 -0.758872 -0.933237 0.955057   E 0.190794 1.978757 2.605967 0.683509     Selection and Indexing Let\u0026rsquo;s learn the various methods to grab data from a DataFrame\ndf['W']  A 2.706850 B 0.651118 C -2.018168 D 0.188695 E 0.190794 Name: W, dtype: float64  # Pass a list of column names df[['W','Z']]     W Z     A 2.706850 0.503826   B 0.651118 0.605965   C -2.018168 -0.589001   D 0.188695 0.955057   E 0.190794 0.683509     # SQL Syntax (NOT RECOMMENDED!) df.W  A 2.706850 B 0.651118 C -2.018168 D 0.188695 E 0.190794 Name: W, dtype: float64  DataFrame Columns are just Series\ntype(df['W'])  pandas.core.series.Series  Creating a new column df['new'] = df['W'] + df['Y']  df     W X Y Z new     A 2.706850 0.628133 0.907969 0.503826 3.614819   B 0.651118 -0.319318 -0.848077 0.605965 -0.196959   C -2.018168 0.740122 0.528813 -0.589001 -1.489355   D 0.188695 -0.758872 -0.933237 0.955057 -0.744542   E 0.190794 1.978757 2.605967 0.683509 2.796762     Removing Columns df.drop('new',axis=1)     W X Y Z     A 2.706850 0.628133 0.907969 0.503826   B 0.651118 -0.319318 -0.848077 0.605965   C -2.018168 0.740122 0.528813 -0.589001   D 0.188695 -0.758872 -0.933237 0.955057   E 0.190794 1.978757 2.605967 0.683509     # Not inplace unless specified! df     W X Y Z new     A 2.706850 0.628133 0.907969 0.503826 3.614819   B 0.651118 -0.319318 -0.848077 0.605965 -0.196959   C -2.018168 0.740122 0.528813 -0.589001 -1.489355   D 0.188695 -0.758872 -0.933237 0.955057 -0.744542   E 0.190794 1.978757 2.605967 0.683509 2.796762     df.drop('new',axis=1,inplace=True)  df     W X Y Z     A 2.706850 0.628133 0.907969 0.503826   B 0.651118 -0.319318 -0.848077 0.605965   C -2.018168 0.740122 0.528813 -0.589001   D 0.188695 -0.758872 -0.933237 0.955057   E 0.190794 1.978757 2.605967 0.683509     Can also drop rows this way:\ndf.drop('E',axis=0)     W X Y Z     A 2.706850 0.628133 0.907969 0.503826   B 0.651118 -0.319318 -0.848077 0.605965   C -2.018168 0.740122 0.528813 -0.589001   D 0.188695 -0.758872 -0.933237 0.955057     Selecting Rows df.loc['A']  W 2.706850 X 0.628133 Y 0.907969 Z 0.503826 Name: A, dtype: float64  Or select based off of position instead of label\ndf.iloc[2]  W -2.018168 X 0.740122 Y 0.528813 Z -0.589001 Name: C, dtype: float64  Selecting subset of rows and columns df.loc['B','Y']  -0.84807698340363147  df.loc[['A','B'],['W','Y']]     W Y     A 2.706850 0.907969   B 0.651118 -0.848077     Conditional Selection An important feature of pandas is conditional selection using bracket notation, very similar to numpy:\ndf     W X Y Z     A 2.706850 0.628133 0.907969 0.503826   B 0.651118 -0.319318 -0.848077 0.605965   C -2.018168 0.740122 0.528813 -0.589001   D 0.188695 -0.758872 -0.933237 0.955057   E 0.190794 1.978757 2.605967 0.683509     df\u0026gt;0     W X Y Z     A True True True True   B True False False True   C False True True False   D True False False True   E True True True True     df[df\u0026gt;0]     W X Y Z     A 2.706850 0.628133 0.907969 0.503826   B 0.651118 NaN NaN 0.605965   C NaN 0.740122 0.528813 NaN   D 0.188695 NaN NaN 0.955057   E 0.190794 1.978757 2.605967 0.683509     df[df['W']\u0026gt;0]     W X Y Z     A 2.706850 0.628133 0.907969 0.503826   B 0.651118 -0.319318 -0.848077 0.605965   D 0.188695 -0.758872 -0.933237 0.955057   E 0.190794 1.978757 2.605967 0.683509     df[df['W']\u0026gt;0]['Y']  A 0.907969 B -0.848077 D -0.933237 E 2.605967 Name: Y, dtype: float64  df[df['W']\u0026gt;0][['Y','X']]     Y X     A 0.907969 0.628133   B -0.848077 -0.319318   D -0.933237 -0.758872   E 2.605967 1.978757     For two conditions you can use | and \u0026amp; with parenthesis:\ndf[(df['W']\u0026gt;0) \u0026amp; (df['Y'] \u0026gt; 1)]     W X Y Z     E 0.190794 1.978757 2.605967 0.683509     More Index Details Let\u0026rsquo;s discuss some more features of indexing, including resetting the index or setting it something else. We\u0026rsquo;ll also talk about index hierarchy!\ndf     W X Y Z     A 2.706850 0.628133 0.907969 0.503826   B 0.651118 -0.319318 -0.848077 0.605965   C -2.018168 0.740122 0.528813 -0.589001   D 0.188695 -0.758872 -0.933237 0.955057   E 0.190794 1.978757 2.605967 0.683509     # Reset to default 0,1...n index df.reset_index()     index W X Y Z     0 A 2.706850 0.628133 0.907969 0.503826   1 B 0.651118 -0.319318 -0.848077 0.605965   2 C -2.018168 0.740122 0.528813 -0.589001   3 D 0.188695 -0.758872 -0.933237 0.955057   4 E 0.190794 1.978757 2.605967 0.683509     newind = 'CA NY WY OR CO'.split()  df['States'] = newind  df     W X Y Z States     A 2.706850 0.628133 0.907969 0.503826 CA   B 0.651118 -0.319318 -0.848077 0.605965 NY   C -2.018168 0.740122 0.528813 -0.589001 WY   D 0.188695 -0.758872 -0.933237 0.955057 OR   E 0.190794 1.978757 2.605967 0.683509 CO     df.set_index('States')     W X Y Z   States         CA 2.706850 0.628133 0.907969 0.503826   NY 0.651118 -0.319318 -0.848077 0.605965   WY -2.018168 0.740122 0.528813 -0.589001   OR 0.188695 -0.758872 -0.933237 0.955057   CO 0.190794 1.978757 2.605967 0.683509     df     W X Y Z States     A 2.706850 0.628133 0.907969 0.503826 CA   B 0.651118 -0.319318 -0.848077 0.605965 NY   C -2.018168 0.740122 0.528813 -0.589001 WY   D 0.188695 -0.758872 -0.933237 0.955057 OR   E 0.190794 1.978757 2.605967 0.683509 CO     df.set_index('States',inplace=True)  df     W X Y Z   States         CA 2.706850 0.628133 0.907969 0.503826   NY 0.651118 -0.319318 -0.848077 0.605965   WY -2.018168 0.740122 0.528813 -0.589001   OR 0.188695 -0.758872 -0.933237 0.955057   CO 0.190794 1.978757 2.605967 0.683509     Multi-Index and Index Hierarchy Let us go over how to work with Multi-Index, first we\u0026rsquo;ll create a quick example of what a Multi-Indexed DataFrame would look like:\n# Index Levels outside = ['G1','G1','G1','G2','G2','G2'] inside = [1,2,3,1,2,3] hier_index = list(zip(outside,inside)) hier_index = pd.MultiIndex.from_tuples(hier_index)  hier_index  MultiIndex(levels=[['G1', 'G2'], [1, 2, 3]], labels=[[0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 1, 2]])  df = pd.DataFrame(np.random.randn(6,2),index=hier_index,columns=['A','B']) df      A B     G1 1 0.153661 0.167638   2 -0.765930 0.962299   3 0.902826 -0.537909   G2 1 -1.549671 0.435253   2 1.259904 -0.447898   3 0.266207 0.412580     Now let\u0026rsquo;s show how to index this! For index hierarchy we use df.loc[], if this was on the columns axis, you would just use normal bracket notation df[]. Calling one level of the index returns the sub-dataframe:\ndf.loc['G1']     A B     1 0.153661 0.167638   2 -0.765930 0.962299   3 0.902826 -0.537909     df.loc['G1'].loc[1]  A 0.153661 B 0.167638 Name: 1, dtype: float64  df.index.names  FrozenList([None, None])  df.index.names = ['Group','Num']  df      A B   Group Num       G1 1 0.153661 0.167638   2 -0.765930 0.962299   3 0.902826 -0.537909   G2 1 -1.549671 0.435253   2 1.259904 -0.447898   3 0.266207 0.412580     df.xs('G1')     A B   Num       1 0.153661 0.167638   2 -0.765930 0.962299   3 0.902826 -0.537909     df.xs(['G1',1])  A 0.153661 B 0.167638 Name: (G1, 1), dtype: float64  df.xs(1,level='Num')     A B   Group       G1 0.153661 0.167638   G2 -1.549671 0.435253     Missing Data Let\u0026rsquo;s show a few convenient methods to deal with Missing Data in pandas:\nimport numpy as np import pandas as pd  df = pd.DataFrame({'A':[1,2,np.nan], 'B':[5,np.nan,np.nan], 'C':[1,2,3]})  df     A B C     0 1.0 5.0 1   1 2.0 NaN 2   2 NaN NaN 3     df.dropna()     A B C     0 1.0 5.0 1     df.dropna(axis=1)     C     0 1   1 2   2 3     df.dropna(thresh=2)     A B C     0 1.0 5.0 1   1 2.0 NaN 2     df.fillna(value='FILL VALUE')     A B C     0 1 5 1   1 2 FILL VALUE 2   2 FILL VALUE FILL VALUE 3     df['A'].fillna(value=df['A'].mean())  0 1.0 1 2.0 2 1.5 Name: A, dtype: float64  Groupby The groupby method allows you to group rows of data together and call aggregate functions\nimport pandas as pd # Create dataframe data = {'Company':['GOOG','GOOG','MSFT','MSFT','FB','FB'], 'Person':['Sam','Charlie','Amy','Vanessa','Carl','Sarah'], 'Sales':[200,120,340,124,243,350]}  df = pd.DataFrame(data)  df     Company Person Sales     0 GOOG Sam 200   1 GOOG Charlie 120   2 MSFT Amy 340   3 MSFT Vanessa 124   4 FB Carl 243   5 FB Sarah 350     Now you can use the .groupby() method to group rows together based off of a column name. For instance let\u0026rsquo;s group based off of Company. This will create a DataFrameGroupBy object:\ndf.groupby('Company')  You can save this object as a new variable:\nby_comp = df.groupby(\u0026quot;Company\u0026quot;)  And then call aggregate methods off the object:\nby_comp.mean()     Sales   Company      FB 296.5   GOOG 160.0   MSFT 232.0     df.groupby('Company').mean()     Sales   Company      FB 296.5   GOOG 160.0   MSFT 232.0     More examples of aggregate methods:\nby_comp.std()     Sales   Company      FB 75.660426   GOOG 56.568542   MSFT 152.735065     by_comp.min()     Person Sales   Company       FB Carl 243   GOOG Charlie 120   MSFT Amy 124     by_comp.max()     Person Sales   Company       FB Sarah 350   GOOG Sam 200   MSFT Vanessa 340     by_comp.count()     Person Sales   Company       FB 2 2   GOOG 2 2   MSFT 2 2     by_comp.describe()      Sales   Company       FB count 2.000000   mean 296.500000   std 75.660426   min 243.000000   25% 269.750000   50% 296.500000   75% 323.250000   max 350.000000   GOOG count 2.000000   mean 160.000000   std 56.568542   min 120.000000   25% 140.000000   50% 160.000000   75% 180.000000   max 200.000000   MSFT count 2.000000   mean 232.000000   std 152.735065   min 124.000000   25% 178.000000   50% 232.000000   75% 286.000000   max 340.000000     by_comp.describe().transpose()     Company FB GOOG MSFT    count mean std min 25% 50% 75% max count mean ... 75% max count mean std min 25% 50% 75% max     Sales 2.0 296.5 75.660426 243.0 269.75 296.5 323.25 350.0 2.0 160.0 ... 180.0 200.0 2.0 232.0 152.735065 124.0 178.0 232.0 286.0 340.0    1 rows × 24 columns\n by_comp.describe().transpose()['GOOG']     count mean std min 25% 50% 75% max     Sales 2.0 160.0 56.568542 120.0 140.0 160.0 180.0 200.0     Merging, Joining, and Concatenating There are 3 main ways of combining DataFrames together: Merging, Joining and Concatenating. In this lecture we will discuss these 3 methods with examples.\nExample DataFrames import pandas as pd  df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3'], 'C': ['C0', 'C1', 'C2', 'C3'], 'D': ['D0', 'D1', 'D2', 'D3']}, index=[0, 1, 2, 3])  df2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7'], 'C': ['C4', 'C5', 'C6', 'C7'], 'D': ['D4', 'D5', 'D6', 'D7']}, index=[4, 5, 6, 7])  df3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'], 'B': ['B8', 'B9', 'B10', 'B11'], 'C': ['C8', 'C9', 'C10', 'C11'], 'D': ['D8', 'D9', 'D10', 'D11']}, index=[8, 9, 10, 11])  df1     A B C D     0 A0 B0 C0 D0   1 A1 B1 C1 D1   2 A2 B2 C2 D2   3 A3 B3 C3 D3     df2     A B C D     4 A4 B4 C4 D4   5 A5 B5 C5 D5   6 A6 B6 C6 D6   7 A7 B7 C7 D7     df3     A B C D     8 A8 B8 C8 D8   9 A9 B9 C9 D9   10 A10 B10 C10 D10   11 A11 B11 C11 D11     Concatenation Concatenation basically glues together DataFrames. Keep in mind that dimensions should match along the axis you are concatenating on. You can use pd.concat and pass in a list of DataFrames to concatenate together:\npd.concat([df1,df2,df3])     A B C D     0 A0 B0 C0 D0   1 A1 B1 C1 D1   2 A2 B2 C2 D2   3 A3 B3 C3 D3   4 A4 B4 C4 D4   5 A5 B5 C5 D5   6 A6 B6 C6 D6   7 A7 B7 C7 D7   8 A8 B8 C8 D8   9 A9 B9 C9 D9   10 A10 B10 C10 D10   11 A11 B11 C11 D11     pd.concat([df1,df2,df3],axis=1)     A B C D A B C D A B C D     0 A0 B0 C0 D0 NaN NaN NaN NaN NaN NaN NaN NaN   1 A1 B1 C1 D1 NaN NaN NaN NaN NaN NaN NaN NaN   2 A2 B2 C2 D2 NaN NaN NaN NaN NaN NaN NaN NaN   3 A3 B3 C3 D3 NaN NaN NaN NaN NaN NaN NaN NaN   4 NaN NaN NaN NaN A4 B4 C4 D4 NaN NaN NaN NaN   5 NaN NaN NaN NaN A5 B5 C5 D5 NaN NaN NaN NaN   6 NaN NaN NaN NaN A6 B6 C6 D6 NaN NaN NaN NaN   7 NaN NaN NaN NaN A7 B7 C7 D7 NaN NaN NaN NaN   8 NaN NaN NaN NaN NaN NaN NaN NaN A8 B8 C8 D8   9 NaN NaN NaN NaN NaN NaN NaN NaN A9 B9 C9 D9   10 NaN NaN NaN NaN NaN NaN NaN NaN A10 B10 C10 D10   11 NaN NaN NaN NaN NaN NaN NaN NaN A11 B11 C11 D11     Example DataFrames left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'], 'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']}) right = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'], 'C': ['C0', 'C1', 'C2', 'C3'], 'D': ['D0', 'D1', 'D2', 'D3']})  left     A B key     0 A0 B0 K0   1 A1 B1 K1   2 A2 B2 K2   3 A3 B3 K3     right     C D key     0 C0 D0 K0   1 C1 D1 K1   2 C2 D2 K2   3 C3 D3 K3     Merging The merge function allows you to merge DataFrames together using a similar logic as merging SQL Tables together. For example:\npd.merge(left,right,how='inner',on='key')     A B key C D     0 A0 B0 K0 C0 D0   1 A1 B1 K1 C1 D1   2 A2 B2 K2 C2 D2   3 A3 B3 K3 C3 D3     Or to show a more complicated example:\nleft = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'], 'key2': ['K0', 'K1', 'K0', 'K1'], 'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']}) right = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'], 'key2': ['K0', 'K0', 'K0', 'K0'], 'C': ['C0', 'C1', 'C2', 'C3'], 'D': ['D0', 'D1', 'D2', 'D3']})  pd.merge(left, right, on=['key1', 'key2'])     A B key1 key2 C D     0 A0 B0 K0 K0 C0 D0   1 A2 B2 K1 K0 C1 D1   2 A2 B2 K1 K0 C2 D2     pd.merge(left, right, how='outer', on=['key1', 'key2'])     A B key1 key2 C D     0 A0 B0 K0 K0 C0 D0   1 A1 B1 K0 K1 NaN NaN   2 A2 B2 K1 K0 C1 D1   3 A2 B2 K1 K0 C2 D2   4 A3 B3 K2 K1 NaN NaN   5 NaN NaN K2 K0 C3 D3     pd.merge(left, right, how='right', on=['key1', 'key2'])     A B key1 key2 C D     0 A0 B0 K0 K0 C0 D0   1 A2 B2 K1 K0 C1 D1   2 A2 B2 K1 K0 C2 D2   3 NaN NaN K2 K0 C3 D3     pd.merge(left, right, how='left', on=['key1', 'key2'])     A B key1 key2 C D     0 A0 B0 K0 K0 C0 D0   1 A1 B1 K0 K1 NaN NaN   2 A2 B2 K1 K0 C1 D1   3 A2 B2 K1 K0 C2 D2   4 A3 B3 K2 K1 NaN NaN     Joining Joining is a convenient method for combining the columns of two potentially differently-indexed DataFrames into a single result DataFrame.\nleft = pd.DataFrame({'A': ['A0', 'A1', 'A2'], 'B': ['B0', 'B1', 'B2']}, index=['K0', 'K1', 'K2']) right = pd.DataFrame({'C': ['C0', 'C2', 'C3'], 'D': ['D0', 'D2', 'D3']}, index=['K0', 'K2', 'K3'])  left.join(right)     A B C D     K0 A0 B0 C0 D0   K1 A1 B1 NaN NaN   K2 A2 B2 C2 D2     left.join(right, how='outer')     A B C D     K0 A0 B0 C0 D0   K1 A1 B1 NaN NaN   K2 A2 B2 C2 D2   K3 NaN NaN C3 D3     Operations There are lots of operations with pandas that will be really useful to you, but don\u0026rsquo;t fall into any distinct category. Let\u0026rsquo;s show them here in this lecture:\nimport pandas as pd df = pd.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']}) df.head()     col1 col2 col3     0 1 444 abc   1 2 555 def   2 3 666 ghi   3 4 444 xyz     Info on Unique Values df['col2'].unique()  array([444, 555, 666])  df['col2'].nunique()  3  df['col2'].value_counts()  444 2 555 1 666 1 Name: col2, dtype: int64  Selecting Data #Select from DataFrame using criteria from multiple columns newdf = df[(df['col1']\u0026gt;2) \u0026amp; (df['col2']==444)]  newdf     col1 col2 col3     3 4 444 xyz     Applying Functions def times2(x): return x*2  df['col1'].apply(times2)  0 2 1 4 2 6 3 8 Name: col1, dtype: int64  df['col3'].apply(len)  0 3 1 3 2 3 3 3 Name: col3, dtype: int64  df['col1'].sum()  10  Permanently Removing a Column del df['col1']  df     col2 col3     0 444 abc   1 555 def   2 666 ghi   3 444 xyz     Get column and index names df.columns  Index(['col2', 'col3'], dtype='object')  df.index  RangeIndex(start=0, stop=4, step=1)  Sorting and Ordering a DataFrame df     col2 col3     0 444 abc   1 555 def   2 666 ghi   3 444 xyz     df.sort_values(by='col2') #inplace=False by default     col2 col3     0 444 abc   3 444 xyz   1 555 def   2 666 ghi     Find Null Values or Check for Null Values df.isnull()     col2 col3     0 False False   1 False False   2 False False   3 False False     # Drop rows with NaN Values df.dropna()     col2 col3     0 444 abc   1 555 def   2 666 ghi   3 444 xyz     Filling in NaN values with something else import numpy as np  df = pd.DataFrame({'col1':[1,2,3,np.nan], 'col2':[np.nan,555,666,444], 'col3':['abc','def','ghi','xyz']}) df.head()     col1 col2 col3     0 1.0 NaN abc   1 2.0 555.0 def   2 3.0 666.0 ghi   3 NaN 444.0 xyz     df.fillna('FILL')     col1 col2 col3     0 1 FILL abc   1 2 555 def   2 3 666 ghi   3 FILL 444 xyz     data = {'A':['foo','foo','foo','bar','bar','bar'], 'B':['one','one','two','two','one','one'], 'C':['x','y','x','y','x','y'], 'D':[1,3,2,5,4,1]} df = pd.DataFrame(data)  df     A B C D     0 foo one x 1   1 foo one y 3   2 foo two x 2   3 bar two y 5   4 bar one x 4   5 bar one y 1     df.pivot_table(values='D',index=['A', 'B'],columns=['C'])     C x y   A B       bar one 4.0 1.0   two NaN 5.0   foo one 1.0 3.0   two 2.0 NaN     CSV Data CSV Input df = pd.read_csv('example') df     a b c d     0 0 1 2 3   1 4 5 6 7   2 8 9 10 11   3 12 13 14 15     CSV Output df.to_csv('example',index=False)  Excel Data Pandas can read and write excel files, keep in mind, this only imports data. Not formulas or images, having images or macros may cause this read_excel method to crash.\nExcel Input pd.read_excel('Excel_Sample.xlsx',sheetname='Sheet1')     a b c d     0 0 1 2 3   1 4 5 6 7   2 8 9 10 11   3 12 13 14 15     Excel Output df.to_excel('Excel_Sample.xlsx',sheet_name='Sheet1')  HTML Data You may need to install htmllib5,lxml, and BeautifulSoup4. In your terminal/command prompt run:\nconda install lxml conda install html5lib conda install BeautifulSoup4  Then restart Jupyter Notebook. (or use pip install if you aren\u0026rsquo;t using the Anaconda Distribution)\nPandas can read table tabs off of html. For example:\nHTML Input Pandas read_html function will read tables off of a webpage and return a list of DataFrame objects:\ndf = pd.read_html('http://www.fdic.gov/bank/individual/failed/banklist.html')  df[0]     Bank Name City ST CERT Acquiring Institution Closing Date Updated Date Loss Share Type Agreement Terminated Termination Date     0 First CornerStone Bank King of Prussia PA 35312 First-Citizens Bank \u0026amp; Trust Company May 6, 2016 July 12, 2016 none NaN NaN   1 Trust Company Bank Memphis TN 9956 The Bank of Fayette County April 29, 2016 August 4, 2016 none NaN NaN   2 North Milwaukee State Bank Milwaukee WI 20364 First-Citizens Bank \u0026amp; Trust Company March 11, 2016 June 16, 2016 none NaN NaN   3 Hometown National Bank Longview WA 35156 Twin City Bank October 2, 2015 April 13, 2016 none NaN NaN   4 The Bank of Georgia Peachtree City GA 35259 Fidelity Bank October 2, 2015 April 13, 2016 none NaN NaN   5 Premier Bank Denver CO 34112 United Fidelity Bank, fsb July 10, 2015 July 12, 2016 none NaN NaN   6 Edgebrook Bank Chicago IL 57772 Republic Bank of Chicago May 8, 2015 July 12, 2016 none NaN NaN   7 Doral BankEn Espanol San Juan PR 32102 Banco Popular de Puerto Rico February 27, 2015 May 13, 2015 none NaN NaN   8 Capitol City Bank \u0026amp; Trust Company Atlanta GA 33938 First-Citizens Bank \u0026amp; Trust Company February 13, 2015 April 21, 2015 none NaN NaN   9 Highland Community Bank Chicago IL 20290 United Fidelity Bank, fsb January 23, 2015 April 21, 2015 none NaN NaN   10 First National Bank of Crestview Crestview FL 17557 First NBC Bank January 16, 2015 January 15, 2016 none NaN NaN   11 Northern Star Bank Mankato MN 34983 BankVista December 19, 2014 January 6, 2016 none NaN NaN   12 Frontier Bank, FSB D/B/A El Paseo Bank Palm Desert CA 34738 Bank of Southern California, N.A. November 7, 2014 January 6, 2016 none NaN NaN   13 The National Republic Bank of Chicago Chicago IL 916 State Bank of Texas October 24, 2014 January 6, 2016 none NaN NaN   14 NBRS Financial Rising Sun MD 4862 Howard Bank October 17, 2014 March 26, 2015 none NaN NaN   15 GreenChoice Bank, fsb Chicago IL 28462 Providence Bank, LLC July 25, 2014 July 28, 2015 none NaN NaN   16 Eastside Commercial Bank Conyers GA 58125 Community \u0026amp; Southern Bank July 18, 2014 July 11, 2016 none NaN NaN   17 The Freedom State Bank Freedom OK 12483 Alva State Bank \u0026amp; Trust Company June 27, 2014 March 25, 2016 none NaN NaN   18 Valley Bank Fort Lauderdale FL 21793 Landmark Bank, National Association June 20, 2014 June 29, 2015 none NaN NaN   19 Valley Bank Moline IL 10450 Great Southern Bank June 20, 2014 June 26, 2015 none NaN NaN   20 Slavie Federal Savings Bank Bel Air MD 32368 Bay Bank, FSB May 30, 2014 June 15, 2015 none NaN NaN   21 Columbia Savings Bank Cincinnati OH 32284 United Fidelity Bank, fsb May 23, 2014 May 28, 2015 none NaN NaN   22 AztecAmerica Bank En Espanol Berwyn IL 57866 Republic Bank of Chicago May 16, 2014 July 18, 2014 none NaN NaN   23 Allendale County Bank Fairfax SC 15062 Palmetto State Bank April 25, 2014 July 18, 2014 none NaN NaN   24 Vantage Point Bank Horsham PA 58531 First Choice Bank February 28, 2014 March 3, 2015 none NaN NaN   25 Millennium Bank, National Association Sterling VA 35096 WashingtonFirst Bank February 28, 2014 March 03, 2015 none NaN NaN   26 Syringa Bank Boise ID 34296 Sunwest Bank January 31, 2014 April 12, 2016 none NaN NaN   27 The Bank of Union El Reno OK 17967 BancFirst January 24, 2014 March 25, 2016 none NaN NaN   28 DuPage National Bank West Chicago IL 5732 Republic Bank of Chicago January 17, 2014 February 19, 2015 none NaN NaN   29 Texas Community Bank, National Association The Woodlands TX 57431 Spirit of Texas Bank, SSB December 13, 2013 December 29, 2014 none NaN NaN   ... ... ... ... ... ... ... ... ... ... ...   515 ANB Financial, NA Bentonville AR 33901 Pulaski Bank and Trust Company May 9, 2008 August 28, 2012 none NaN NaN   516 Hume Bank Hume MO 1971 Security Bank March 7, 2008 August 28, 2012 none NaN NaN   517 Douglass National Bank Kansas City MO 24660 Liberty Bank and Trust Company January 25, 2008 October 26, 2012 none NaN NaN   518 Miami Valley Bank Lakeview OH 16848 The Citizens Banking Company October 4, 2007 August 28, 2012 none NaN NaN   519 NetBank Alpharetta GA 32575 ING DIRECT September 28, 2007 August 28, 2012 none NaN NaN   520 Metropolitan Savings Bank Pittsburgh PA 35353 Allegheny Valley Bank of Pittsburgh February 2, 2007 October 27, 2010 none NaN NaN   521 Bank of Ephraim Ephraim UT 1249 Far West Bank June 25, 2004 April 9, 2008 none NaN NaN   522 Reliance Bank White Plains NY 26778 Union State Bank March 19, 2004 April 9, 2008 none NaN NaN   523 Guaranty National Bank of Tallahassee Tallahassee FL 26838 Hancock Bank of Florida March 12, 2004 June 5, 2012 none NaN NaN   524 Dollar Savings Bank Newark NJ 31330 No Acquirer February 14, 2004 April 9, 2008 none NaN NaN   525 Pulaski Savings Bank Philadelphia PA 27203 Earthstar Bank November 14, 2003 July 22, 2005 none NaN NaN   526 First National Bank of Blanchardville Blanchardville WI 11639 The Park Bank May 9, 2003 June 5, 2012 none NaN NaN   527 Southern Pacific Bank Torrance CA 27094 Beal Bank February 7, 2003 October 20, 2008 none NaN NaN   528 Farmers Bank of Cheneyville Cheneyville LA 16445 Sabine State Bank \u0026amp; Trust December 17, 2002 October 20, 2004 none NaN NaN   529 Bank of Alamo Alamo TN 9961 No Acquirer November 8, 2002 March 18, 2005 none NaN NaN   530 AmTrade International BankEn Espanol Atlanta GA 33784 No Acquirer September 30, 2002 September 11, 2006 none NaN NaN   531 Universal Federal Savings Bank Chicago IL 29355 Chicago Community Bank June 27, 2002 April 9, 2008 none NaN NaN   532 Connecticut Bank of Commerce Stamford CT 19183 Hudson United Bank June 26, 2002 February 14, 2012 none NaN NaN   533 New Century Bank Shelby Township MI 34979 No Acquirer March 28, 2002 March 18, 2005 none NaN NaN   534 Net 1st National Bank Boca Raton FL 26652 Bank Leumi USA March 1, 2002 April 9, 2008 none NaN NaN   535 NextBank, NA Phoenix AZ 22314 No Acquirer February 7, 2002 February 5, 2015 none NaN NaN   536 Oakwood Deposit Bank Co. Oakwood OH 8966 The State Bank \u0026amp; Trust Company February 1, 2002 October 25, 2012 none NaN NaN   537 Bank of Sierra Blanca Sierra Blanca TX 22002 The Security State Bank of Pecos January 18, 2002 November 6, 2003 none NaN NaN   538 Hamilton Bank, NAEn Espanol Miami FL 24382 Israel Discount Bank of New York January 11, 2002 September 21, 2015 none NaN NaN   539 Sinclair National Bank Gravette AR 34248 Delta Trust \u0026amp; Bank September 7, 2001 February 10, 2004 none NaN NaN   540 Superior Bank, FSB Hinsdale IL 32646 Superior Federal, FSB July 27, 2001 August 19, 2014 none NaN NaN   541 Malta National Bank Malta OH 6629 North Valley Bank May 3, 2001 November 18, 2002 none NaN NaN   542 First Alliance Bank \u0026amp; Trust Co. Manchester NH 34264 Southern New Hampshire Bank \u0026amp; Trust February 2, 2001 February 18, 2003 none NaN NaN   543 National State Bank of Metropolis Metropolis IL 3815 Banterra Bank of Marion December 14, 2000 March 17, 2005 none NaN NaN   544 Bank of Honolulu Honolulu HI 21029 Bank of the Orient October 13, 2000 March 17, 2005 none NaN NaN    545 rows × 10 columns\n SQL Data  Note: If you are completely unfamiliar with SQL you can check out my other course: \u0026ldquo;Complete SQL Bootcamp\u0026rdquo; to learn SQL.  The pandas.io.sql module provides a collection of query wrappers to both facilitate data retrieval and to reduce dependency on DB-specific API. Database abstraction is provided by SQLAlchemy if installed. In addition you will need a driver library for your database. Examples of such drivers are psycopg2 for PostgreSQL or pymysql for MySQL. For SQLite this is included in Python’s standard library by default. You can find an overview of supported drivers for each SQL dialect in the SQLAlchemy docs.\nIf SQLAlchemy is not installed, a fallback is only provided for sqlite (and for mysql for backwards compatibility, but this is deprecated and will be removed in a future version). This mode requires a Python database adapter which respect the Python DB-API.\nSee also some cookbook examples for some advanced strategies.\nThe key functions are:\n read_sql_table(table_name, con[, schema, \u0026hellip;])  Read SQL database table into a DataFrame.   read_sql_query(sql, con[, index_col, \u0026hellip;])  Read SQL query into a DataFrame.   read_sql(sql, con[, index_col, \u0026hellip;])  Read SQL query or database table into a DataFrame.   DataFrame.to_sql(name, con[, flavor, \u0026hellip;])  Write records stored in a DataFrame to a SQL database.    from sqlalchemy import create_engine  engine = create_engine('sqlite:///:memory:')  df.to_sql('data', engine)  sql_df = pd.read_sql('data',con=engine)  sql_df     index a b c d     0 0 0 1 2 3   1 1 4 5 6 7   2 2 8 9 10 11   3 3 12 13 14 15     ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"d984c13208229a93e9c899700b702a6b","permalink":"https://greydongilmore.github.io/courses/ml_intro/01_03_python_basics_pandas/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/01_03_python_basics_pandas/","section":"courses","summary":"Pandas is a newer package built on top of NumPy, and provides an efficient implementation of a DataFrame. DataFrames are essentially multidimensional arrays with attached row and column labels, and often with heterogeneous types and/or missing data.","tags":null,"title":"Pandas","type":"docs"},{"authors":null,"categories":null,"content":"Transformations of predictor variables may be needed for several reasons. Some modeling techniques may have strict requirements, such as the predictors having a common scale. In other cases, creating a good model may be difficult due to specific characteristics of the data (e.g., outliers). There are several methods to transform data prior to modelling, which include: standardization, min-max scaling and unit vector normalization.\nStandardization (Z normalization) The most straightforward and common data transformation is to standardize the data. To standardize the data, the average predictor value is subtracted from all the values. As a result of standardizing, the predictor has a mean of 0 and a standard deviation of 1.\nWe will use scikit-learn function StandardScaler:\n# Standardize data (0 mean, 1 stdev) from sklearn.preprocessing import StandardScaler import pandas import numpy from sklearn import datasets # Load a dictionary (technically, a Bunch) containing the data iris = datasets.load_iris() # 'data' and 'target' contains the feature data and classes, respectively X, y = iris['data'], iris['target'] scaler = StandardScaler().fit(X) rescaledX = scaler.transform(X) # summarize transformed data print(rescaledX[0:5,:])  [[-0.90068117 1.01900435 -1.34022653 -1.3154443 ] [-1.14301691 -0.13197948 -1.34022653 -1.3154443 ] [-1.38535265 0.32841405 -1.39706395 -1.3154443 ] [-1.50652052 0.09821729 -1.2833891 -1.3154443 ] [-1.02184904 1.24920112 -1.34022653 -1.3154443 ]]  The values for each attribute now have a mean value of 0 and a standard deviation of 1.\nMin-Max Normalization (Rescale) When your data is comprised of attributes with varying scales, many machine learning algorithms can benefit from rescaling the attributes to all have the same scale. Often this is referred to as min-max normalization and attributes are often rescaled into the range between 0 and 1. This is useful for optimization algorithms used in the core of machine learning algorithms like gradient descent. It is also useful for algorithms that weight inputs like regression and neural networks and algorithms that use distance measures like K-Nearest Neighbors.\nWe will use scikit-learn function MinMaxScaler:\n# Rescale data (between 0 and 1) from sklearn.preprocessing import MinMaxScaler scaler = MinMaxScaler(feature_range=(0, 1)) rescaledX = scaler.fit_transform(X) # summarize transformed data print(rescaledX[0:5,:])  [[0.22222222 0.625 0.06779661 0.04166667] [0.16666667 0.41666667 0.06779661 0.04166667] [0.11111111 0.5 0.05084746 0.04166667] [0.08333333 0.45833333 0.08474576 0.04166667] [0.19444444 0.66666667 0.06779661 0.04166667]]  The rows are normalized to length 1.\nUnit Vector Normalization Each sample (i.e. each row of the data matrix) with at least one non zero component is rescaled independently of other data samples so that its norm equals 1 (called a unit norm in linear algebra). This preprocessing can be useful for sparse datasets (lots of zeros) with attributes of varying scales when using algorithms that weight input values such as neural networks and algorithms that use distance measures such as K-Nearest Neighbors.\nWe will use scikit-learn function Normalizer:\n# Normalize data (length of 1) from sklearn.preprocessing import Normalizer scaler = Normalizer().fit(X) normalizedX = scaler.transform(X) # summarize transformed data print(normalizedX[0:5,:])  [[0.80377277 0.55160877 0.22064351 0.0315205 ] [0.82813287 0.50702013 0.23660939 0.03380134] [0.80533308 0.54831188 0.2227517 0.03426949] [0.80003025 0.53915082 0.26087943 0.03478392] [0.790965 0.5694948 0.2214702 0.0316386 ]]  The rows are normalized to length 1.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"959546478f04ce0f5a490abd321bae06","permalink":"https://greydongilmore.github.io/courses/ml_intro/03_04_data_preprocessing_transformations/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/03_04_data_preprocessing_transformations/","section":"courses","summary":"Transformations of predictor variables may be needed for several reasons. Some modeling techniques may have strict requirements, such as the predictors having a common scale. In other cases, creating a good model may be difficult due to specific characteristics of the data (e.","tags":null,"title":"Data Transformations","type":"docs"},{"authors":null,"categories":null,"content":"Let\u0026rsquo;s discuss some plots that allow us to visualize the distribution of a data set. These plots are:\n distplot jointplot pairplot rugplot kdeplot   Imports import seaborn as sns %matplotlib inline  Data Seaborn comes with built-in data sets!\ntips = sns.load_dataset('tips')  tips.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  total_bill tip sex smoker day time size     0 16.99 1.01 Female No Sun Dinner 2   1 10.34 1.66 Male No Sun Dinner 3   2 21.01 3.50 Male No Sun Dinner 3   3 23.68 3.31 Male No Sun Dinner 2   4 24.59 3.61 Female No Sun Dinner 4     distplot The distplot shows the distribution of a univariate set of observations.\nsns.distplot(tips['total_bill']) # Safe to ignore warnings  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f094c6b3a90\u0026gt;     To remove the kde layer and just have the histogram use:\nsns.distplot(tips['total_bill'],kde=False,bins=30)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f094a543e10\u0026gt;     jointplot jointplot() allows you to basically match up two distplots for bivariate data. With your choice of what kind parameter to compare with:\n “scatter” “reg” “resid” “kde” “hex”  sns.jointplot(x='total_bill',y='tip',data=tips,kind='scatter')  \u0026lt;seaborn.axisgrid.JointGrid at 0x7f0949ed63c8\u0026gt;     sns.jointplot(x='total_bill',y='tip',data=tips,kind='hex')  \u0026lt;seaborn.axisgrid.JointGrid at 0x7f094cf28cc0\u0026gt;     sns.jointplot(x='total_bill',y='tip',data=tips,kind='reg')  \u0026lt;seaborn.axisgrid.JointGrid at 0x7f0949ce0eb8\u0026gt;     pairplot pairplot will plot pairwise relationships across an entire dataframe (for the numerical columns) and supports a color hue argument (for categorical columns).\nsns.pairplot(tips)  \u0026lt;seaborn.axisgrid.PairGrid at 0x7f0949a907f0\u0026gt;     sns.pairplot(tips,hue='sex',palette='coolwarm')  \u0026lt;seaborn.axisgrid.PairGrid at 0x7f094968dda0\u0026gt;     rugplot rugplots are actually a very simple concept, they just draw a dash mark for every point on a univariate distribution. They are the building block of a KDE plot:\nsns.rugplot(tips['total_bill'])  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f094913c898\u0026gt;     kdeplot kdeplots are Kernel Density Estimation plots. These KDE plots replace every single observation with a Gaussian (Normal) distribution centered around that value. For example:\n# Don't worry about understanding this code! # It's just for the diagram below import numpy as np import matplotlib.pyplot as plt from scipy import stats #Create dataset dataset = np.random.randn(25) # Create another rugplot sns.rugplot(dataset); # Set up the x-axis for the plot x_min = dataset.min() - 2 x_max = dataset.max() + 2 # 100 equally spaced points from x_min to x_max x_axis = np.linspace(x_min,x_max,100) # Set up the bandwidth, for info on this: url = 'http://en.wikipedia.org/wiki/Kernel_density_estimation#Practical_estimation_of_the_bandwidth' bandwidth = ((4*dataset.std()**5)/(3*len(dataset)))**.2 # Create an empty kernel list kernel_list = [] # Plot each basis function for data_point in dataset: # Create a kernel for each point and append to list kernel = stats.norm(data_point,bandwidth).pdf(x_axis) kernel_list.append(kernel) #Scale for plotting kernel = kernel / kernel.max() kernel = kernel * .4 plt.plot(x_axis,kernel,color = 'grey',alpha=0.5) plt.ylim(0,1)  (0, 1)     # To get the kde plot we can sum these basis functions. # Plot the sum of the basis function sum_of_kde = np.sum(kernel_list,axis=0) # Plot figure fig = plt.plot(x_axis,sum_of_kde,color='indianred') # Add the initial rugplot sns.rugplot(dataset,c = 'indianred') # Get rid of y-tick marks plt.yticks([]) # Set title plt.suptitle(\u0026quot;Sum of the Basis Functions\u0026quot;)  Text(0.5, 0.98, 'Sum of the Basis Functions')     So with our tips dataset:\nsns.kdeplot(tips['total_bill']) sns.rugplot(tips['total_bill'])  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f09491856a0\u0026gt;     sns.kdeplot(tips['tip']) sns.rugplot(tips['tip'])  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f0948023e80\u0026gt;     ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"50c745831ff2de33d8e2c50e757d1f6a","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_04_plotting_distribution/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_04_plotting_distribution/","section":"courses","summary":"Let\u0026rsquo;s discuss some plots that allow us to visualize the distribution of a data set. These plots are:\n distplot jointplot pairplot rugplot kdeplot   Imports import seaborn as sns %matplotlib inline  Data Seaborn comes with built-in data sets!","tags":null,"title":"Distribution Plots","type":"docs"},{"authors":null,"categories":null,"content":"Now let\u0026rsquo;s discuss using seaborn to plot categorical data! There are a few main plot types for this:\n factorplot boxplot violinplot stripplot swarmplot barplot countplot  Let\u0026rsquo;s go through examples of each!\nimport seaborn as sns %matplotlib inline  tips = sns.load_dataset('tips') tips.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  total_bill tip sex smoker day time size     0 16.99 1.01 Female No Sun Dinner 2   1 10.34 1.66 Male No Sun Dinner 3   2 21.01 3.50 Male No Sun Dinner 3   3 23.68 3.31 Male No Sun Dinner 2   4 24.59 3.61 Female No Sun Dinner 4     barplot and countplot These very similar plots allow you to get aggregate data off a categorical feature in your data. barplot is a general plot that allows you to aggregate the categorical data based off some function, by default the mean:\nsns.barplot(x='sex',y='total_bill',data=tips)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c50fa58\u0026gt;     import numpy as np  You can change the estimator object to your own function, that converts a vector to a scalar:\nsns.barplot(x='sex',y='total_bill',data=tips,estimator=np.std)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c506dd8\u0026gt;     countplot This is essentially the same as barplot except the estimator is explicitly counting the number of occurrences. Which is why we only pass the x value:\nsns.countplot(x='sex',data=tips)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c460e48\u0026gt;     boxplot and violinplot boxplots and violinplots are used to shown the distribution of categorical data. A box plot (or box-and-whisker plot) shows the distribution of quantitative data in a way that facilitates comparisons between variables or across levels of a categorical variable. The box shows the quartiles of the dataset while the whiskers extend to show the rest of the distribution, except for points that are determined to be “outliers” using a method that is a function of the inter-quartile range.\nsns.boxplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, data=tips,palette='rainbow')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c4e5710\u0026gt;     # Can do entire dataframe with orient='h' sns.boxplot(data=tips,palette='rainbow',orient='h')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c352080\u0026gt;     sns.boxplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, hue=\u0026quot;smoker\u0026quot;,data=tips, palette=\u0026quot;coolwarm\u0026quot;)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c34b6d8\u0026gt;     violinplot A violin plot plays a similar role as a box and whisker plot. It shows the distribution of quantitative data across several levels of one (or more) categorical variables such that those distributions can be compared. Unlike a box plot, in which all of the plot components correspond to actual datapoints, the violin plot features a kernel density estimation of the underlying distribution.\nsns.violinplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, data=tips,palette='rainbow')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c1cc9b0\u0026gt;     sns.violinplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, data=tips,hue='sex',palette='Set1')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c14e470\u0026gt;     sns.violinplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, data=tips,hue='sex',split=True,palette='Set1')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c0f6f98\u0026gt;     stripplot and swarmplot The stripplot will draw a scatterplot where one variable is categorical. A strip plot can be drawn on its own, but it is also a good complement to a box or violin plot in cases where you want to show all observations along with some representation of the underlying distribution.\nThe swarmplot is similar to stripplot(), but the points are adjusted (only along the categorical axis) so that they don’t overlap. This gives a better representation of the distribution of values, although it does not scale as well to large numbers of observations (both in terms of the ability to show all the points and in terms of the computation needed to arrange them).\nsns.stripplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, data=tips)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527c0206d8\u0026gt;     sns.stripplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, data=tips,jitter=True)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527bff4a20\u0026gt;     sns.stripplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, data=tips,jitter=True,hue='sex',palette='Set1')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527bf5d9e8\u0026gt;     sns.stripplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, data=tips,jitter=True,hue='sex',palette='Set1',dodge=True)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527beceba8\u0026gt;     sns.swarmplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;, data=tips)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527beb88d0\u0026gt;     sns.swarmplot(x=\u0026quot;day\u0026quot;, y=\u0026quot;total_bill\u0026quot;,hue='sex',data=tips, palette=\u0026quot;Set1\u0026quot;, dodge=True)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527be82d68\u0026gt;     Combining Categorical Plots sns.violinplot(x=\u0026quot;tip\u0026quot;, y=\u0026quot;day\u0026quot;, data=tips,palette='rainbow') sns.swarmplot(x=\u0026quot;tip\u0026quot;, y=\u0026quot;day\u0026quot;, data=tips,color='black',size=3)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f527be088d0\u0026gt;     factorplot factorplot is the most general form of a categorical plot. It can take in a kind parameter to adjust the plot type:\nsns.catplot(x='sex',y='total_bill',data=tips,kind='bar')  \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f527bece4a8\u0026gt;     ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"860b8807f0e19558c9b55125105f7adc","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_05_plotting_categorical/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_05_plotting_categorical/","section":"courses","summary":"Now let\u0026rsquo;s discuss using seaborn to plot categorical data! There are a few main plot types for this:\n factorplot boxplot violinplot stripplot swarmplot barplot countplot  Let\u0026rsquo;s go through examples of each!","tags":null,"title":"Categorical Data Plots","type":"docs"},{"authors":null,"categories":null,"content":"Matrix plots allow you to plot data as color-encoded matrices and can also be used to indicate clusters within the data (later in the machine learning section we will learn how to formally cluster data).\nLet\u0026rsquo;s begin by exploring seaborn\u0026rsquo;s heatmap and clutermap:\nimport seaborn as sns %matplotlib inline  flights = sns.load_dataset('flights')  tips = sns.load_dataset('tips')  tips.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  total_bill tip sex smoker day time size     0 16.99 1.01 Female No Sun Dinner 2   1 10.34 1.66 Male No Sun Dinner 3   2 21.01 3.50 Male No Sun Dinner 3   3 23.68 3.31 Male No Sun Dinner 2   4 24.59 3.61 Female No Sun Dinner 4     flights.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  year month passengers     0 1949 January 112   1 1949 February 118   2 1949 March 132   3 1949 April 129   4 1949 May 121     Heatmap In order for a heatmap to work properly, your data should already be in a matrix form, the sns.heatmap function basically just colors it in for you. For example:\ntips.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  total_bill tip sex smoker day time size     0 16.99 1.01 Female No Sun Dinner 2   1 10.34 1.66 Male No Sun Dinner 3   2 21.01 3.50 Male No Sun Dinner 3   3 23.68 3.31 Male No Sun Dinner 2   4 24.59 3.61 Female No Sun Dinner 4     # Matrix form for correlation data tips.corr()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  total_bill tip size     total_bill 1.000000 0.675734 0.598315   tip 0.675734 1.000000 0.489299   size 0.598315 0.489299 1.000000     sns.heatmap(tips.corr())  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f66fe34a4e0\u0026gt;     sns.heatmap(tips.corr(),cmap='coolwarm',annot=True)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f66fc24a4e0\u0026gt;     Or for the flights data:\nflights.pivot_table(values='passengers',index='month',columns='year')   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n year 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960   month                 January 112 115 145 171 196 204 242 284 315 340 360 417   February 118 126 150 180 196 188 233 277 301 318 342 391   March 132 141 178 193 236 235 267 317 356 362 406 419   April 129 135 163 181 235 227 269 313 348 348 396 461   May 121 125 172 183 229 234 270 318 355 363 420 472   June 135 149 178 218 243 264 315 374 422 435 472 535   July 148 170 199 230 264 302 364 413 465 491 548 622   August 148 170 199 242 272 293 347 405 467 505 559 606   September 136 158 184 209 237 259 312 355 404 404 463 508   October 119 133 162 191 211 229 274 306 347 359 407 461   November 104 114 146 172 180 203 237 271 305 310 362 390   December 118 140 166 194 201 229 278 306 336 337 405 432     pvflights = flights.pivot_table(values='passengers',index='month',columns='year') sns.heatmap(pvflights)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f66fbab1eb8\u0026gt;     sns.heatmap(pvflights,cmap='magma',linecolor='white',linewidths=1)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f66fb9f0080\u0026gt;     clustermap The clustermap uses hierarchal clustering to produce a clustered version of the heatmap. For example:\nsns.clustermap(pvflights)  \u0026lt;seaborn.matrix.ClusterGrid at 0x7f66fba5a080\u0026gt;     Notice now how the years and months are no longer in order, instead they are grouped by similarity in value (passenger count). That means we can begin to infer things from this plot, such as August and July being similar (makes sense, since they are both summer travel months)\n# More options to get the information a little clearer like normalization sns.clustermap(pvflights,cmap='coolwarm',standard_scale=1)  \u0026lt;seaborn.matrix.ClusterGrid at 0x7f66fe335be0\u0026gt;     ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"d1c81e0968badeec1ed11e23ed2b8dda","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_06_plotting_matrix/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_06_plotting_matrix/","section":"courses","summary":"Matrix plots allow you to plot data as color-encoded matrices and can also be used to indicate clusters within the data (later in the machine learning section we will learn how to formally cluster data).","tags":null,"title":"Matrix Plots","type":"docs"},{"authors":null,"categories":null,"content":"Grids are general types of plots that allow you to map plot types to rows and columns of a grid, this helps you create similar plots separated by features.\nimport seaborn as sns import matplotlib.pyplot as plt %matplotlib inline  iris = sns.load_dataset('iris')  iris.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  sepal_length sepal_width petal_length petal_width species     0 5.1 3.5 1.4 0.2 setosa   1 4.9 3.0 1.4 0.2 setosa   2 4.7 3.2 1.3 0.2 setosa   3 4.6 3.1 1.5 0.2 setosa   4 5.0 3.6 1.4 0.2 setosa     PairGrid Pairgrid is a subplot grid for plotting pairwise relationships in a dataset.\n# Just the Grid sns.PairGrid(iris)  \u0026lt;seaborn.axisgrid.PairGrid at 0x7f00d6bfccf8\u0026gt;     # Then you map to the grid g = sns.PairGrid(iris) g.map(plt.scatter)  \u0026lt;seaborn.axisgrid.PairGrid at 0x7f00d3ccf898\u0026gt;     # Map to upper,lower, and diagonal g = sns.PairGrid(iris) g.map_diag(plt.hist) g.map_upper(plt.scatter) g.map_lower(sns.kdeplot)  \u0026lt;seaborn.axisgrid.PairGrid at 0x7f00d30b4978\u0026gt;     pairplot pairplot is a simpler version of PairGrid (you\u0026rsquo;ll use quite often)\nsns.pairplot(iris)  \u0026lt;seaborn.axisgrid.PairGrid at 0x7f00d0f46fd0\u0026gt;     sns.pairplot(iris,hue='species',palette='rainbow')  \u0026lt;seaborn.axisgrid.PairGrid at 0x7f00d0925908\u0026gt;     Facet Grid FacetGrid is the general way to create grids of plots based off of a feature:\ntips = sns.load_dataset('tips')  tips.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  total_bill tip sex smoker day time size     0 16.99 1.01 Female No Sun Dinner 2   1 10.34 1.66 Male No Sun Dinner 3   2 21.01 3.50 Male No Sun Dinner 3   3 23.68 3.31 Male No Sun Dinner 2   4 24.59 3.61 Female No Sun Dinner 4     # Just the Grid g = sns.FacetGrid(tips, col=\u0026quot;time\u0026quot;, row=\u0026quot;smoker\u0026quot;)     g = sns.FacetGrid(tips, col=\u0026quot;time\u0026quot;, row=\u0026quot;smoker\u0026quot;) g = g.map(plt.hist, \u0026quot;total_bill\u0026quot;)     g = sns.FacetGrid(tips, col=\u0026quot;time\u0026quot;, row=\u0026quot;smoker\u0026quot;,hue='sex') # Notice hwo the arguments come after plt.scatter call g = g.map(plt.scatter, \u0026quot;total_bill\u0026quot;, \u0026quot;tip\u0026quot;).add_legend()     JointGrid JointGrid is the general version for jointplot() type grids, for a quick example:\ng = sns.JointGrid(x=\u0026quot;total_bill\u0026quot;, y=\u0026quot;tip\u0026quot;, data=tips)     g = sns.JointGrid(x=\u0026quot;total_bill\u0026quot;, y=\u0026quot;tip\u0026quot;, data=tips) g = g.plot(sns.regplot, sns.distplot)     Reference the documentation as necessary for grid types, but most of the time you\u0026rsquo;ll just use the easier plots discussed earlier.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"c12f92cdd2e031bddcd5f2965c313f87","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_07_plotting_grid/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_07_plotting_grid/","section":"courses","summary":"Grids are general types of plots that allow you to map plot types to rows and columns of a grid, this helps you create similar plots separated by features.\nimport seaborn as sns import matplotlib.","tags":null,"title":"Grids Plots","type":"docs"},{"authors":null,"categories":null,"content":"Seaborn has many built-in capabilities for regression plots, however we won\u0026rsquo;t really discuss regression until the machine learning section of the course, so we will only cover the lmplot() function for now.\nlmplot allows you to display linear models, but it also conveniently allows you to split up those plots based off of features, as well as coloring the hue based off of features.\nLet\u0026rsquo;s explore how this works:\nimport seaborn as sns %matplotlib inline  tips = sns.load_dataset('tips')  tips.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  total_bill tip sex smoker day time size     0 16.99 1.01 Female No Sun Dinner 2   1 10.34 1.66 Male No Sun Dinner 3   2 21.01 3.50 Male No Sun Dinner 3   3 23.68 3.31 Male No Sun Dinner 2   4 24.59 3.61 Female No Sun Dinner 4     lmplot() sns.lmplot(x='total_bill',y='tip',data=tips)  \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f62f3a8d588\u0026gt;     sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex')  \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f62f19f72b0\u0026gt;     sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',palette='coolwarm')  \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f62f12adf60\u0026gt;     Working with Markers lmplot kwargs get passed through to regplot which is a more general form of lmplot(). regplot has a scatter_kws parameter that gets passed to plt.scatter. So you want to set the s parameter in that dictionary, which corresponds (a bit confusingly) to the squared markersize. In other words you end up passing a dictionary with the base matplotlib arguments, in this case, s for size of a scatter plot. In general, you probably won\u0026rsquo;t remember this off the top of your head, but instead reference the documentation.\n# http://matplotlib.org/api/markers_api.html sns.lmplot(x='total_bill',y='tip',data=tips,hue='sex',palette='coolwarm', markers=['o','v'],scatter_kws={'s':100})  \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f62f1230128\u0026gt;     Using a Grid We can add more variable separation through columns and rows with the use of a grid. Just indicate this with the col or row arguments:\nsns.lmplot(x='total_bill',y='tip',data=tips,col='sex')  \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f62f11b45f8\u0026gt;     sns.lmplot(x=\u0026quot;total_bill\u0026quot;, y=\u0026quot;tip\u0026quot;, row=\u0026quot;sex\u0026quot;, col=\u0026quot;time\u0026quot;,data=tips)  \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f62f1155fd0\u0026gt;     sns.lmplot(x='total_bill',y='tip',data=tips,col='day',hue='sex',palette='coolwarm')  \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f62f0dbe0f0\u0026gt;     Aspect and Size Seaborn figures can have their size and aspect ratio adjusted with the size and aspect parameters:\nsns.lmplot(x='total_bill',y='tip',data=tips,col='day',hue='sex',palette='coolwarm', aspect=0.6,size=8)  /home/ggilmore/.local/lib/python3.6/site-packages/seaborn/regression.py:546: UserWarning: The `size` paramter has been renamed to `height`; please update your code. warnings.warn(msg, UserWarning) \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f62f008ef98\u0026gt;     You\u0026rsquo;re probably wondering how to change the font size or control the aesthetics even more, check out the Style and Color Lecture and Notebook for more info on that!\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"795f5a5cf943b299c2798a461c489804","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_08_plotting_regression/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_08_plotting_regression/","section":"courses","summary":"Seaborn has many built-in capabilities for regression plots, however we won\u0026rsquo;t really discuss regression until the machine learning section of the course, so we will only cover the lmplot() function for now.","tags":null,"title":"Regression Plots","type":"docs"},{"authors":null,"categories":null,"content":"We\u0026rsquo;ve shown a few times how to control figure aesthetics in seaborn, but let\u0026rsquo;s now go over it formally:\nimport seaborn as sns import matplotlib.pyplot as plt %matplotlib inline tips = sns.load_dataset('tips')  Styles You can set particular styles:\nsns.countplot(x='sex',data=tips)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f3651d0\u0026gt;     sns.set_style('white') sns.countplot(x='sex',data=tips)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f2bf3c8\u0026gt;     sns.set_style('ticks') sns.countplot(x='sex',data=tips,palette='deep')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f279ef0\u0026gt;     Spine Removal sns.countplot(x='sex',data=tips) sns.despine()     sns.countplot(x='sex',data=tips) sns.despine(left=True)     Size and Aspect You can use matplotlib\u0026rsquo;s **plt.figure(figsize=(width,height) ** to change the size of most seaborn plots.\nYou can control the size and aspect ratio of most seaborn grid plots by passing in parameters: size, and aspect. For example:\n# Non Grid Plot plt.figure(figsize=(12,3)) sns.countplot(x='sex',data=tips)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f4d8b38\u0026gt;     # Grid Type Plot sns.lmplot(x='total_bill',y='tip',height=2,aspect=4,data=tips)  /home/ggilmore/.local/lib/python3.6/site-packages/seaborn/axisgrid.py:375: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all axes decorations. fig.tight_layout() /home/ggilmore/.local/lib/python3.6/site-packages/seaborn/axisgrid.py:848: UserWarning: Tight layout not applied. The bottom and top margins cannot be made large enough to accommodate all axes decorations. self.fig.tight_layout() \u0026lt;seaborn.axisgrid.FacetGrid at 0x7f1d2f1e7860\u0026gt;     Scale and Context The set_context() allows you to override default parameters:\nsns.set_context('poster',font_scale=4) sns.countplot(x='sex',data=tips,palette='coolwarm')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7f1d2f1e7b70\u0026gt;     Check out the documentation page for more info on these topics: https://stanford.edu/~mwaskom/software/seaborn/tutorial/aesthetics.html\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"8aed67701bf90f3d31c9105967e0ff29","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_09_plotting_style_color/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_09_plotting_style_color/","section":"courses","summary":"We\u0026rsquo;ve shown a few times how to control figure aesthetics in seaborn, but let\u0026rsquo;s now go over it formally:\nimport seaborn as sns import matplotlib.pyplot as plt %matplotlib inline tips = sns.","tags":null,"title":"Plots Style and Color","type":"docs"},{"authors":null,"categories":null,"content":"In this lecture we will learn about pandas built-in capabilities for data visualization! It\u0026rsquo;s built-off of matplotlib, but it baked into pandas for easier usage!\nLet\u0026rsquo;s take a look!\nImports import numpy as np import pandas as pd %matplotlib inline  The Data There are some fake data csv files you can read in as dataframes:\ndf1 = pd.read_csv('df1',index_col=0) df2 = pd.read_csv('df2')  Style Sheets Matplotlib has style sheets you can use to make your plots look a little nicer. These style sheets include plot_bmh,plot_fivethirtyeight,plot_ggplot and more. They basically create a set of style rules that your plots follow. I recommend using them, they make all your plots have the same look and feel more professional. You can even create your own if you want your company\u0026rsquo;s plots to all have the same look (it is a bit tedious to create on though).\nHere is how to use them.\nBefore plt.style.use() your plots look like this:\ndf1['A'].hist()  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50c19d68\u0026gt;     Call the style:\nimport matplotlib.pyplot as plt plt.style.use('ggplot')  Now your plots look like this:\ndf1['A'].hist()  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50a037b8\u0026gt;     plt.style.use('bmh') df1['A'].hist()  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef5096c550\u0026gt;     plt.style.use('dark_background') df1['A'].hist()  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef508e80b8\u0026gt;     plt.style.use('fivethirtyeight') df1['A'].hist()  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef508654a8\u0026gt;     plt.style.use('ggplot')  Let\u0026rsquo;s stick with the ggplot style and actually show you how to utilize pandas built-in plotting capabilities!\nPlot Types There are several plot types built-in to pandas, most of them statistical plots by nature:\n df.plot.area df.plot.barh df.plot.density df.plot.hist df.plot.line df.plot.scatter df.plot.bar df.plot.box df.plot.hexbin df.plot.kde df.plot.pie  You can also just call df.plot(kind=\u0026lsquo;hist\u0026rsquo;) or replace that kind argument with any of the key terms shown in the list above (e.g. \u0026lsquo;box\u0026rsquo;,\u0026lsquo;barh\u0026rsquo;, etc..)\n Let\u0026rsquo;s start going through them!\nArea df2.plot.area(alpha=0.4)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef5081c080\u0026gt;     Barplots df2.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  a b c d     0 0.039762 0.218517 0.103423 0.957904   1 0.937288 0.041567 0.899125 0.977680   2 0.780504 0.008948 0.557808 0.797510   3 0.672717 0.247870 0.264071 0.444358   4 0.053829 0.520124 0.552264 0.190008     df2.plot.bar()  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50762748\u0026gt;     df2.plot.bar(stacked=True)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef5070a780\u0026gt;     Histograms df1['A'].plot.hist(bins=50)  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50837ac8\u0026gt;     Line Plots #df1.plot.line(x=df1.index,y='B',figsize=(12,3),lw=1)  Scatter Plots df1.plot.scatter(x='A',y='B')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef505d8908\u0026gt;     You can use c to color based off another column value Use cmap to indicate colormap to use. For all the colormaps, check out: http://matplotlib.org/users/colormaps.html\ndf1.plot.scatter(x='A',y='B',c='C',cmap='coolwarm')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50643278\u0026gt;     Or use s to indicate size based off another column. s parameter needs to be an array, not just the name of a column:\ndf1.plot.scatter(x='A',y='B',s=df1['C']*200)  /home/ggilmore/.local/lib/python3.6/site-packages/matplotlib/collections.py:857: RuntimeWarning: invalid value encountered in sqrt scale = np.sqrt(self._sizes) * dpi / 72.0 * self._factor \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50465da0\u0026gt;     BoxPlots df2.plot.box() # Can also pass a by= argument for groupby  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50332e10\u0026gt;     Hexagonal Bin Plot Useful for Bivariate Data, alternative to scatterplot:\ndf = pd.DataFrame(np.random.randn(1000, 2), columns=['a', 'b']) df.plot.hexbin(x='a',y='b',gridsize=25,cmap='Oranges')  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef502539e8\u0026gt;      Kernel Density Estimation plot (KDE) df2['a'].plot.kde()  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef50190780\u0026gt;     df2.plot.density()  \u0026lt;matplotlib.axes._subplots.AxesSubplot at 0x7fef47aaa908\u0026gt;     That\u0026rsquo;s it! Hopefully you can see why this method of plotting will be a lot easier to use than full-on matplotlib, it balances ease of use with control over the figure. A lot of the plot calls also accept additional arguments of their parent matplotlib plt. call.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"12777ecd23a2989b9e43b8b07063da15","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_10_plotting_pandas/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_10_plotting_pandas/","section":"courses","summary":"In this lecture we will learn about pandas built-in capabilities for data visualization! It\u0026rsquo;s built-off of matplotlib, but it baked into pandas for easier usage!\nLet\u0026rsquo;s take a look!\nImports import numpy as np import pandas as pd %matplotlib inline  The Data There are some fake data csv files you can read in as dataframes:","tags":null,"title":"Pandas Plotting","type":"docs"},{"authors":null,"categories":null,"content":"Plotly is a library that allows you to create interactive plots that you can use in dashboards or websites (you can save them as html files or static images).\nInstallation In order for this all to work, you\u0026rsquo;ll need to install plotly and cufflinks to call plots directly off of a pandas dataframe. These libraries are not currently available through conda but are available through pip. Install the libraries at your command line/terminal using:\npip install plotly pip install cufflinks  ** NOTE: Make sure you only have one installation of Python on your computer when you do this, otherwise the installation may not work. **\nImports and Set-up import pandas as pd import numpy as np #%matplotlib inline  from plotly import __version__ from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot print(__version__) # requires version \u0026gt;= 1.9.0  4.3.0  import cufflinks as cf  # For Notebooks init_notebook_mode(connected=True)  window.PlotlyConfig = {MathJaxConfig: 'local'}; if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} if (typeof require !== 'undefined') { require.undef(\"plotly\"); requirejs.config({ paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] } }); require(['plotly'], function(Plotly) { window._Plotly = Plotly; }); }  # For offline use cf.go_offline()  window.PlotlyConfig = {MathJaxConfig: 'local'}; if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} if (typeof require !== 'undefined') { require.undef(\"plotly\"); requirejs.config({ paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] } }); require(['plotly'], function(Plotly) { window._Plotly = Plotly; }); }  Fake Data df = pd.DataFrame(np.random.randn(100,4),columns='A B C D'.split())  df.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  A B C D     0 1.443094 1.049955 -2.171906 0.493646   1 0.215467 -0.428265 -1.846725 -0.239502   2 -0.540795 -1.273190 -0.326949 0.787827   3 -0.790861 0.408180 -1.324640 1.621891   4 -0.865603 0.911266 1.180761 0.146927     df2 = pd.DataFrame({'Category':['A','B','C'],'Values':[32,43,50]})  df2.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  Category Values     0 A 32   1 B 43   2 C 50     Using Cufflinks and iplot()  scatter bar box spread ratio heatmap surface histogram bubble  Scatter df.iplot(kind='scatter',x='A',y='B',mode='markers',size=10)    \u0026lt;div id=\u0026quot;91765269-716f-4bd2-b1a9-514b53782658\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\u0026quot;91765269-716f-4bd2-b1a9-514b53782658\u0026quot;)) { Plotly.newPlot( '91765269-716f-4bd2-b1a9-514b53782658', [{\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(255, 153, 51, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 10, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;B\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \u0026quot;y\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}], {\u0026quot;legend\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;xaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}}, {\u0026quot;showLink\u0026quot;: true, \u0026quot;linkText\u0026quot;: \u0026quot;Export to plot.ly\u0026quot;, \u0026quot;plotlyServerURL\u0026quot;: \u0026quot;https://plot.ly\u0026quot;, \u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;91765269-716f-4bd2-b1a9-514b53782658\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  Bar Plots df2.iplot(kind='bar',x='Category',y='Values')    \u0026lt;div id=\u0026quot;175d443f-d88d-41c4-87cd-da4fa7be292e\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\u0026quot;175d443f-d88d-41c4-87cd-da4fa7be292e\u0026quot;)) { Plotly.newPlot( '175d443f-d88d-41c4-87cd-da4fa7be292e', [{\u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(255, 153, 51, 0.6)\u0026quot;, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(255, 153, 51, 1.0)\u0026quot;, \u0026quot;width\u0026quot;: 1}}, \u0026quot;name\u0026quot;: \u0026quot;Values\u0026quot;, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;x\u0026quot;: [\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;, \u0026quot;C\u0026quot;], \u0026quot;y\u0026quot;: [32, 43, 50]}], {\u0026quot;legend\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;xaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}}, {\u0026quot;showLink\u0026quot;: true, \u0026quot;linkText\u0026quot;: \u0026quot;Export to plot.ly\u0026quot;, \u0026quot;plotlyServerURL\u0026quot;: \u0026quot;https://plot.ly\u0026quot;, \u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;175d443f-d88d-41c4-87cd-da4fa7be292e\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  df.count().iplot(kind='bar')    \u0026lt;div id=\u0026quot;8387ca92-054b-42ed-bb9d-e01e412b50af\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\u0026quot;8387ca92-054b-42ed-bb9d-e01e412b50af\u0026quot;)) { Plotly.newPlot( '8387ca92-054b-42ed-bb9d-e01e412b50af', [{\u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(255, 153, 51, 0.6)\u0026quot;, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(255, 153, 51, 1.0)\u0026quot;, \u0026quot;width\u0026quot;: 1}}, \u0026quot;name\u0026quot;: \u0026quot;None\u0026quot;, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;x\u0026quot;: [\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;, \u0026quot;C\u0026quot;, \u0026quot;D\u0026quot;], \u0026quot;y\u0026quot;: [100, 100, 100, 100]}], {\u0026quot;legend\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;xaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}}, {\u0026quot;showLink\u0026quot;: true, \u0026quot;linkText\u0026quot;: \u0026quot;Export to plot.ly\u0026quot;, \u0026quot;plotlyServerURL\u0026quot;: \u0026quot;https://plot.ly\u0026quot;, \u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;8387ca92-054b-42ed-bb9d-e01e412b50af\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  Boxplots df.iplot(kind='box')    \u0026lt;div id=\u0026quot;e678dca6-2769-43dd-bff3-09bfe70eea32\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\u0026quot;e678dca6-2769-43dd-bff3-09bfe70eea32\u0026quot;)) { Plotly.newPlot( 'e678dca6-2769-43dd-bff3-09bfe70eea32', [{\u0026quot;boxpoints\u0026quot;: false, \u0026quot;line\u0026quot;: {\u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(255, 153, 51, 1.0)\u0026quot;}, \u0026quot;name\u0026quot;: \u0026quot;A\u0026quot;, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;box\u0026quot;, \u0026quot;y\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}, {\u0026quot;boxpoints\u0026quot;: false, \u0026quot;line\u0026quot;: {\u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(55, 128, 191, 1.0)\u0026quot;}, \u0026quot;name\u0026quot;: \u0026quot;B\u0026quot;, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;box\u0026quot;, \u0026quot;y\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}, {\u0026quot;boxpoints\u0026quot;: false, \u0026quot;line\u0026quot;: {\u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(50, 171, 96, 1.0)\u0026quot;}, \u0026quot;name\u0026quot;: \u0026quot;C\u0026quot;, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;box\u0026quot;, \u0026quot;y\u0026quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415]}, {\u0026quot;boxpoints\u0026quot;: false, \u0026quot;line\u0026quot;: {\u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 0, 128, 1.0)\u0026quot;}, \u0026quot;name\u0026quot;: \u0026quot;D\u0026quot;, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;box\u0026quot;, \u0026quot;y\u0026quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276]}], {\u0026quot;legend\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;xaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}}, {\u0026quot;showLink\u0026quot;: true, \u0026quot;linkText\u0026quot;: \u0026quot;Export to plot.ly\u0026quot;, \u0026quot;plotlyServerURL\u0026quot;: \u0026quot;https://plot.ly\u0026quot;, \u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;e678dca6-2769-43dd-bff3-09bfe70eea32\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  3d Surface df3 = pd.DataFrame({'x':[1,2,3,4,5],'y':[10,20,30,20,10],'z':[5,4,3,2,1]}) df3.iplot(kind='surface',colorscale='rdylbu')    \u0026lt;div id=\u0026quot;825f4807-44e8-4f6a-8fa7-319ff314df1f\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\u0026quot;825f4807-44e8-4f6a-8fa7-319ff314df1f\u0026quot;)) { Plotly.newPlot( '825f4807-44e8-4f6a-8fa7-319ff314df1f', [{\u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;rgb(165,0,38)\u0026quot;], [0.1, \u0026quot;rgb(215,48,39)\u0026quot;], [0.2, \u0026quot;rgb(244,109,67)\u0026quot;], [0.3, \u0026quot;rgb(253,174,97)\u0026quot;], [0.4, \u0026quot;rgb(254,224,144)\u0026quot;], [0.5, \u0026quot;rgb(255,255,191)\u0026quot;], [0.6, \u0026quot;rgb(224,243,248)\u0026quot;], [0.7, \u0026quot;rgb(171,217,233)\u0026quot;], [0.8, \u0026quot;rgb(116,173,209)\u0026quot;], [0.9, \u0026quot;rgb(69,117,180)\u0026quot;], [1.0, \u0026quot;rgb(49,54,149)\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;, \u0026quot;x\u0026quot;: [0, 1, 2, 3, 4], \u0026quot;y\u0026quot;: [\u0026quot;x\u0026quot;, \u0026quot;y\u0026quot;, \u0026quot;z\u0026quot;], \u0026quot;z\u0026quot;: [[1, 2, 3, 4, 5], [10, 20, 30, 20, 10], [5, 4, 3, 2, 1]]}], {\u0026quot;legend\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;xaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}}, {\u0026quot;showLink\u0026quot;: true, \u0026quot;linkText\u0026quot;: \u0026quot;Export to plot.ly\u0026quot;, \u0026quot;plotlyServerURL\u0026quot;: \u0026quot;https://plot.ly\u0026quot;, \u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;825f4807-44e8-4f6a-8fa7-319ff314df1f\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  Spread df[['A','B']].iplot(kind='spread')    \u0026lt;div id=\u0026quot;b460a593-440a-4c30-a40b-ff8d3192d37c\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\u0026quot;b460a593-440a-4c30-a40b-ff8d3192d37c\u0026quot;)) { Plotly.newPlot( 'b460a593-440a-4c30-a40b-ff8d3192d37c', [{\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(255, 153, 51, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;mode\u0026quot;: \u0026quot;lines\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;A\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \u0026quot;y\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(55, 128, 191, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;mode\u0026quot;: \u0026quot;lines\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;B\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \u0026quot;y\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}, {\u0026quot;connectgaps\u0026quot;: false, \u0026quot;fill\u0026quot;: \u0026quot;tozeroy\u0026quot;, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;green\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 0.5}, \u0026quot;mode\u0026quot;: \u0026quot;lines\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Spread\u0026quot;, \u0026quot;showlegend\u0026quot;: false, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \u0026quot;xaxis\u0026quot;: \u0026quot;x2\u0026quot;, \u0026quot;y\u0026quot;: [0.3931386912042505, 0.6437319132483335, 0.7323953042912329, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 1.294526654721476, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 1.0786721525736995, 0.6170731779029573, \u0026quot;\u0026quot;, 0.29292175604215775, 0.35604795378709153, 1.2923424157651118, 0.5254478624112127, 0.6310257845728178, 1.7444194443759167, \u0026quot;\u0026quot;, 1.7695634909798035, 2.5802757889750674, 0.48234219241815857, 2.1006572480275008, \u0026quot;\u0026quot;, 0.5892967197262979, \u0026quot;\u0026quot;, 1.418679445414047, 2.3294766030040632, 0.9932731732445923, 3.017275821277708, 3.018402330072811, 1.7858313555698593, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 0.9410989844336906, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 1.5764143047433703, \u0026quot;\u0026quot;, 1.266410476290408, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 0.7083446272629992, \u0026quot;\u0026quot;, 0.6158454095284791, \u0026quot;\u0026quot;, 0.4044774265284812, 1.21972557380821, 1.4624002233179745, 0.8149008416149297, 0.14043517720236906, 0.38565089567423355, 2.6684177028352742, \u0026quot;\u0026quot;, 1.9310999845555457, 1.8450035069678026, 0.39430640819524687, \u0026quot;\u0026quot;, 1.0106388254361625, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 0.3348258532488357, 1.4969488921680316, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 1.213582735437038, \u0026quot;\u0026quot;, 2.8213904398970993, 1.2191454265512862, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 0.7531792251081537, 0.7238113778246976, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 1.9309564343794843, 0.6896482705922489, \u0026quot;\u0026quot;, 1.1675535214066992, 0.847788900764908, 0.7124155707715303, 1.541105780757185, 0.28239646460464696, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 1.4708365670965522, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 2.9127461208272987, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, 0.20672173490110432, \u0026quot;\u0026quot;, 1.7690209799489347, \u0026quot;\u0026quot;, 2.0368763617959917], \u0026quot;yaxis\u0026quot;: \u0026quot;y2\u0026quot;}, {\u0026quot;connectgaps\u0026quot;: false, \u0026quot;fill\u0026quot;: \u0026quot;tozeroy\u0026quot;, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;red\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 0.5}, \u0026quot;mode\u0026quot;: \u0026quot;lines\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;Spread\u0026quot;, \u0026quot;showlegend\u0026quot;: false, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], \u0026quot;xaxis\u0026quot;: \u0026quot;x2\u0026quot;, \u0026quot;y\u0026quot;: [\u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -1.1990409473171195, -1.7768692464246727, -3.4502390823050164, \u0026quot;\u0026quot;, -0.1954296372371383, -1.7389915480184, -0.2668795488937492, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -1.2452112692045914, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -1.6955555018291188, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -2.0446941384039947, \u0026quot;\u0026quot;, -0.19219492282637907, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -1.3753865157177068, -0.9831080784604157, \u0026quot;\u0026quot;, -0.7528582593367015, -1.420498450207871, \u0026quot;\u0026quot;, -2.7666033892014608, \u0026quot;\u0026quot;, -2.119600140613115, -1.6568697431064001, \u0026quot;\u0026quot;, -0.950079034745388, \u0026quot;\u0026quot;, -1.2190335556135083, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -0.3191386901799315, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -1.6785244658630012, \u0026quot;\u0026quot;, -0.3518701988154955, -0.45059875656066906, -0.14133517677117113, -0.06406010862692679, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -0.9555389428921681, -1.0643385983041982, \u0026quot;\u0026quot;, -2.048561913183912, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -0.9655751773981122, -0.5706291315897459, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -2.8608504533643644, -1.4128154675011102, -0.046026082940258395, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -0.6557969275255325, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;\u0026quot;, -3.546477657596804, -1.1082611427321039, \u0026quot;\u0026quot;, -2.439274584080515, -0.31649149286051614, \u0026quot;\u0026quot;, -1.800080308176359, -2.801072295485666, \u0026quot;\u0026quot;, -2.2244718222537663, \u0026quot;\u0026quot;, -1.2009989664446898, \u0026quot;\u0026quot;], \u0026quot;yaxis\u0026quot;: \u0026quot;y2\u0026quot;}], {\u0026quot;hovermode\u0026quot;: \u0026quot;x\u0026quot;, \u0026quot;legend\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;xaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis2\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y2\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;showticklabels\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;domain\u0026quot;: [0.3, 1], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis2\u0026quot;: {\u0026quot;domain\u0026quot;: [0, 0.25], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;Spread\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}}, {\u0026quot;showLink\u0026quot;: true, \u0026quot;linkText\u0026quot;: \u0026quot;Export to plot.ly\u0026quot;, \u0026quot;plotlyServerURL\u0026quot;: \u0026quot;https://plot.ly\u0026quot;, \u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;b460a593-440a-4c30-a40b-ff8d3192d37c\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  histogram df['A'].iplot(kind='hist',bins=25)    \u0026lt;div id=\u0026quot;7df79106-41c2-4781-b52d-a26a4871422b\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\u0026quot;7df79106-41c2-4781-b52d-a26a4871422b\u0026quot;)) { Plotly.newPlot( '7df79106-41c2-4781-b52d-a26a4871422b', [{\u0026quot;histfunc\u0026quot;: \u0026quot;count\u0026quot;, \u0026quot;histnorm\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(255, 153, 51, 1.0)\u0026quot;, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;, \u0026quot;width\u0026quot;: 1.3}}, \u0026quot;name\u0026quot;: \u0026quot;A\u0026quot;, \u0026quot;nbinsx\u0026quot;: 25, \u0026quot;opacity\u0026quot;: 0.8, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;, \u0026quot;x\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812]}], {\u0026quot;barmode\u0026quot;: \u0026quot;overlay\u0026quot;, \u0026quot;legend\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;xaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}}, {\u0026quot;showLink\u0026quot;: true, \u0026quot;linkText\u0026quot;: \u0026quot;Export to plot.ly\u0026quot;, \u0026quot;plotlyServerURL\u0026quot;: \u0026quot;https://plot.ly\u0026quot;, \u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;7df79106-41c2-4781-b52d-a26a4871422b\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  df.iplot(kind='bubble',x='A',y='B',size='C')    \u0026lt;div id=\u0026quot;46c02392-e6c3-40f3-bc40-096de16f4885\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\u0026quot;46c02392-e6c3-40f3-bc40-096de16f4885\u0026quot;)) { Plotly.newPlot( '46c02392-e6c3-40f3-bc40-096de16f4885', [{\u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: [\u0026quot;rgb(255, 153, 51)\u0026quot;, \u0026quot;rgb(55, 128, 191)\u0026quot;, \u0026quot;rgb(50, 171, 96)\u0026quot;, \u0026quot;rgb(128, 0, 128)\u0026quot;, \u0026quot;rgb(219, 64, 82)\u0026quot;, \u0026quot;rgb(0, 128, 128)\u0026quot;, \u0026quot;rgb(255, 255, 51)\u0026quot;, \u0026quot;rgb(128, 128, 0)\u0026quot;, \u0026quot;rgb(251, 128, 114)\u0026quot;, \u0026quot;rgb(128, 177, 211)\u0026quot;], \u0026quot;line\u0026quot;: {\u0026quot;width\u0026quot;: 1.3}, \u0026quot;size\u0026quot;: [24, 31, 59, 40, 87, 66, 58, 56, 82, 80, 62, 76, 61, 42, 42, 83, 92, 78, 49, 99, 55, 54, 49, 82, 28, 70, 49, 82, 59, 52, 44, 57, 69, 41, 78, 43, 68, 53, 59, 42, 80, 75, 53, 47, 50, 57, 45, 77, 63, 75, 36, 36, 68, 87, 83, 43, 52, 97, 46, 38, 91, 56, 96, 77, 68, 76, 74, 64, 87, 66, 59, 49, 96, 70, 71, 52, 26, 39, 72, 43, 12, 30, 53, 66, 66, 41, 62, 86, 38, 80, 79, 72, 81, 30, 68, 49, 112, 89, 54, 56], \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \u0026quot;y\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103]}], {\u0026quot;legend\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;xaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: true, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}}, {\u0026quot;showLink\u0026quot;: true, \u0026quot;linkText\u0026quot;: \u0026quot;Export to plot.ly\u0026quot;, \u0026quot;plotlyServerURL\u0026quot;: \u0026quot;https://plot.ly\u0026quot;, \u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;46c02392-e6c3-40f3-bc40-096de16f4885\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  scatter_matrix() Similar to sns.pairplot()\ndf.scatter_matrix()    \u0026lt;div id=\u0026quot;52beb8f2-3df1-4fd0-9c94-a8d03d2d6010\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; window.PLOTLYENV.BASE_URL='https://plot.ly'; if (document.getElementById(\u0026quot;52beb8f2-3df1-4fd0-9c94-a8d03d2d6010\u0026quot;)) { Plotly.newPlot( '52beb8f2-3df1-4fd0-9c94-a8d03d2d6010', [{\u0026quot;histfunc\u0026quot;: \u0026quot;count\u0026quot;, \u0026quot;histnorm\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(255, 153, 51, 1.0)\u0026quot;, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;, \u0026quot;width\u0026quot;: 1.3}}, \u0026quot;name\u0026quot;: \u0026quot;A\u0026quot;, \u0026quot;nbinsx\u0026quot;: 10, \u0026quot;opacity\u0026quot;: 0.8, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;, \u0026quot;x\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \u0026quot;xaxis\u0026quot;: \u0026quot;x\u0026quot;, \u0026quot;yaxis\u0026quot;: \u0026quot;y\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;A\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \u0026quot;xaxis\u0026quot;: \u0026quot;x2\u0026quot;, \u0026quot;y\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \u0026quot;yaxis\u0026quot;: \u0026quot;y2\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;A\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \u0026quot;xaxis\u0026quot;: \u0026quot;x3\u0026quot;, \u0026quot;y\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \u0026quot;yaxis\u0026quot;: \u0026quot;y3\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;A\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \u0026quot;xaxis\u0026quot;: \u0026quot;x4\u0026quot;, \u0026quot;y\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \u0026quot;yaxis\u0026quot;: \u0026quot;y4\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;B\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \u0026quot;xaxis\u0026quot;: \u0026quot;x5\u0026quot;, \u0026quot;y\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \u0026quot;yaxis\u0026quot;: \u0026quot;y5\u0026quot;}, {\u0026quot;histfunc\u0026quot;: \u0026quot;count\u0026quot;, \u0026quot;histnorm\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(55, 128, 191, 1.0)\u0026quot;, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;, \u0026quot;width\u0026quot;: 1.3}}, \u0026quot;name\u0026quot;: \u0026quot;B\u0026quot;, \u0026quot;nbinsx\u0026quot;: 10, \u0026quot;opacity\u0026quot;: 0.8, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;, \u0026quot;x\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \u0026quot;xaxis\u0026quot;: \u0026quot;x6\u0026quot;, \u0026quot;yaxis\u0026quot;: \u0026quot;y6\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;B\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \u0026quot;xaxis\u0026quot;: \u0026quot;x7\u0026quot;, \u0026quot;y\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \u0026quot;yaxis\u0026quot;: \u0026quot;y7\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;B\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \u0026quot;xaxis\u0026quot;: \u0026quot;x8\u0026quot;, \u0026quot;y\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \u0026quot;yaxis\u0026quot;: \u0026quot;y8\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;C\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \u0026quot;xaxis\u0026quot;: \u0026quot;x9\u0026quot;, \u0026quot;y\u0026quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \u0026quot;yaxis\u0026quot;: \u0026quot;y9\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;C\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \u0026quot;xaxis\u0026quot;: \u0026quot;x10\u0026quot;, \u0026quot;y\u0026quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \u0026quot;yaxis\u0026quot;: \u0026quot;y10\u0026quot;}, {\u0026quot;histfunc\u0026quot;: \u0026quot;count\u0026quot;, \u0026quot;histnorm\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(50, 171, 96, 1.0)\u0026quot;, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;, \u0026quot;width\u0026quot;: 1.3}}, \u0026quot;name\u0026quot;: \u0026quot;C\u0026quot;, \u0026quot;nbinsx\u0026quot;: 10, \u0026quot;opacity\u0026quot;: 0.8, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;, \u0026quot;x\u0026quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \u0026quot;xaxis\u0026quot;: \u0026quot;x11\u0026quot;, \u0026quot;yaxis\u0026quot;: \u0026quot;y11\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;C\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \u0026quot;xaxis\u0026quot;: \u0026quot;x12\u0026quot;, \u0026quot;y\u0026quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \u0026quot;yaxis\u0026quot;: \u0026quot;y12\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;D\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [1.4430938529076065, 0.21546657757723303, -0.5407947903142395, -0.7908612658330378, -0.8656031384884543, -1.4760605757203558, -0.0744980394773873, 0.10513814487608379, -0.9947735310122262, -0.1304937735467974, 1.692203998381951, -0.1369007919085108, -0.21105501714229025, -0.9936863166980452, -0.34640982497446215, 1.5141537117239598, 0.12892505478589958, -0.31666189982499576, 1.3161758984987586, -1.0720221087119493, -0.351929804841477, 1.9182199948679515, 1.9731282385455846, -0.38834039697671746, 0.15088998778303156, 0.5435595100988015, 1.1877521368445123, 0.6625622168684125, 1.762280497623462, 0.006580804643453561, 1.3159978072395653, 0.8509611012007505, 1.6200556642738022, -0.04070661961335169, -1.096670963214221, 0.5037502087264271, -0.16052030945900758, -1.1703093760438072, 1.5436995617718496, -0.7078226442095832, 1.0197384640243452, -2.166831958798532, -0.8676056997613739, 0.5770893664369249, -0.13143135735049682, 0.9841694638666082, -1.148940851861127, 2.132968847085139, 1.167022166305539, 0.7048534034082377, 0.7584954259520424, -0.1667564290605649, 0.2804433588775117, 1.723609573641113, -0.6990028496247089, 1.1695491686135198, 0.7064033210423212, 1.3834261383635968, -0.4946192781857277, 0.7161224086402186, -0.4667569038025088, -1.5192227588773672, -1.0679196053861189, -1.194728128581742, 0.21248674452864724, 0.6914949981927315, -0.759559922097263, 0.022228456574431305, 0.8721689279810639, -1.2660042013711916, 0.796455599724663, 1.2920244483254557, -1.064314220090697, -0.06453259511913911, 0.2657376216992744, -0.7150349998574225, -1.243865464433513, 0.14620813690683923, -0.5211730027145767, 0.881120512982295, 1.5227542308652078, -0.6471600714616916, -0.1889842731273635, 0.3617815784985615, 1.1591346926116266, 0.37825391336232184, 0.048759913111237674, -1.6664428984486728, -0.31346839275559785, 0.5586447349930872, -1.5162112219634285, -1.051988468443194, 1.2048689076313626, -1.3792946376967596, -1.4745321588932199, 0.15896878517115232, -0.2790465889360236, 0.4175742073473088, 0.14327897976040063, 0.9830632442379812], \u0026quot;xaxis\u0026quot;: \u0026quot;x13\u0026quot;, \u0026quot;y\u0026quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \u0026quot;yaxis\u0026quot;: \u0026quot;y13\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;D\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [1.049955161703356, -0.42826533567110037, -1.2731900946054724, 0.4081796814840816, 0.9112661079362184, 1.9741785065846607, -1.3690246941988633, 0.3005677821132221, 0.7442180170061738, 0.13638577534695184, 0.6135318458082515, -0.7539739698114681, 1.034156252062301, -1.286608072740203, -0.7024577787615537, 0.22181129595884796, -0.3965228076253131, -0.9476876843978135, -0.4282435458771582, 0.6235333931171697, -2.1214932958212804, -0.6620557941071158, 1.490786046127426, -2.4889976450042184, 2.1955841261870264, -0.045737209627496424, 1.3799470596708914, -0.7561172285456346, -0.5671961053806014, -0.9866923686011387, -1.701278014038143, -2.16744122887206, -0.1657756912960571, 1.3346798961043551, -0.11356288475380538, -0.4373487757072635, 0.592337949877694, 0.25018907416406383, -0.03271474297152071, 2.0587807449918776, -0.2466720122660628, -0.04723181818541687, 0.7892640433450262, -0.13125526082607433, 0.8186476773948912, 0.36832405433812904, 0.07009270375238132, 1.7284914205566577, -0.05270340750267107, -0.7575468199097368, -0.056405415662887294, -0.30719160626293396, -0.10520753679672185, -0.9448081291941611, -0.3798641594447774, -0.761550815942026, -1.1386001859254813, 0.98911973016835, 1.1839051876772735, -0.29451641679594387, -0.11488670498701324, -1.0686240023166982, -0.9265844286149477, -1.1306680199548151, -0.12233910872018842, -0.8054538939753001, 0.19597902079490515, 1.0865670548786295, -0.3414138074559741, 0.7825577118127203, -2.024934840172436, 0.07287902177416956, -0.09873904269258478, 0.5060965364706068, -0.48744160340887926, -1.43884637768212, 1.6169849889308514, 1.5590236044079495, -0.4751469197743183, -1.0498359213971893, 0.8331059602729589, 0.00863685606384091, -1.3565377945340626, -0.48600732226634646, 0.4467191218400963, -1.1628518673948633, -0.2336365514934093, 1.8800347591481312, 0.794792749976506, -0.9121918321034651, 0.9230633621170863, -0.7354969755826778, -1.7078772131959359, 0.4207856704795994, 1.3265401365924463, -0.047752949729952, 1.9454252333177426, -1.351446772601626, 1.3442779462050904, -1.0538131175580103], \u0026quot;xaxis\u0026quot;: \u0026quot;x14\u0026quot;, \u0026quot;y\u0026quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \u0026quot;yaxis\u0026quot;: \u0026quot;y14\u0026quot;}, {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 128, 128, 1.0)\u0026quot;, \u0026quot;dash\u0026quot;: \u0026quot;solid\u0026quot;, \u0026quot;shape\u0026quot;: \u0026quot;linear\u0026quot;, \u0026quot;width\u0026quot;: 1.3}, \u0026quot;marker\u0026quot;: {\u0026quot;size\u0026quot;: 2, \u0026quot;symbol\u0026quot;: \u0026quot;circle\u0026quot;}, \u0026quot;mode\u0026quot;: \u0026quot;markers\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;D\u0026quot;, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;, \u0026quot;x\u0026quot;: [-2.1719056491738, -1.8467249196192983, -0.32694918154403235, -1.3246401584537104, 1.1807609689180247, 0.09480442974909177, -0.3671111106075462, -0.4711502061706325, 0.9434641710495008, 0.8079755433613679, -0.15562947555179465, 0.6050821367496859, -0.18976090241729407, -1.2410744958593123, -1.2308343120964556, 1.0085205818276777, 1.4693249555568306, 0.7253143010776448, -0.8301256172007058, 1.8384812691052081, -0.5369568583710973, -0.5930018620792575, -0.8393402600756779, 0.9156670299318437, -1.988136747934628, 0.2796765588942437, -0.8235596865775022, 0.9258532489709973, -0.31511423232933106, -0.6809679269593999, -1.1030955963681102, -0.41092994634318575, 0.24428007268417756, -1.2942417109329043, 0.7236378227978107, -1.1822262478125882, 0.19475718156857472, -0.6131375911952425, -0.3095261565207663, -1.2032938596213816, 0.8380357141764102, 0.5660753996717188, -0.6178855367460464, -0.9312297759435894, -0.8108278349144591, -0.40590558089859197, -1.0646369851409145, 0.651290799858866, -0.10148541724668546, 0.5352832606000745, -1.5378235676704772, -1.5756383888829057, 0.15230092441606893, 1.1907467654562618, 0.9823816872212577, -1.1896174980654868, -0.6921280151540408, 1.7591440082543313, -1.024043048807865, -1.4389244507922974, 1.4214865269654062, -0.4726650620483328, 1.7068216820491338, 0.6422390451034639, 0.18834397834036268, 0.635744690788909, 0.4910315841070782, -0.05118701002042919, 1.2286608997158326, 0.045013788949021326, -0.3225269211435687, -0.8567464744988473, 1.679311460632762, 0.27002001126599473, 0.3189907234684933, -0.7081409947334381, -2.0704113292806365, -1.3842403907898198, 0.3997436860872823, -1.1671957523280363, -2.8734969822122802, -1.8604097597083222, -0.6173042309174221, 0.08522423902630341, 0.05120010887873742, -1.2953921429898931, -0.15153796223182928, 1.1263115586712897, -1.452001716957132, 0.812105624039726, 0.759182788745203, 0.38416118948448297, 0.8812608200039891, -1.8638888079880438, 0.19639270500406805, -0.8432507720250255, 2.5275262787376684, 1.293634598974227, -0.5805425898802345, -0.44784029792615415], \u0026quot;xaxis\u0026quot;: \u0026quot;x15\u0026quot;, \u0026quot;y\u0026quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \u0026quot;yaxis\u0026quot;: \u0026quot;y15\u0026quot;}, {\u0026quot;histfunc\u0026quot;: \u0026quot;count\u0026quot;, \u0026quot;histnorm\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;marker\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;rgba(128, 0, 128, 1.0)\u0026quot;, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;, \u0026quot;width\u0026quot;: 1.3}}, \u0026quot;name\u0026quot;: \u0026quot;D\u0026quot;, \u0026quot;nbinsx\u0026quot;: 10, \u0026quot;opacity\u0026quot;: 0.8, \u0026quot;orientation\u0026quot;: \u0026quot;v\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;, \u0026quot;x\u0026quot;: [0.4936460599036785, -0.23950189174458203, 0.787826532834424, 1.6218906708569216, 0.14692667967207593, 1.8687215739097855, 0.23066905162127188, 0.026996461486848325, 2.151097372606241, 2.4394207056126755, -0.08657531921031929, 0.014924265438812237, 2.6593888580385743, 0.5152735475803955, 0.5622519090001562, 0.401635329701252, -0.08659802491596807, -1.165543845559547, 0.8244356339511225, -2.11336698654637, -0.35314530770827085, -0.8308943564762241, 2.1900128815687334, 0.504318795688291, -1.4538204874744098, -0.3232589471091818, 2.13660626883115, 1.3553922949621742, 1.605546151744719, 0.27884150320751255, -0.9500563704498031, -0.6255009081531215, -0.5088708338891568, 0.8398283043356619, 1.3485884699110402, 1.8666428468092862, 0.04547596768375024, 0.5464241721324268, -0.36404425968108417, -1.0177618050749744, 0.013431696116402755, -1.789199192662988, 0.012769546199602737, 0.1535996279182816, -2.717383567108027, 0.12252478655860585, -0.39952981236458673, -0.28852157053700295, 0.6010204074559363, -1.205813167362976, 1.2894485072228832, 2.5585620046843998, -0.7577346914669658, -1.0885330825612478, -2.228941108530018, 0.5861230022910491, -0.6082077147766836, 0.7426430198538548, -0.4820998268163591, 2.046399036359828, -0.8106255125172253, 1.5973196460767503, 1.0080193788484948, 1.0579108814883447, 0.09107918776187489, -0.8291413628514889, 0.5504905060906493, 0.4664216496393088, -0.9872895522573563, -1.1063715880748848, 0.5104355199119975, -0.40822874377283114, -1.1719971610467275, 0.5353851414412951, -0.3163255509276452, -0.716054830069594, 0.33195639977501645, 0.8216560810576785, 1.6475343422254514, -0.8548999389250493, -0.5644267577031428, -0.5345694961356798, -0.2670221008926948, -0.24673707335568168, 0.35678927774506153, -1.1191509341262875, -1.6300288181893052, 1.6479147337597981, -1.304376159861575, 1.0111535263032327, -0.38203935330228295, -0.16298615882141124, -0.8611283900800366, 0.8535480441521892, 1.0342566774529574, -0.44355853279257873, -1.730285592921243, -0.5751700142178594, -0.8073914583298634, 0.44061141043955276], \u0026quot;xaxis\u0026quot;: \u0026quot;x16\u0026quot;, \u0026quot;yaxis\u0026quot;: \u0026quot;y16\u0026quot;}], {\u0026quot;bargap\u0026quot;: 0.02, \u0026quot;legend\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#F5F6F9\u0026quot;, \u0026quot;showlegend\u0026quot;: false, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}}, \u0026quot;xaxis\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y\u0026quot;, \u0026quot;domain\u0026quot;: [0.0, 0.2125], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis10\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y10\u0026quot;, \u0026quot;domain\u0026quot;: [0.2625, 0.475], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis11\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y11\u0026quot;, \u0026quot;domain\u0026quot;: [0.525, 0.7375], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis12\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y12\u0026quot;, \u0026quot;domain\u0026quot;: [0.7875, 1.0], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis13\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y13\u0026quot;, \u0026quot;domain\u0026quot;: [0.0, 0.2125], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis14\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y14\u0026quot;, \u0026quot;domain\u0026quot;: [0.2625, 0.475], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis15\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y15\u0026quot;, \u0026quot;domain\u0026quot;: [0.525, 0.7375], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis16\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y16\u0026quot;, \u0026quot;domain\u0026quot;: [0.7875, 1.0], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis2\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y2\u0026quot;, \u0026quot;domain\u0026quot;: [0.2625, 0.475], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis3\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y3\u0026quot;, \u0026quot;domain\u0026quot;: [0.525, 0.7375], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis4\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y4\u0026quot;, \u0026quot;domain\u0026quot;: [0.7875, 1.0], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis5\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y5\u0026quot;, \u0026quot;domain\u0026quot;: [0.0, 0.2125], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis6\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y6\u0026quot;, \u0026quot;domain\u0026quot;: [0.2625, 0.475], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis7\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y7\u0026quot;, \u0026quot;domain\u0026quot;: [0.525, 0.7375], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis8\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y8\u0026quot;, \u0026quot;domain\u0026quot;: [0.7875, 1.0], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;xaxis9\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;y9\u0026quot;, \u0026quot;domain\u0026quot;: [0.0, 0.2125], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x\u0026quot;, \u0026quot;domain\u0026quot;: [0.8025, 1.0], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis10\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x10\u0026quot;, \u0026quot;domain\u0026quot;: [0.2675, 0.465], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis11\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x11\u0026quot;, \u0026quot;domain\u0026quot;: [0.2675, 0.465], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis12\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x12\u0026quot;, \u0026quot;domain\u0026quot;: [0.2675, 0.465], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis13\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x13\u0026quot;, \u0026quot;domain\u0026quot;: [0.0, 0.1975], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis14\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x14\u0026quot;, \u0026quot;domain\u0026quot;: [0.0, 0.1975], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis15\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x15\u0026quot;, \u0026quot;domain\u0026quot;: [0.0, 0.1975], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis16\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x16\u0026quot;, \u0026quot;domain\u0026quot;: [0.0, 0.1975], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis2\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x2\u0026quot;, \u0026quot;domain\u0026quot;: [0.8025, 1.0], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis3\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x3\u0026quot;, \u0026quot;domain\u0026quot;: [0.8025, 1.0], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis4\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x4\u0026quot;, \u0026quot;domain\u0026quot;: [0.8025, 1.0], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis5\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x5\u0026quot;, \u0026quot;domain\u0026quot;: [0.535, 0.7325], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis6\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x6\u0026quot;, \u0026quot;domain\u0026quot;: [0.535, 0.7325], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis7\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x7\u0026quot;, \u0026quot;domain\u0026quot;: [0.535, 0.7325], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis8\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x8\u0026quot;, \u0026quot;domain\u0026quot;: [0.535, 0.7325], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}, \u0026quot;yaxis9\u0026quot;: {\u0026quot;anchor\u0026quot;: \u0026quot;x9\u0026quot;, \u0026quot;domain\u0026quot;: [0.2675, 0.465], \u0026quot;gridcolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;, \u0026quot;showgrid\u0026quot;: false, \u0026quot;tickfont\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;title\u0026quot;: {\u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#4D5663\u0026quot;}, \u0026quot;text\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;#E1E5ED\u0026quot;}}, {\u0026quot;showLink\u0026quot;: true, \u0026quot;linkText\u0026quot;: \u0026quot;Export to plot.ly\u0026quot;, \u0026quot;plotlyServerURL\u0026quot;: \u0026quot;https://plot.ly\u0026quot;, \u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;52beb8f2-3df1-4fd0-9c94-a8d03d2d6010\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"f0de024a803346dfe8b33ae0b9167f0b","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_11_plotting_ploty/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_11_plotting_ploty/","section":"courses","summary":"Plotly is a library that allows you to create interactive plots that you can use in dashboards or websites (you can save them as html files or static images).\nInstallation In order for this all to work, you\u0026rsquo;ll need to install plotly and cufflinks to call plots directly off of a pandas dataframe.","tags":null,"title":"Plotly and Cufflinks","type":"docs"},{"authors":null,"categories":null,"content":"Offline Plotly Usage Get imports and set everything up to be working offline.\nimport chart_studio.plotly as py import plotly.graph_objs as go from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot  Now set up everything so that the figures show up in the notebook:\ninit_notebook_mode(connected=True)  window.PlotlyConfig = {MathJaxConfig: 'local'}; if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} if (typeof require !== 'undefined') { require.undef(\"plotly\"); requirejs.config({ paths: { 'plotly': ['https://cdn.plot.ly/plotly-latest.min'] } }); require(['plotly'], function(Plotly) { window._Plotly = Plotly; }); }  More info on other options for Offline Plotly usage can be found here.\nChoropleth US Maps Plotly\u0026rsquo;s mapping can be a bit hard to get used to at first, remember to reference the cheat sheet in the data visualization folder, or find it online here.\nimport pandas as pd  Now we need to begin to build our data dictionary. Easiest way to do this is to use the dict() function of the general form:\n type = \u0026lsquo;choropleth\u0026rsquo;, locations = list of states locationmode = \u0026lsquo;USA-states\u0026rsquo; colorscale=  Either a predefined string:\n'pairs' | 'Greys' | 'Greens' | 'Bluered' | 'Hot' | 'Picnic' | 'Portland' | 'Jet' | 'RdBu' | 'Blackbody' | 'Earth' | 'Electric' | 'YIOrRd' | 'YIGnBu'  or create a custom colorscale\n text= list or array of text to display per point z= array of values on z axis (color of state) colorbar = {\u0026lsquo;title\u0026rsquo;:\u0026lsquo;Colorbar Title\u0026rsquo;})  Here is a simple example:\ndata = dict(type = 'choropleth', locations = ['AZ','CA','NY'], locationmode = 'USA-states', colorscale= 'Portland', text= ['text1','text2','text3'], z=[1.0,2.0,3.0], colorbar = {'title':'Colorbar Title'})  Then we create the layout nested dictionary:\nlayout = dict(geo = {'scope':'usa'})  Then we use:\ngo.Figure(data = [data],layout = layout)  to set up the object that finally gets passed into iplot()\nchoromap = go.Figure(data = [data],layout = layout)  iplot(choromap)    \u0026lt;div id=\u0026quot;0ffd83f2-2d09-4b5b-a347-b966e925bea9\u0026quot; class=\u0026quot;plotly-graph-div\u0026quot; style=\u0026quot;height:525px; width:100%;\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; require([\u0026quot;plotly\u0026quot;], function(Plotly) { window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\u0026quot;0ffd83f2-2d09-4b5b-a347-b966e925bea9\u0026quot;)) { Plotly.newPlot( '0ffd83f2-2d09-4b5b-a347-b966e925bea9', [{\u0026quot;colorbar\u0026quot;: {\u0026quot;title\u0026quot;: {\u0026quot;text\u0026quot;: \u0026quot;Colorbar Title\u0026quot;}}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;rgb(12,51,131)\u0026quot;], [0.25, \u0026quot;rgb(10,136,186)\u0026quot;], [0.5, \u0026quot;rgb(242,211,56)\u0026quot;], [0.75, \u0026quot;rgb(242,143,56)\u0026quot;], [1.0, \u0026quot;rgb(217,30,30)\u0026quot;]], \u0026quot;locationmode\u0026quot;: \u0026quot;USA-states\u0026quot;, \u0026quot;locations\u0026quot;: [\u0026quot;AZ\u0026quot;, \u0026quot;CA\u0026quot;, \u0026quot;NY\u0026quot;], \u0026quot;text\u0026quot;: [\u0026quot;text1\u0026quot;, \u0026quot;text2\u0026quot;, \u0026quot;text3\u0026quot;], \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;, \u0026quot;z\u0026quot;: [1.0, 2.0, 3.0]}], {\u0026quot;geo\u0026quot;: {\u0026quot;scope\u0026quot;: \u0026quot;usa\u0026quot;}, \u0026quot;template\u0026quot;: {\u0026quot;data\u0026quot;: {\u0026quot;bar\u0026quot;: [{\u0026quot;error_x\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;error_y\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;bar\u0026quot;}], \u0026quot;barpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;width\u0026quot;: 0.5}}, \u0026quot;type\u0026quot;: \u0026quot;barpolar\u0026quot;}], \u0026quot;carpet\u0026quot;: [{\u0026quot;aaxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;endlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;minorgridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;startlinecolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;carpet\u0026quot;}], \u0026quot;choropleth\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;choropleth\u0026quot;}], \u0026quot;contour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;contour\u0026quot;}], \u0026quot;contourcarpet\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;contourcarpet\u0026quot;}], \u0026quot;heatmap\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmap\u0026quot;}], \u0026quot;heatmapgl\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;heatmapgl\u0026quot;}], \u0026quot;histogram\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;histogram\u0026quot;}], \u0026quot;histogram2d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2d\u0026quot;}], \u0026quot;histogram2dcontour\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;histogram2dcontour\u0026quot;}], \u0026quot;mesh3d\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;type\u0026quot;: \u0026quot;mesh3d\u0026quot;}], \u0026quot;parcoords\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;parcoords\u0026quot;}], \u0026quot;pie\u0026quot;: [{\u0026quot;automargin\u0026quot;: true, \u0026quot;type\u0026quot;: \u0026quot;pie\u0026quot;}], \u0026quot;scatter\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter\u0026quot;}], \u0026quot;scatter3d\u0026quot;: [{\u0026quot;line\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatter3d\u0026quot;}], \u0026quot;scattercarpet\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattercarpet\u0026quot;}], \u0026quot;scattergeo\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergeo\u0026quot;}], \u0026quot;scattergl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattergl\u0026quot;}], \u0026quot;scattermapbox\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scattermapbox\u0026quot;}], \u0026quot;scatterpolar\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolar\u0026quot;}], \u0026quot;scatterpolargl\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterpolargl\u0026quot;}], \u0026quot;scatterternary\u0026quot;: [{\u0026quot;marker\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;scatterternary\u0026quot;}], \u0026quot;surface\u0026quot;: [{\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;colorscale\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;type\u0026quot;: \u0026quot;surface\u0026quot;}], \u0026quot;table\u0026quot;: [{\u0026quot;cells\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#EBF0F8\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;header\u0026quot;: {\u0026quot;fill\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#C8D4E3\u0026quot;}, \u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;type\u0026quot;: \u0026quot;table\u0026quot;}]}, \u0026quot;layout\u0026quot;: {\u0026quot;annotationdefaults\u0026quot;: {\u0026quot;arrowcolor\u0026quot;: \u0026quot;#2a3f5f\u0026quot;, \u0026quot;arrowhead\u0026quot;: 0, \u0026quot;arrowwidth\u0026quot;: 1}, \u0026quot;coloraxis\u0026quot;: {\u0026quot;colorbar\u0026quot;: {\u0026quot;outlinewidth\u0026quot;: 0, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;colorscale\u0026quot;: {\u0026quot;diverging\u0026quot;: [[0, \u0026quot;#8e0152\u0026quot;], [0.1, \u0026quot;#c51b7d\u0026quot;], [0.2, \u0026quot;#de77ae\u0026quot;], [0.3, \u0026quot;#f1b6da\u0026quot;], [0.4, \u0026quot;#fde0ef\u0026quot;], [0.5, \u0026quot;#f7f7f7\u0026quot;], [0.6, \u0026quot;#e6f5d0\u0026quot;], [0.7, \u0026quot;#b8e186\u0026quot;], [0.8, \u0026quot;#7fbc41\u0026quot;], [0.9, \u0026quot;#4d9221\u0026quot;], [1, \u0026quot;#276419\u0026quot;]], \u0026quot;sequential\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]], \u0026quot;sequentialminus\u0026quot;: [[0.0, \u0026quot;#0d0887\u0026quot;], [0.1111111111111111, \u0026quot;#46039f\u0026quot;], [0.2222222222222222, \u0026quot;#7201a8\u0026quot;], [0.3333333333333333, \u0026quot;#9c179e\u0026quot;], [0.4444444444444444, \u0026quot;#bd3786\u0026quot;], [0.5555555555555556, \u0026quot;#d8576b\u0026quot;], [0.6666666666666666, \u0026quot;#ed7953\u0026quot;], [0.7777777777777778, \u0026quot;#fb9f3a\u0026quot;], [0.8888888888888888, \u0026quot;#fdca26\u0026quot;], [1.0, \u0026quot;#f0f921\u0026quot;]]}, \u0026quot;colorway\u0026quot;: [\u0026quot;#636efa\u0026quot;, \u0026quot;#EF553B\u0026quot;, \u0026quot;#00cc96\u0026quot;, \u0026quot;#ab63fa\u0026quot;, \u0026quot;#FFA15A\u0026quot;, \u0026quot;#19d3f3\u0026quot;, \u0026quot;#FF6692\u0026quot;, \u0026quot;#B6E880\u0026quot;, \u0026quot;#FF97FF\u0026quot;, \u0026quot;#FECB52\u0026quot;], \u0026quot;font\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}, \u0026quot;geo\u0026quot;: {\u0026quot;bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;lakecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;landcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;showlakes\u0026quot;: true, \u0026quot;showland\u0026quot;: true, \u0026quot;subunitcolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;hoverlabel\u0026quot;: {\u0026quot;align\u0026quot;: \u0026quot;left\u0026quot;}, \u0026quot;hovermode\u0026quot;: \u0026quot;closest\u0026quot;, \u0026quot;mapbox\u0026quot;: {\u0026quot;style\u0026quot;: \u0026quot;light\u0026quot;}, \u0026quot;paper_bgcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;plot_bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;polar\u0026quot;: {\u0026quot;angularaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;radialaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;scene\u0026quot;: {\u0026quot;xaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;yaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}, \u0026quot;zaxis\u0026quot;: {\u0026quot;backgroundcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;gridwidth\u0026quot;: 2, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;showbackground\u0026quot;: true, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;}}, \u0026quot;shapedefaults\u0026quot;: {\u0026quot;line\u0026quot;: {\u0026quot;color\u0026quot;: \u0026quot;#2a3f5f\u0026quot;}}, \u0026quot;ternary\u0026quot;: {\u0026quot;aaxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;baxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}, \u0026quot;bgcolor\u0026quot;: \u0026quot;#E5ECF6\u0026quot;, \u0026quot;caxis\u0026quot;: {\u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;}}, \u0026quot;title\u0026quot;: {\u0026quot;x\u0026quot;: 0.05}, \u0026quot;xaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}, \u0026quot;yaxis\u0026quot;: {\u0026quot;automargin\u0026quot;: true, \u0026quot;gridcolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;linecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;ticks\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;title\u0026quot;: {\u0026quot;standoff\u0026quot;: 15}, \u0026quot;zerolinecolor\u0026quot;: \u0026quot;white\u0026quot;, \u0026quot;zerolinewidth\u0026quot;: 2}}}}, {\u0026quot;responsive\u0026quot;: true} ).then(function(){  var gd = document.getElementById(\u0026lsquo;0ffd83f2-2d09-4b5b-a347-b966e925bea9\u0026rsquo;); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === \u0026lsquo;none\u0026rsquo;) {{ console.log([gd, \u0026lsquo;removed!']); Plotly.purge(gd); observer.disconnect(); }} }});\n// Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container\u0026rsquo;); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }}\n// Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }}\n }) }; }); \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt;  Real Data US Map Choropleth Now let\u0026rsquo;s show an example with some real data as well as some other options we can add to the dictionaries in data and layout.\ndf = pd.read_csv('2011_US_AGRI_Exports') df.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  code state category total exports beef pork poultry dairy fruits fresh fruits proc total fruits veggies fresh veggies proc total veggies corn wheat cotton text     0 AL Alabama state 1390.63 34.4 10.6 481.0 4.06 8.0 17.1 25.11 5.5 8.9 14.33 34.9 70.0 317.61 Alabama\u0026lt;br\u0026gt;Beef 34.4 Dairy 4.06\u0026lt;br\u0026gt;Fruits 25.1...   1 AK Alaska state 13.31 0.2 0.1 0.0 0.19 0.0 0.0 0.00 0.6 1.0 1.56 0.0 0.0 0.00 Alaska\u0026lt;br\u0026gt;Beef 0.2 Dairy 0.19\u0026lt;br\u0026gt;Fruits 0.0 Ve...   2 AZ Arizona state 1463.17 71.3 17.9 0.0 105.48 19.3 41.0 60.27 147.5 239.4 386.91 7.3 48.7 423.95 Arizona\u0026lt;br\u0026gt;Beef 71.3 Dairy 105.48\u0026lt;br\u0026gt;Fruits 60...   3 AR Arkansas state 3586.02 53.2 29.4 562.9 3.53 2.2 4.7 6.88 4.4 7.1 11.45 69.5 114.5 665.44 Arkansas\u0026lt;br\u0026gt;Beef 53.2 Dairy 3.53\u0026lt;br\u0026gt;Fruits 6.8...   4 CA California state 16472.88 228.7 11.1 225.4 929.95 2791.8 5944.6 8736.40 803.2 1303.5 2106.79 34.6 249.3 1064.95 California\u0026lt;br\u0026gt;Beef 228.7 Dairy 929.95\u0026lt;br\u0026gt;Frui...     Now out data dictionary with some extra marker and colorbar arguments:\ndata = dict(type='choropleth', colorscale = 'YIOrRd', locations = df['code'], z = df['total exports'], locationmode = 'USA-states', text = df['text'], marker = dict(line = dict(color = 'rgb(255,255,255)',width = 2)), colorbar = {'title':\u0026quot;Millions USD\u0026quot;} )  And our layout dictionary with some more arguments:\nlayout = dict(title = '2011 US Agriculture Exports by State', geo = dict(scope='usa', showlakes = True, lakecolor = 'rgb(85,173,240)') )  choromap = go.Figure(data = [data],layout = layout)  --------------------------------------------------------------------------- ValueError Traceback (most recent call last) \u0026lt;ipython-input-15-243104ae4228\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 1 choromap = go.Figure(data = [data],layout = layout) ~/.local/lib/python3.6/site-packages/plotly/graph_objs/_figure.py in __init__(self, data, layout, frames, skip_invalid, **kwargs) 606 is invalid AND skip_invalid is False 607 \u0026quot;\u0026quot;\u0026quot; --\u0026gt; 608 super(Figure, self).__init__(data, layout, frames, skip_invalid, **kwargs) 609 610 def add_area( ~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in __init__(self, data, layout_plotly, frames, skip_invalid, **kwargs) 155 156 # ### Import traces ### --\u0026gt; 157 data = self._data_validator.validate_coerce(data, skip_invalid=skip_invalid) 158 159 # ### Save tuple of trace objects ### ~/.local/lib/python3.6/site-packages/_plotly_utils/basevalidators.py in validate_coerce(self, v, skip_invalid) 2643 else: 2644 trace = self.class_map[trace_type]( -\u0026gt; 2645 skip_invalid=skip_invalid, **v_copy 2646 ) 2647 res.append(trace) ~/.local/lib/python3.6/site-packages/plotly/graph_objs/__init__.py in __init__(self, arg, autocolorscale, coloraxis, colorbar, colorscale, customdata, customdatasrc, geo, hoverinfo, hoverinfosrc, hoverlabel, hovertemplate, hovertemplatesrc, hovertext, hovertextsrc, ids, idssrc, locationmode, locations, locationssrc, marker, meta, metasrc, name, reversescale, selected, selectedpoints, showscale, stream, text, textsrc, uid, uirevision, unselected, visible, z, zauto, zmax, zmid, zmin, zsrc, **kwargs) 81395 self[\u0026quot;colorbar\u0026quot;] = colorbar if colorbar is not None else _v 81396 _v = arg.pop(\u0026quot;colorscale\u0026quot;, None) \u0026gt; 81397 self[\u0026quot;colorscale\u0026quot;] = colorscale if colorscale is not None else _v 81398 _v = arg.pop(\u0026quot;customdata\u0026quot;, None) 81399 self[\u0026quot;customdata\u0026quot;] = customdata if customdata is not None else _v ~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in __setitem__(self, prop, value) 3477 # ### Handle simple property ### 3478 else: -\u0026gt; 3479 self._set_prop(prop, value) 3480 3481 # Handle non-scalar case ~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in _set_prop(self, prop, val) 3764 return 3765 else: -\u0026gt; 3766 raise err 3767 3768 # val is None ~/.local/lib/python3.6/site-packages/plotly/basedatatypes.py in _set_prop(self, prop, val) 3759 validator = self._validators.get(prop) 3760 try: -\u0026gt; 3761 val = validator.validate_coerce(val) 3762 except ValueError as err: 3763 if self._skip_invalid: ~/.local/lib/python3.6/site-packages/_plotly_utils/basevalidators.py in validate_coerce(self, v) 1619 1620 if not v_valid: -\u0026gt; 1621 self.raise_invalid_val(v) 1622 1623 return v ~/.local/lib/python3.6/site-packages/_plotly_utils/basevalidators.py in raise_invalid_val(self, v, inds) 281 typ=type_str(v), 282 v=repr(v), --\u0026gt; 283 valid_clr_desc=self.description(), 284 ) 285 ) ValueError: Invalid value of type 'builtins.str' received for the 'colorscale' property of choropleth Received value: 'YIOrRd' The 'colorscale' property is a colorscale and may be specified as: - A list of colors that will be spaced evenly to create the colorscale. Many predefined colorscale lists are included in the sequential, diverging, and cyclical modules in the plotly.colors package. - A list of 2-element lists where the first element is the normalized color level value (starting at 0 and ending at 1), and the second item is a valid color string. (e.g. [[0, 'green'], [0.5, 'red'], [1.0, 'rgb(0, 0, 255)']]) - One of the following named colorscales: ['aggrnyl', 'agsunset', 'algae', 'amp', 'armyrose', 'balance', 'blackbody', 'bluered', 'blues', 'blugrn', 'bluyl', 'brbg', 'brwnyl', 'bugn', 'bupu', 'burg', 'burgyl', 'cividis', 'curl', 'darkmint', 'deep', 'delta', 'dense', 'earth', 'edge', 'electric', 'emrld', 'fall', 'geyser', 'gnbu', 'gray', 'greens', 'greys', 'haline', 'hot', 'hsv', 'ice', 'icefire', 'inferno', 'jet', 'magenta', 'magma', 'matter', 'mint', 'mrybm', 'mygbm', 'oranges', 'orrd', 'oryel', 'peach', 'phase', 'picnic', 'pinkyl', 'piyg', 'plasma', 'plotly3', 'portland', 'prgn', 'pubu', 'pubugn', 'puor', 'purd', 'purp', 'purples', 'purpor', 'rainbow', 'rdbu', 'rdgy', 'rdpu', 'rdylbu', 'rdylgn', 'redor', 'reds', 'solar', 'spectral', 'speed', 'sunset', 'sunsetdark', 'teal', 'tealgrn', 'tealrose', 'tempo', 'temps', 'thermal', 'tropic', 'turbid', 'twilight', 'viridis', 'ylgn', 'ylgnbu', 'ylorbr', 'ylorrd']  iplot(choromap)  World Choropleth Map Now let\u0026rsquo;s see an example with a World Map:\ndf = pd.read_csv('2014_World_GDP') df.head()  data = dict( type = 'choropleth', locations = df['CODE'], z = df['GDP (BILLIONS)'], text = df['COUNTRY'], colorbar = {'title' : 'GDP Billions US'}, )  layout = dict( title = '2014 Global GDP', geo = dict( showframe = False, projection = {'type':'Mercator'} ) )  choromap = go.Figure(data = [data],layout = layout) iplot(choromap)  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"9a2cdf6305a086de5b2c3f988eaca172","permalink":"https://greydongilmore.github.io/courses/ml_intro/02_12_plotting_choropleth/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ml_intro/02_12_plotting_choropleth/","section":"courses","summary":"Offline Plotly Usage Get imports and set everything up to be working offline.\nimport chart_studio.plotly as py import plotly.graph_objs as go from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot  Now set up everything so that the figures show up in the notebook:","tags":null,"title":"Choropleth Maps","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://greydongilmore.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["Mohamad Abbass","Alaa Taha","Greydon Gilmore","Brendan Santyr","Alan Chalil","Mandar Jog","Keith MacDougall","Andrew Parrent","Terry Peters","Jonathan C. Lau"],"categories":null,"content":"","date":1744934400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1744934400,"objectID":"f414fe08bb9c06d2bff48afebce47b6c","permalink":"https://greydongilmore.github.io/publication/2025_abbass_loc_impact/","publishdate":"2025-04-18T00:00:00Z","relpermalink":"/publication/2025_abbass_loc_impact/","section":"publication","summary":"","tags":[""],"title":"The impact of localization and registration accuracy on estimates of deep brain stimulation electrode position in stereotactic space","type":"publication"},{"authors":["Roy Haast","Jason Kai","Alaa Taha","Violet Liu","Greydon Gilmore","Maxime Guye","Ali R Khan","Jonathan C. Lau"],"categories":null,"content":"","date":1738540800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1738540800,"objectID":"69f539ee738d82dafcb93e5ed85bc5f8","permalink":"https://greydongilmore.github.io/publication/2025_haast_mapping_zi/","publishdate":"2025-02-03T00:00:00Z","relpermalink":"/publication/2025_haast_mapping_zi/","section":"publication","summary":"","tags":[""],"title":"Mapping the topographic organization of the human zona incerta using diffusion MRI","type":"publication"},{"authors":["Juan Bottan","Fuad Almalki","Maryam Nouri","Jonathan Lau","Alla Iansavichene","Greydon Gilmore","Michael Miller","Sandrine de Ribaupierre","Andrea Andrade"],"categories":null,"content":"","date":1736726400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1736726400,"objectID":"4e2672a906ca4437600d2e65d215705a","permalink":"https://greydongilmore.github.io/publication/2025_bottan_thermocoag/","publishdate":"2025-01-13T00:00:00Z","relpermalink":"/publication/2025_bottan_thermocoag/","section":"publication","summary":"","tags":[""],"title":"Radiofrequency-thermocoagulation in pediatric epilepsy surgery: a systematic review and pooled analysis of cases","type":"publication"},{"authors":["Hellen Kreinter","Poul Espino","Sonia Mejía","Khalid Alorabi","Greydon Gilmore","Jorge Burneo","David Steven","Keith MacDougall","Michelle-Lee Jones","Giovanni Pellegrino","David Diosy","Seyed Mirsattari","Jonathan Lau","Ana Suller Marti"],"categories":null,"content":"","date":1719792000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1719792000,"objectID":"562da22bf9bab930034ccfa3a240879e","permalink":"https://greydongilmore.github.io/publication/2024_kreinter_disrupt_rf/","publishdate":"2024-07-01T00:00:00Z","relpermalink":"/publication/2024_kreinter_disrupt_rf/","section":"publication","summary":"","tags":[""],"title":"Disrupting the epileptogenic network with stereoelectroencephalography-guided radiofrequency thermocoagulation","type":"publication"},{"authors":["Feyi Ogunsanya","Alaa Taha","Greydon Gilmore","Jason Kai","Tristan Kuehn","Arun Thurairajah","Mauricio Tenorio","Ali R Khan","Jonathan C. Lau"],"categories":null,"content":"","date":1719792000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1719792000,"objectID":"634d35ba652eb96df391685eb4273c7b","permalink":"https://greydongilmore.github.io/publication/2024_ogunsanya_degad/","publishdate":"2024-07-01T00:00:00Z","relpermalink":"/publication/2024_ogunsanya_degad/","section":"publication","summary":"","tags":[""],"title":"MRI-degad: toward accurate conversion of gadolinium-enhanced T1w MRIs to non-contrast-enhanced scans using CNNs","type":"publication"},{"authors":["Igor Varga","Eduard Bakstein","Greydon Gilmore","Jaromir May","Daniel Novak"],"categories":null,"content":"","date":1710374400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1710374400,"objectID":"9b24cd302cc751996808555d9b680996","permalink":"https://greydongilmore.github.io/publication/2024_varga_statistic_seg/","publishdate":"2024-03-14T00:00:00Z","relpermalink":"/publication/2024_varga_statistic_seg/","section":"publication","summary":"","tags":[""],"title":"Statistical segmentation model for accurate electrode positioning in Parkinson's deep brain stimulation based on clinical low-resolution image data and electrophysiology","type":"publication"},{"authors":["Juan S. Bottan","Ashwaq Alshahrani","Greydon Gilmore","David A. Steven","Jorge G. Burneo","Jonathan C. Lau","Richard S. McLachlan","Andrew G. Parrent","Keith W. MacDougall","David C. Diosy","Seyed M. Mirsattari","Ana Suller Marti"],"categories":null,"content":"","date":1696377600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696377600,"objectID":"6a7a605e35e868ab8c82d09b77d3deb3","permalink":"https://greydongilmore.github.io/publication/2023_bottan_spontaneous/","publishdate":"2023-10-04T00:00:00Z","relpermalink":"/publication/2023_bottan_spontaneous/","section":"publication","summary":"","tags":[""],"title":"Lack of spontaneous typical seizures during intracranial monitoring with stereo-electroencephalography","type":"publication"},{"authors":["Yiming Xiao","Greydon Gilmore","Jason Kai","Jonathan C. Lau","Terry Peters","Ali R Khan"],"categories":null,"content":"","date":1696118400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1696118400,"objectID":"891566c5fff67632efebabbe789d4a4c","permalink":"https://greydongilmore.github.io/publication/2023_xiao_pop_average/","publishdate":"2023-10-01T00:00:00Z","relpermalink":"/publication/2023_xiao_pop_average/","section":"publication","summary":"","tags":[""],"title":"A population-averaged structural connectomic brain atlas dataset from 422 HCP-aging subjects","type":"publication"},{"authors":["Alaa Taha","Greydon Gilmore","Mohamad Abbass","Jason Kai","Tristan Kuehn","John Demarco","Geetika Gupta","Chris Zajner","Daniel Cao","Ryan Chevalier","Abrar Ahmed","Ali Hadi","Bradley G Karat","Olivia W Stanley","Patrick J Park","Kayla M Ferko","Dimuthu Hemachandra","Reid Vassallo","Magdalena Jach","Arun Thurairajah","Sandy Wong","Mauricio C Tenorio","Feyi Ogunsanya","Ali R Khan","Jonathan C. Lau"],"categories":null,"content":"","date":1689120000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1689120000,"objectID":"925924887a8aa36fff2648c86efdc379","permalink":"https://greydongilmore.github.io/publication/2023_taha/","publishdate":"2023-07-12T00:00:00Z","relpermalink":"/publication/2023_taha/","section":"publication","summary":"","tags":[""],"title":"Magnetic resonance imaging datasets with anatomical fiducials for quality control and registration","type":"publication"},{"authors":["Alaa Taha","Greydon Gilmore","Ali R Khan","Jonathan C. Lau"],"categories":null,"content":"","date":1669852800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1669852800,"objectID":"d7c855ce0eea0a442c355eb576e0f292","permalink":"https://greydongilmore.github.io/publication/2022_taha_indirect_dbs/","publishdate":"2022-12-01T00:00:00Z","relpermalink":"/publication/2022_taha_indirect_dbs/","section":"publication","summary":"","tags":[""],"title":"An Indirect Deep Brain Stimulation Targeting Tool Using Salient Anatomical Fiducials","type":"publication"},{"authors":["Maryam H. Mofrad","Greydon Gilmore","Dominik Koller","Seyed M. Mirsattari","Jorge G. Burneo","David A. Steven","Ali R Khan","Ana Suller Marti","Lyle Muller"],"categories":null,"content":"","date":1656460800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1656460800,"objectID":"fe82c8b5af9c88c9d0471808a3b04533","permalink":"https://greydongilmore.github.io/publication/2022_mofrad_wavform/","publishdate":"2022-06-29T00:00:00Z","relpermalink":"/publication/2022_mofrad_wavform/","section":"publication","summary":"","tags":[""],"title":"Waveform detection by deep learning reveals multi-area spindles that are selectively modulated by memory load","type":"publication"},{"authors":["Dinkar Kulshreshtha","Marcus Pieterman","Greydon Gilmore","Mandar Jog"],"categories":null,"content":"","date":1643673600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643673600,"objectID":"ed998f062a7f100c6a2f9f20d1c84049","permalink":"https://greydongilmore.github.io/publication/2022_kulshreshtha_levodopa/","publishdate":"2022-02-01T00:00:00Z","relpermalink":"/publication/2022_kulshreshtha_levodopa/","section":"publication","summary":"","tags":[""],"title":"Optimizing the selection of Parkinson’s disease patients for neuromodulation using the levodopa challenge test","type":"publication"},{"authors":["Mohamad Abbass","Greydon Gilmore","Alaa Taha","Ryan Chevalier","Magdalena Jach","Terry M Peters","Ali R Khan","Jonathan C Lau"],"categories":null,"content":"","date":1640995200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1640995200,"objectID":"7dbe90660bbc95729ede24bf1762dc92","permalink":"https://greydongilmore.github.io/publication/2022_abbass_afids/","publishdate":"2022-01-01T00:00:00Z","relpermalink":"/publication/2022_abbass_afids/","section":"publication","summary":"","tags":[""],"title":"Application of the anatomical fiducials framework to a clinical dataset of patients with Parkinson’s disease","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"I make use of the advanced search feature in Zotereo frequently, which enables searching through manuscript PDFs. However, when you obtain manuscript PDF files from online databases, they may not be in a searchable format. This means you are unable to highlight and search for text within the PDF. I have written a small Python function that will recursively search though a directory and convert any found PDF to a searchable format.\nOptical Character Recognition (OCR) is a method to enable text recognition within images and documents. PDFs contain vector graphics that can contain raster objects (.png, .jpg etc.). The OCR process will first rasterize each page of the PDF file then an OCR \u0026ldquo;layer\u0026rdquo; is created.\nGetting Started The code to perform the bulk OCR conversion can be found in this GitHub repository. Once you have the project repository stored locally, follow these steps to run OCR on your Zotereo database.\n  You will need to install the command-line program OCRmyPDF.\n  Next, you will need to determine where Zotereo stores your PDF files. In Zotereo, right-click on any document and select Show File. A new window will pop-up, make note of the full path to parent directory (i.e. /home/Zotereo/storage).\n    Zotereo file storage location.    In a terminal window, change into the GitHub project repository:\ncd /home/user/Documents/Github/ocr-pdf    Install the required Python libraries by running:\npython -m pip install -r requirements.txt    From the root of the repository, run the Python script by passing the full directory path determined in the first step:\npython main.py -i \u0026quot;full/path/to/PDF/storage/directory\u0026quot;    This process will take some time. First, the algorithm will search through all the PDFs and determine which files are not searchable. Once the non-searchable PDF files have been found, the OCR process is executed using ocrmypdf.\n","date":1627430400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1627430400,"objectID":"c04ded55157b68dfb039998c38baa172","permalink":"https://greydongilmore.github.io/post/ocr-papers/","publishdate":"2021-07-28T00:00:00Z","relpermalink":"/post/ocr-papers/","section":"post","summary":"I make use of the advanced search feature in Zotereo frequently, which enables searching through manuscript PDFs. However, when you obtain manuscript PDF files from online databases, they may not be in a searchable format.","tags":["PhD"],"title":"Making PDFs Searchable","type":"post"},{"authors":["Thibault Martin","Greydon Gilmore","Claire Haegelen","Pierre Jannin","John SH Baxter"],"categories":null,"content":"","date":1622505600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1622505600,"objectID":"689cbd52b6d9ee0afb6681ea3bcd2cba","permalink":"https://greydongilmore.github.io/publication/2021_martin_listening/","publishdate":"2021-06-01T00:00:00Z","relpermalink":"/publication/2021_martin_listening/","section":"publication","summary":"","tags":[""],"title":"Adapting the listening time for micro-electrode recordings in deep brain stimulation interventions","type":"publication"},{"authors":["Thibault Martin","Maxime Peralta","Greydon Gilmore","Paul Sauleau","Claire Haegelen","Pierre Jannin","John SH Baxter"],"categories":null,"content":"","date":1619827200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1619827200,"objectID":"9d7e5cdd0023fefb6c774396d06ee195","permalink":"https://greydongilmore.github.io/publication/2021_martin_cnn/","publishdate":"2021-05-01T00:00:00Z","relpermalink":"/publication/2021_martin_cnn/","section":"publication","summary":"","tags":[""],"title":"Extending convolutional neural networks for localizing the subthalamic nucleus from microelectrode recordings in Parkinson’s disease","type":"publication"},{"authors":["Jason Chui","Alex Freytag","Greydon Gilmore","Shalini Dhir","Max Rachinsky","John Murkin"],"categories":null,"content":"","date":1617148800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1617148800,"objectID":"94cfc096bda13175e99e4243de4fd03b","permalink":"https://greydongilmore.github.io/publication/2021_chui_brachial_plexus/","publishdate":"2021-03-31T00:00:00Z","relpermalink":"/publication/2021_chui_brachial_plexus/","section":"publication","summary":"","tags":[""],"title":"A novel approach of using brachial plexus blockade as an experimental model for diagnosis of intraoperative nerve dysfunction with somatosensory evoked potentials: a blinded proof-of-concept study","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Download software Download the linux software version.\nRun the following command:\nsudo tar -C /usr/local -xzvf /mnt/c/Users/*[your_username]*/Downloads/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz  You will also need to install some dependancies:\nsudo apt-get install tcsh sudo apt-get install libglu1 sudo apt-get install libxss1  Post-Install Configurations Add Freesurfer to your path:\necho \u0026quot;FREESURFER_HOME=/usr/local/freesurfer\u0026quot; \u0026gt;\u0026gt; ~/.bashrc echo 'source $FREESURFER_HOME/SetUpFreeSurfer.sh' \u0026gt;\u0026gt; ~/.bashrc  If you have run the install correctly you will see this output:\nSetting up environment for FreeSurfer/FS-FAST (and FSL) FREESURFER_HOME /usr/local/freesurfer FSFAST_HOME /usr/local/freesurfer/fsfast FSF_OUTPUT_FORMAT nii SUBJECTS_DIR /usr/local/freesurfer/subjects MNI_DIR /usr/local/freesurfer/mni  Define subjects_dir FreeSurfer requires an environment variable called SUBJECTS_DIR. This is the directory where subject data is stored.\nexport SUBJECTS_DIR=\u0026lt;path to subject data\u0026gt;  Obtain license You will need to obtain a license key.\nOnce you obtain the license.txt key file, copy it to your FreeSurfer installation directory. This is also the location defined by the FREESURFER_HOME environment variable.\nsudo mv /mnt/c/Users/*[your_username]*/Downloads/license.txt $FREESURFER_HOME  ","date":1613779200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1613779200,"objectID":"079e38fb63cd8a7f8d294fa5f187dfe0","permalink":"https://greydongilmore.github.io/post/wsl_docs/freesurfer/","publishdate":"2021-02-20T00:00:00Z","relpermalink":"/post/wsl_docs/freesurfer/","section":"post","summary":"Download software Download the linux software version.\nRun the following command:\nsudo tar -C /usr/local -xzvf /mnt/c/Users/*[your_username]*/Downloads/freesurfer-Linux-centos6_x86_64-stable-pub-v6.0.0.tar.gz  You will also need to install some dependancies:\nsudo apt-get install tcsh sudo apt-get install libglu1 sudo apt-get install libxss1  Post-Install Configurations Add Freesurfer to your path:","tags":["Neuro Software"],"title":"Freesurfer Installation","type":"post"},{"authors":["Jonathan C. Lau","Yiming Xiao ","Roy A M Haast","Greydon Gilmore"," Kâmil Uludag","Keith W MacDougall","Ravi S Menon","Andrew G Parrent","Terry M Peters","Ali R Khan"],"categories":null,"content":"","date":1604188800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1604188800,"objectID":"e2ca998e7e9260301adb6b52ea889690","permalink":"https://greydongilmore.github.io/publication/2020_lau_direct_visualization/","publishdate":"2020-11-01T00:00:00Z","relpermalink":"/publication/2020_lau_direct_visualization/","section":"publication","summary":"","tags":[""],"title":"Direct visualization and characterization of the human zona incerta and surrounding structures.","type":"publication"},{"authors":["Igor Varga","Eduard Bakstein","Greydon Gilmore","Daniel Novak"],"categories":null,"content":"","date":1601510400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601510400,"objectID":"14a623f11cf0e763f9bce44c1b2bc347","permalink":"https://greydongilmore.github.io/publication/2020_varga_mrisegmentation/","publishdate":"2020-10-01T00:00:00Z","relpermalink":"/publication/2020_varga_mrisegmentation/","section":"publication","summary":"","tags":[""],"title":"Image-Based Subthalamic Nucleus Segmentation for Deep Brain Surgery with Electrophysiology Aided Refinement","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"  Download your own icon image\n  Find path to the executable of your application by running (replace brackets with name of applicaion):\nwhich [name_application]    Copy the path from this output.\n Create\\edit the .desktop file for the application by running the command (remember to edit the application name):\ngedit Desktop/[name_application].desktop    Add the following lines (replace the items in square brackets with your respect application) and save the file with the extension .desktop (e.g. [application name].desktop):\n#!/usr/bin/env xdg-open [Desktop Entry] Type=Application Icon=[path_to_icon_file] Name=[Name your application] Comment=[Name your application] Exec=[path_to_executable file_from_step2] Categories=Development    Right click on the file (should now be on your desktop), select properties, then permissions and select Allow executing file as program\n  Finally, move this file to the desktop launcher path on your system:\nsudo mv /Desktop/*[name_of_file]* /usr/share/applications/    ","date":1601251200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601251200,"objectID":"3f871670f490675454d83a99f8588dc4","permalink":"https://greydongilmore.github.io/post/linux_docs/app_icon/","publishdate":"2020-09-28T00:00:00Z","relpermalink":"/post/linux_docs/app_icon/","section":"post","summary":"Download your own icon image\n  Find path to the executable of your application by running (replace brackets with name of applicaion):\nwhich [name_application]    Copy the path from this output.","tags":["Ubuntu"],"title":"Adding application launch icon to favorites","type":"post"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Get the latest ANTs code Download the latest code into an arbitrary directory, I use ~/code:\nmkdir ~/code cd ~/code git clone https://github.com/ANTsX/ANTs.git  You will also need to install the ZLIB libraries:\nsudo apt-get install zlib1g-dev  Run CMake/Make I install my applications in ~/Applications, however the following will install ANTs in ~/bin:\nmkdir -p ~/bin/ants cd ~/bin/ants ccmake ~/code/ANTs  Hit \u0026lsquo;c\u0026rsquo; to do an initial configuration. CMake will do some checking and then present options for review. Hit \u0026lsquo;c\u0026rsquo; again to do another round of configuration. If there are no errors, you\u0026rsquo;re ready to generate the make files by pressing \u0026lsquo;g\u0026rsquo;.\nNow you are back at the command line, it\u0026rsquo;s time to compile:\nmake  This compiles in the most resource-efficient manner. To save time, you can use multiple threads, for example:\nmake -j 2  Post-install Configuration If you want to use ANTs scripts, copy them from the source directory Scripts/ to the bin directory where antsRegistration etc are located:\ncp -r ~/bin/ants/Scripts/* ~/bin/ants/bin/  Assuming you\u0026rsquo;ve built in ~/bin/ants, there will now be a binary directory ~/bin/ants/bin, containing the programs (and scripts if you\u0026rsquo;ve included them). The scripts additionally require ANTSPATH to point to the bin directory including a trailing slash.\nYou will need to edit your .bashrc or .profile file by adding the following lines:\nexport ANTSPATH=${HOME}/bin/ants/bin export PATH=${ANTSPATH}:$PATH  Now check this worked correctly:\nwhich antsRegistration  ","date":1601251200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601251200,"objectID":"78eb3f61d5e6fcc5ed22338266b77bfc","permalink":"https://greydongilmore.github.io/post/wsl_docs/ants/","publishdate":"2020-09-28T00:00:00Z","relpermalink":"/post/wsl_docs/ants/","section":"post","summary":"Get the latest ANTs code Download the latest code into an arbitrary directory, I use ~/code:\nmkdir ~/code cd ~/code git clone https://github.com/ANTsX/ANTs.git  You will also need to install the ZLIB libraries:","tags":["Neuro Software"],"title":"Install Advanced Normalization Tools","type":"post"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Setup fuse   Run the following in a terminal:\nmodprobe fuse    Create a FUSE usergroup and add yourself to the group\nsudo groupadd fuse sudo usermod -a -G fuse $USER    Create a set of ssh-keys, press enter when asked to name the file (blank) and press enter when asked to enter a passphrase (blank):\nssh-keygen -t rsa    Transport the key to the remote server:\nssh-copy-id -i .ssh/id_rsa.pub user@example.com    Now when you run sshfs you will not need to enter your password.\n  Create Shell Script   Run the following command to create an empty shell script:\ntouch +x ~/Documents/sshfs_mount.sh chmod +x ~/Documents/sshfs_mount.sh gedit ~/Documents/sshfs_mount.sh    Enter the command you normally run to connect to the remote server, change mount_dir to match your local mount location:\n#!/bin/bash mount_dir=\u0026quot;/path/to/mount/directory\u0026quot; if (! mountpoint -q $mount_dir); then sshfs user@example.com:/home/[user]/ $mount_dir -o ServerAliveInterval=15,ServerAliveCountMax=3,Compression=no,follow_symlinks else umount $mount_dir fi    In the script, the filesystem will be mounted/unmounted depending on the status. Save and close the file.\n  Create Desktop Entry File   Run the following command to create an empty shell script:\ntouch ~/Documents/sshfs_mount.desktop chmod +x ~/Documents/sshfs_mount.desktop gedit ~/Documents/sshfs_mount.desktop    Paste the following into the document, ensure you update the brackets:\n#!/usr/bin/env xdg-open [Desktop Entry] Version=1.0 Type=Application Terminal=false Icon=[path/to/icon] Name=[Name the application] Exec=[path/to/sshfs_mount.sh]    Save and close.\n  Move the desktop entry file into the applications directory:\nsudo mv ~/Documents/sshfs_mount.desktop /usr/share/applications/    Search in applications for the desktop entry file, right-click and add to favorites.\n  ","date":1601251200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601251200,"objectID":"1cc6325647a059dfbc4cdd512b59688c","permalink":"https://greydongilmore.github.io/post/linux_docs/graham_shortcut/","publishdate":"2020-09-28T00:00:00Z","relpermalink":"/post/linux_docs/graham_shortcut/","section":"post","summary":"Setup fuse   Run the following in a terminal:\nmodprobe fuse    Create a FUSE usergroup and add yourself to the group\nsudo groupadd fuse sudo usermod -a -G fuse $USER    Create a set of ssh-keys, press enter when asked to name the file (blank) and press enter when asked to enter a passphrase (blank):","tags":["Ubuntu"],"title":"SSHFS Desktop Application","type":"post"},{"authors":["Yiming Xiao","Jonathan Lau","Dimuthu Hemachandra","Greydon Gilmore","Ali Khan","Terry Peters"],"categories":null,"content":"","date":1593648000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593648000,"objectID":"de231757da8f277791d47bad3e9dca19","permalink":"https://greydongilmore.github.io/publication/2020_xiao_guidance/","publishdate":"2020-07-02T00:00:00Z","relpermalink":"/publication/2020_xiao_guidance/","section":"publication","summary":"","tags":[""],"title":"Image guidance in deep brain stimulation surgery to treat Parkinson's disease: a comprehensive review","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Download NiftyReg Obtain the newest version of NiftyReg or by running the following:\nmkdir -p ~/code/niftyreg_source cd ~/code/niftyreg_source git clone https://github.com/SuperElastix/niftyreg.git  Run CMake/Make Make the build and install directories.\nThe default install location is /usr/local, which falls on your PATH. This is the easiest location to install. If you want to install somwhere else then specify the path in the CMAKE_INSTALL_PREFIX variable.\nmkdir -p ~/bin/niftyreg cd ~/bin/niftyreg ccmake ~/code/niftyreg_source/niftyreg  The following options will be displayed, ensure you change CMAKE_INSTALL_PREFIX variable to the install directory path if you don\u0026rsquo;t want to use default:\n   Parameter Value     BUILD_ALL_DEP Set to ON if you want to build All the dependencies   BUILD_SHARED_LIBS Build the libraries as shared build the libraries as shared   BUILD_TESTING Set to ON if you want to build the unit tests   CMAKE_BUILD_TYPE Compiling options: Debug Release RelWithDebInfo MinSizeRel   CMAKE_INSTALL_PREFIX Set the path where the final install will be copied   M_LIBRARY Path to a library.   PNG_INCLUDE_DIR Set if you want NiftyReg to support the PNG file format for 2D images. Note that CMake will try to find the libpng on your system and will build it automatically if it does not find it.   USE_CUDA Set to ON if you want to build the GPU code. The CUDA toolkit must be install otherwise CMake will return an error message   USE_OPENCL Set to ON to use OpenCL for multi-CPU implementation.   USE_OPENMP Set to ON to use OpenMP for multi-CPU implementation.   USE_SSE Set to ON to use SIMD based implementation, mostly for cubic B-Spline related computation. Note that SIMD implementation has only be done for single precision.    Press \u0026lsquo;c\u0026rsquo; to configure the NiftyReg project, press \u0026lsquo;c\u0026rsquo; to configure the project. Once the project is correctly configured, press the \u0026lsquo;g\u0026rsquo; key to generate the Makefiles. You can then build and install the project:\nsudo make sudo make install  Post-Install Configuration The project should then be installed into the CMAKE_INSTALL_PREFIX directory you previously created.\nIf you changed the install prefix directory, to one not on your PATH, you will need to add NiftyReg to your PATH. In order to use NiftyReg in any terminal, you will need to edit your .bashrc or .profile file by adding the following lines:\nNREG=\u0026lt;path_to_your_niftyreg_install\u0026gt; export PATH={NREG}/bin:${PATH} export LD_LIBRARY_PATH={NREG}/lib:${LD_LIBRARY_PATH}  Close and re-open the linux terminal then run:\nreg_f3d  ","date":1593302400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593302400,"objectID":"43f58f7a3490d9258a2738fa7b77a906","permalink":"https://greydongilmore.github.io/post/wsl_docs/niftyreg/","publishdate":"2020-06-28T00:00:00Z","relpermalink":"/post/wsl_docs/niftyreg/","section":"post","summary":"Download NiftyReg Obtain the newest version of NiftyReg or by running the following:\nmkdir -p ~/code/niftyreg_source cd ~/code/niftyreg_source git clone https://github.com/SuperElastix/niftyreg.git  Run CMake/Make Make the build and install directories.","tags":["Neuro Software"],"title":"NiftyReg Install","type":"post"},{"authors":["Daphne Hui","Aditya Murgai","Greydon Gilmore","Shabna Mohideen","Andrew Parrent","Mandar Jog"],"categories":null,"content":"","date":1589846400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1589846400,"objectID":"7c8e88a8693a1d4b6d8d6744bf225e40","permalink":"https://greydongilmore.github.io/publication/2020_hui_steering/","publishdate":"2020-05-19T00:00:00Z","relpermalink":"/publication/2020_hui_steering/","section":"publication","summary":"","tags":[""],"title":"Assessing the effect of current steering on the total electrical energy delivered and ambulation in Parkinson’s disease","type":"publication"},{"authors":["Mahsa Khosravi","S. Farokh Atashzar","Greydon Gilmore","Mandar Jog","Rajni Patel"],"categories":null,"content":"","date":1580342400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580342400,"objectID":"b4c1919f019c5f76f635ae6076a1dc5f","permalink":"https://greydongilmore.github.io/publication/2020_khosravi_datamodel/","publishdate":"2020-01-30T00:00:00Z","relpermalink":"/publication/2020_khosravi_datamodel/","section":"publication","summary":"","tags":[""],"title":"Intraoperative Localization of STN During DBS Surgery Using a Data-Driven Model","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Installing on Pop_OS! You will first need to run the following steps prior to installing FSL.\nThe following steps were originally written here here .\nMake sure you run a backup prior to performing this hack\u0026hellip; just in case.\n  move your current OS information files into a temporary location:\nsudo mv /etc/os-release /etc/os-release.pop \u0026amp;\u0026amp; sudo mv /etc/lsb-release /etc/lsb-release.pop    write a new os-release file:\nsudo gedit /etc/os-release  copy the following into this file:\nNAME=\u0026quot;Ubuntu\u0026quot; VERSION=\u0026quot;20.04 LTS (Focal Fossa)\u0026quot; ID=ubuntu ID_LIKE=debian PRETTY_NAME=\u0026quot;Ubuntu 20.04 LTS\u0026quot; VERSION_ID=\u0026quot;20.04\u0026quot; HOME_URL=\u0026quot;https://www.ubuntu.com/\u0026quot; SUPPORT_URL=\u0026quot;https://help.ubuntu.com/\u0026quot; BUG_REPORT_URL=\u0026quot;https://bugs.launchpad.net/ubuntu/\u0026quot; PRIVACY_POLICY_URL=\u0026quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\u0026quot; VERSION_CODENAME=focal UBUNTU_CODENAME=focal    write a new lsb-release file:\nsudo gedit /etc/lsb-release  copy the following into this file:\nDISTRIB_ID=Ubuntu DISTRIB_RELEASE=20.04 DISTRIB_CODENAME=focal DISTRIB_DESCRIPTION=\u0026quot;Ubuntu 20.04 LTS\u0026quot;    now run the fslinstaller.py script in the below section and return here to Step 5 to return your OS information.\n  after running the FSL install steps, remove the files you wrote:\nsudo rm /etc/os-release \u0026amp;\u0026amp; sudo rm /etc/lsb-release    move the original files back:\nsudo mv /etc/os-release.pop /etc/os-release \u0026amp;\u0026amp; sudo mv /etc/lsb-release.pop /etc/lsb-release    Download FSL The easiest method is to download this python script.\nYou will need to register. On the subsequent page you will download the fslinstaller.py file.\nRun the following in a linux terminal (the install will take awhile):\npython /mnt/c/Users/*[your_username]*/Downloads/fslinstaller.py  You will also need to install the package wxpython:\npip install wxpython  If that does not work then run:\npip install -U -f https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-16.04 wxPython  Libraries you may need to install Multiple-image Network Graphics library (libmng) sudo apt-get install libmng2 sudo apt-get install libmng-dev  PNG library - development (libpng-dev) sudo apt-get install libpng-dev  Optimized BLAS (linear algebra) library (libopenblas-base) sudo apt-get install libopenblas-base export LD_LIBRARY_PATH=/usr/lib/openblas-base/  libmng.so.1 Error You will need to create a symbolic link for the library dll libmng.so.1:\nsudo ln -s /usr/lib/x86_64-linux-gnu/libmng.so.2 /usr/lib/x86_64-linux-gnu/libmng.so.1  Independent JPEG Group\u0026rsquo;s JPEG runtime library (libjpeg62) sudo apt-get install libjpeg62  PNG library - runtime (libpng12.deb) wget -q -O /tmp/libpng12.deb http://mirrors.kernel.org/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1_amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i /tmp/libpng12.deb \\ \u0026amp;\u0026amp; rm /tmp/libpng12.deb  GTK+ graphical user interface library (gtk2.0) sudo apt-get install gtk2.0  Pulseaudio for other random libraries sudo apt-get install pulseaudio  You may also receive an error No D-BUS daemon running, run the following: sudo chown -R *[your username]*:admin ~/.dbus  ","date":1572220800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572220800,"objectID":"8a2966af12c61e57fb2cce86d2aca05d","permalink":"https://greydongilmore.github.io/post/wsl_docs/fsl/","publishdate":"2019-10-28T00:00:00Z","relpermalink":"/post/wsl_docs/fsl/","section":"post","summary":"Installing on Pop_OS! You will first need to run the following steps prior to installing FSL.\nThe following steps were originally written here here .\nMake sure you run a backup prior to performing this hack\u0026hellip; just in case.","tags":["Neuro Software"],"title":"FMRIB Software Library Installation","type":"post"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Install Remote Desktop Extension 1. Navigate to Chrome Remote Desktop Web Store and install it by clicking Add to Chrome.\n2. Click Launch App and the remote desktop app window should open.\nInstall Chrome Remote Desktop Package 1. You will now need to get the .deb for remote desktop with the following command in terminal:\nwget https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb  2. Then install it by running:\nsudo apt install ./chrome-remote-desktop_current_amd64.deb  3. If the initial installation attempt will fail, simply run sudo apt install -f to fix the missing dependencies and to complete the installation.\nsudo apt-get install -f  4. You will need to add yourself to the chrome-remote-desktop group then reboot for the changes to take effect.\nsudo usermod -a -G chrome-remote-desktop $USER sudo reboot  Create Session File 1. You will need to create a remote desktop session file in your home directory:\ngedit ~/.chrome-remote-desktop-session  2. Look in /usr/share/xsessions/ for the .desktop file for your linux environment. For example, ElementaryOS has a file named Pantheon with the following command: gnome-session --session=pantheon.\n3. Within the chrome-remote-desktop-session file enter the following (make sure to use your respective distro .desktop file):\nexec /usr/sbin/lightdm-session \u0026quot;gnome-session --session=pantheon\u0026quot;  4. If running ElementayOS you will also need to add the following to the file:\nDESKTOP_SESSION=pantheon XDG_CURRENT_DESKTOP=Pantheon XDG_RUNTIME_DIR=/run/user/1000  5. Save the file and close.\nPost-Install Configuration (Setting up Displays) 1. Stop Chrome Remote Desktop:\n/opt/google/chrome-remote-desktop/chrome-remote-desktop --stop  2. Backup the original configuration:\nsudo cp /opt/google/chrome-remote-desktop/chrome-remote-desktop /opt/google/chrome-remote-desktop/chrome-remote-desktop.orig  3. Edit the config (chrome-remote-desktop) file:\ngedit /opt/google/chrome-remote-desktop/chrome-remote-desktop  4. Find DEFAULT_SIZES and update the remote desktop resolution. For example:\nDEFAULT_SIZES = \u0026quot;2560x1440\u0026quot;  5. For multiple displays you will need to enter in the resolution for each one:\nDEFAULT_SIZES = \u0026quot;2560x1440,2560x1440,2560x1440\u0026quot;  6. Determine your main display number (obtain it with echo $DISPLAY from terminal). Find FIRST_X_DISPLAY_NUMBER and set the FIRST_X_DISPLAY_NUMBER to the display number (Ubuntu 17.10 and lower: usually 0, Ubuntu 18.04: usually 1)\necho $DISPLAY  FIRST_X_DISPLAY_NUMBER = 0  7. Around line 425, within the definition for get_unused_display_number(), comment out sections that look for additional displays by adding # infront:\n# while os.path.exists(X_LOCK_FILE_TEMPLATE % display): # display += 1  8. Lastly, find launch_session() and comment out launch_x_server() and launch_x_session() within launch_session(). You will then add display = self.get_unused_display_number() and self.child_env[\u0026quot;DISPLAY\u0026quot;] = \u0026quot;:%d\u0026quot; % display to the definition. The function definition should look like the following:\ndef launch_session(self, x_args): self._init_child_env() self._setup_pulseaudio() self._setup_gnubby() #self._launch_x_server(x_args) #self._launch_x_session() display = self.get_unused_display_number() self.child_env[\u0026quot;DISPLAY\u0026quot;] = \u0026quot;:%d\u0026quot; % display  9. Save and exit the editor. Start Chrome Remote Desktop:\n/opt/google/chrome-remote-desktop/chrome-remote-desktop --start  Launch Remote Desktop 1. Finally, head to Chrome Remote Web and Click TURN ON to enable remote desktop access. Set the system name, set the remote desktop connection PIN and click START.\n","date":1569628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569628800,"objectID":"08ad2d2ca9c6c8756488a7268218b24a","permalink":"https://greydongilmore.github.io/post/linux_docs/remote_desktop/","publishdate":"2019-09-28T00:00:00Z","relpermalink":"/post/linux_docs/remote_desktop/","section":"post","summary":"Install Remote Desktop Extension 1. Navigate to Chrome Remote Desktop Web Store and install it by clicking Add to Chrome.\n2. Click Launch App and the remote desktop app window should open.","tags":["Ubuntu"],"title":"Google Remote Desktop","type":"post"},{"authors":["Greydon Gilmore","Aditya Murgai","Abdulrahman Nazer","Andrew Parrent","Mandar Jog"],"categories":null,"content":"","date":1565740800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565740800,"objectID":"dc5fbcbb59fec3ae36403178a0fa8f5a","permalink":"https://greydongilmore.github.io/publication/2019_gilmore_orthostatic/","publishdate":"2019-08-14T00:00:00Z","relpermalink":"/publication/2019_gilmore_orthostatic/","section":"publication","summary":"","tags":[],"title":"Zona incerta deep-brain stimulation in orthostatic tremor: efficacy and mechanism of improvement","type":"publication"},{"authors":["Greydon Gilmore","Arnaud Gouelle","Mitchell Adamson","Marcus Pieterman","Mandar Jog"],"categories":null,"content":"","date":1565136000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565136000,"objectID":"132101536396d9f81478b9508abbee9f","permalink":"https://greydongilmore.github.io/publication/2019_gilmore_gait/","publishdate":"2019-08-07T00:00:00Z","relpermalink":"/publication/2019_gilmore_gait/","section":"publication","summary":"","tags":[],"title":"Forward and backward walking in Parkinson disease: A factor analysis","type":"publication"},{"authors":["Greydon Gilmore","Aditya Murgai","Mandar Jog"],"categories":null,"content":"","date":1564617600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564617600,"objectID":"62c50b40587ba25ee40372aa5fa8f6c5","permalink":"https://greydongilmore.github.io/publication/2019_gilmore_shape/","publishdate":"2019-08-01T00:00:00Z","relpermalink":"/publication/2019_gilmore_shape/","section":"publication","summary":"","tags":[],"title":"Letter to the Editor Regarding “Statistical Shape Analysis of Subthalamic Nucleus in Patients with Parkinson’s Disease”","type":"publication"},{"authors":["Mahsa Khosravi","Seyed Farokh Atashzar","Greydon Gilmore","Mandar Jog","Rajni Patel"],"categories":null,"content":"","date":1556668800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1556668800,"objectID":"5591ee9b6d4916c9ae4a20b7cdd8a53e","permalink":"https://greydongilmore.github.io/publication/2019_khosravi_clustering/","publishdate":"2019-05-01T00:00:00Z","relpermalink":"/publication/2019_khosravi_clustering/","section":"publication","summary":"","tags":[],"title":"Unsupervised Clustering of Micro-Electrophysiological Signals for localization of Subthalamic Nucleus during DBS Surgery","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  **Two**  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/media/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://greydongilmore.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Anita Abeyesekera","Scott Adams","Cynthia Mancinelli","Thea Knowles","Greydon Gilmore","Mehdi Delrobaei","Mandar Jog"],"categories":null,"content":"","date":1548892800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1548892800,"objectID":"ea6391137c958e46a72e73d96e154cc9","permalink":"https://greydongilmore.github.io/publication/2019_abeyesekera/","publishdate":"2019-01-31T00:00:00Z","relpermalink":"/publication/2019_abeyesekera/","section":"publication","summary":"","tags":[""],"title":"Effects of Deep Brain Stimulation of the Subthalamic Nucleus Settings on Voice Quality, Intensity, and Prosody in Parkinson's Disease: Preliminary Evidence for Speech Optimization","type":"publication"},{"authors":["Mitch B. Adamson","Greydon Gilmore","Tyler W. Stratton","Navid Baktash","Mandar Jog"],"categories":null,"content":"","date":1543536000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543536000,"objectID":"30f16bbb59779126955aeb55d1fcdcf5","permalink":"https://greydongilmore.github.io/publication/2019_adamson/","publishdate":"2018-11-30T00:00:00Z","relpermalink":"/publication/2019_adamson/","section":"publication","summary":"","tags":[],"title":"Medication status and dual-tasking on turning strategies in Parkinson disease","type":"publication"},{"authors":["Mahsa Khosravi","Seyed Farokh Atashzar","Greydon Gilmore","Mandar Jog","Rajni Patel"],"categories":null,"content":"","date":1543449600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543449600,"objectID":"e11dbc06206831e1c230306b2215b26f","permalink":"https://greydongilmore.github.io/publication/2018_khosravi_processing/","publishdate":"2018-11-29T00:00:00Z","relpermalink":"/publication/2018_khosravi_processing/","section":"publication","summary":"","tags":[],"title":"Electrophysiological signal processing for intraoperative localization of subthalamic nuleus during deep brain stimulation surgery","type":"publication"},{"authors":["Hannah Im","Scott Adams","Anita Abeyesekera","Marcus Pieterman","Greydon Gilmore","Mandar Jog"],"categories":null,"content":"","date":1541030400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1541030400,"objectID":"8bde133373a45824d427d4f49626d2d3","permalink":"https://greydongilmore.github.io/publication/2019_im_dysfluency/","publishdate":"2018-11-01T00:00:00Z","relpermalink":"/publication/2019_im_dysfluency/","section":"publication","summary":"","tags":[],"title":"Effect of Levodopa on Speech Dysfluency in Parkinson's Disease","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"One frequently asked question amoung graduate students is \u0026ldquo;How do you organize/read manuscripts?\u0026rdquo;. I have found a workflow that works quite well and allows me to stay ontop of the endless amount of new publications.\nSetup an RSS feed The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly, which is simple and easy to use.\n On the main page, select Get started for free. If you do not want to link your social media accounts, select Continue with Feedly and use an email address of your choice. Once you have logged in you should see a search box for searching potential topics. Head over to PubMed and perform a common search you use to find articles you are interested in. I will use deep brain stimulation as an example. Once you search for the term in PubMed you will notice an option to Create RSS underneath the search box. Click this option. Leave the default options set and click the XML link to open a new tab.    In the new tab, copy the full URL and paste it into the search box on the Feedly page and hit Enter. Once the search load click on the Follow tab, create a new feed for it and you will see it appear on the left side column.     You can now login and find all recent articles indexed on PubMed about the topic you are interested in. This is a great tool to use to keep up-to-date on publications.\nTake Notes With any new article I come across, I try to make a quick summary note about it for later reference. A really nice tool for these notes is a software called Notable. Notable is a Markdown based notetaking application that makes sharing notes very open and easy.\n When you open Notable for the first time you will need to set your data directory. If you want to easily sync/share your notes, create a new Github repository and use that as your Notable data directory. I created a template note for myself that I use for each new article I read, which looks like:    If you want the template you can download it here.  ","date":1532736000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532736000,"objectID":"70ca621cb8254996aaa1b1d202113a4a","permalink":"https://greydongilmore.github.io/post/reading-academic-papers/","publishdate":"2018-07-28T00:00:00Z","relpermalink":"/post/reading-academic-papers/","section":"post","summary":"One frequently asked question amoung graduate students is \u0026ldquo;How do you organize/read manuscripts?\u0026rdquo;. I have found a workflow that works quite well and allows me to stay ontop of the endless amount of new publications.","tags":["PhD"],"title":"Tips on reading academic papers","type":"post"},{"authors":["Daryn Cushnie-Sparrow","Scott Adams","Anita Abeysekera","Marcus Pieterman","Greydon Gilmore","Mandar Jog"],"categories":null,"content":"","date":1532217600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1532217600,"objectID":"3eb1bb0cd0a6f2a95182c0ec1f42b80d","permalink":"https://greydongilmore.github.io/publication/2018_cushnie-sparrow_voiceseverity/","publishdate":"2018-07-22T00:00:00Z","relpermalink":"/publication/2018_cushnie-sparrow_voiceseverity/","section":"publication","summary":"","tags":[""],"title":"Voice quality severity and responsiveness to levodopa in Parkinson's disease","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"While working with Git is most often performed at the command line, it can often be daughnting for people who are not as comfortable with a terminal window. GitHub has made the entry point easier by introducing a user interface application - GitHub Desktop.\nSetting up GitHub Desktop The first step to take is setting up an RSS feed so you are notified when a new article is published in an area you are interested in. The RSS manager I use is Feedly, which is simple and easy to use.\n  Install the application from the official website.\n  Once you have installed GitHub Desktop, launch it and sign in with your GitHub account:\n  Once you are signed in, choose Clone a repository.  ","date":1530144000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530144000,"objectID":"d349e614289cf57e8cd15832b7a5c3f7","permalink":"https://greydongilmore.github.io/post/install-github-desktop/","publishdate":"2018-06-28T00:00:00Z","relpermalink":"/post/install-github-desktop/","section":"post","summary":"While working with Git is most often performed at the command line, it can often be daughnting for people who are not as comfortable with a terminal window. GitHub has made the entry point easier by introducing a user interface application - GitHub Desktop.","tags":["PhD"],"title":"Install and work with Github desktop","type":"post"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Download ART Download the newest version of ART\nMake a new directory for the install and extract the tar package into it:\nmkdir ~/Applications/ART cd ~/Applications/ART tar -xvzf /mnt/c/Users/*[your_username]*/Downloads/acpcdetect2.0*.tar.gz  Post Configuration Set the ARTHOME environment variable and add the binary directory to your PATH by editing your ~/.bashrc file:\nvim ~/.basrc  Add these lines to the end:\nexport ARTHOME=/path/to/ART export PATH=$ARTHOME/bin:$PATH  Confirm Installation Execute acpcdetect by running command in terminal\nYou may get an error when executing acpcdetect:\nacpcdetect: error while loading shared libraries: liblapack.so.3: cannot open shared object file: No such file or directory  If you get this error, run the following:\nsudo apt-get install libatlas-base-dev  You will also need to install pnmtopng\nsudo apt-get install -y pnmtopng  ","date":1530144000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530144000,"objectID":"8c1512b720c8805afdb1bd2324e60a75","permalink":"https://greydongilmore.github.io/post/wsl_docs/art/","publishdate":"2018-06-28T00:00:00Z","relpermalink":"/post/wsl_docs/art/","section":"post","summary":"Download ART Download the newest version of ART\nMake a new directory for the install and extract the tar package into it:\nmkdir ~/Applications/ART cd ~/Applications/ART tar -xvzf /mnt/c/Users/*[your_username]*/Downloads/acpcdetect2.0*.tar.gz  Post Configuration Set the ARTHOME environment variable and add the binary directory to your PATH by editing your ~/.","tags":["Neuro Software"],"title":"Installing Automatic Registration Toolbox","type":"post"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Install Make Install build essentials and Make first:\nsudo apt-get install make sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install build-essential  Install CMake Download the latest version of the CMake executable.\nIn your linux shell run:\nchmod +x /mnt/c/Users/*[your_username]*/Downloads/cmake-*-Linux-x86_64.sh sudo /mnt/c/Users/*[your_username]*/Downloads/cmake-*-Linux-x86_64.sh export PATH=~/cmake-3.13.3-Linux-x86_64/bin/:$PATH  ","date":1530144000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1530144000,"objectID":"9afec9f96c200e7f90c8a307f7916046","permalink":"https://greydongilmore.github.io/post/wsl_docs/cmake/","publishdate":"2018-06-28T00:00:00Z","relpermalink":"/post/wsl_docs/cmake/","section":"post","summary":"Install Make Install build essentials and Make first:\nsudo apt-get install make sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install build-essential  Install CMake Download the latest version of the CMake executable.","tags":["Neuro Software"],"title":"Make and CMake Installation","type":"post"},{"authors":["Thea Knowles","Scott Adams","Anita Abeysekera","Cynthia Mancinelli","Greydon Gilmore","Mandar Jog"],"categories":null,"content":"","date":1521072000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1521072000,"objectID":"bf9459bd1cfd2010c5156c78cad2fa49","permalink":"https://greydongilmore.github.io/publication/2018_knowles_acoustics/","publishdate":"2018-03-15T00:00:00Z","relpermalink":"/publication/2018_knowles_acoustics/","section":"publication","summary":"","tags":[],"title":"Deep Brain Stimulation of the Subthalamic Nucleus Parameter Optimization for Vowel Acoustics and Speech Intelligibility in Parkinson's Disease","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Sign up for Windows Insider program  Go to Register for Windows Insider Sign up for Windows Insider program  Activate Windows Insider Builds   Enable Full Diagnostic Data\n go to Settings \u0026ndash;\u0026gt; Privacy \u0026ndash;\u0026gt; Diagnostics \u0026amp; feedback \u0026ndash;\u0026gt; Diagnostic data Choose Full as the option    Enable Telemetry Data via Registry\n Open Registry Editor  Press Windows Key + R then type regedit to open registry editor   Navigate to:  HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\DataCollection   Right-click DataCollection, click New and then click DWORD (32-bit) Value Name it as AllowTelemetry, and then press ENTER Double-click AllowTelemetry, set the value as 3, and then click OK.   Repeat the above steps for:  HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\DataCollection   Restart your computer    Group Policy to enable Telemetry\n Press Windows key + r and type gpedit.msc in the Run prompt, hit ENTER to launch group policy editor Go to Computer Configuration \u0026ndash;\u0026gt; Administrative Templates \u0026ndash;\u0026gt; Windows Components \u0026ndash;\u0026gt; Data Collection and Preview Builds Double-click Allow Telemetry In the Options box, configure the level as 3, and then click OK    Activate Insider Build   Search for Check for Updates in the Windows search menu\n  In the new window select Windows Insider Program at the bottom of the menu\n  Select Get Started and follow the instructions, making sure you select Fast when asked\n  Once you have completed the registration you will need to check for updates and let Windows install the new insider build.\n  Once done you should restart your computer\n  Turn on linux subsystem feature   Open Windows PowerShell as administrator and run the commands:\nEnable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux    You will need to restart your computer again\n  Download the linux distro   Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu):\n Ubuntu Debian    From the distro\u0026rsquo;s page, select Get\n  Once done installing, open up Powershell as administrator and run (replace distro with the name of the distro you installed):\nwsl --set-version [Distro] 2  wsl --set-default-version 2    Finalizing   To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro\n  The first time a newly installed distro runs, a Console window will open, and you\u0026rsquo;ll be asked to wait for a minute or two for the installation to complete\n  Once installation is complete, you will be prompted to create a new user account (and its password)\n  Most distros ship with an empty/minimal package catalog. You should regularly be updating your package catalog, and upgrading your installed packages using your distro\u0026rsquo;s preferred package manager\nsudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade    ","date":1517097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1517097600,"objectID":"7d90e312326b6cddb06b284ad7dd31bb","permalink":"https://greydongilmore.github.io/post/wsl_docs/wsl2/","publishdate":"2018-01-28T00:00:00Z","relpermalink":"/post/wsl_docs/wsl2/","section":"post","summary":"Sign up for Windows Insider program  Go to Register for Windows Insider Sign up for Windows Insider program  Activate Windows Insider Builds   Enable Full Diagnostic Data","tags":["Windows"],"title":"Activating Windows Linux Subsystem 2 (WSL2)","type":"post"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Installing an X Server To run an X Window application, you will need to have an X Server installed and running on your Windows 10 machine. The most popular application is: VcXsrv\nAfter installing, VcXsrv creates a desktop shortcut. To start the server in multi-window mode run the following command in a command prompt:\n\u0026quot;C:\\Program Files\\VcXsrv\\vcxsrv.exe\u0026quot; :0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl -dpi auto  Configuring Terminator Once VcXsrv is installed, the next step is to install Terminator on WSL Bash:\nsudo apt-get install terminator  Terminator will not initalize a config file so you will need to do this manually:\nmkdir -p ~/.config/terminator touch ~/.config/terminator/config  Try launching Terminator by specifying the X Display to connect to (:0) in the linux shell:\nDISPLAY=:0 terminator \u0026amp;  If you receive an error about D-Bus (No D-BUS daemon running) then press CTRL+C to abort the previous command and run the following:\nsudo apt-get install dbus-x11 sudo service dbus start  Once you have completed the above run the previous command again:\nDISPLAY=:0 terminator \u0026amp;  A nice Terminator window should pop up.\nInstalling Zsh The next step is to install Zsh with oh-my-zsh. Installation is straightfoward:\nsudo apt-get install curl wget git zsh curl -L https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh | bash  You may receive a message Password: chsh: PAM: Authentication failure you can ignore this.\nSet the theme to \u0026ldquo;ys\u0026rdquo; at line 11 by replacing robbyrussell in .zshrc:\nvi ~/.zshrc  ZSH_THEME=\u0026quot;ys\u0026quot;  If you have never used vi editor before, you will need to press the i key to enter inout mode to make changes. Once you have made the change you will need to exit input mode by pressing esc. In order to exit the editor and save you need to press : followed by wq to exit the editor with save.\nThe only problem with Bash in WSL is it will always run Bash instead of Zsh. To get around that, add this to the end of your ~/.bashrc which will launch zsh instead when it starts up:\nvi ~/.bashrc  if [ -t 1 ]; then exec zsh fi  Terminator Colorscheme The next thing is to change the default Terminator colorscheme to Solarized Dark. The easiest way to do this, is to use the awesome node package base16-builder. You need to first install Node.js:\ncurl -sL https://deb.nodesource.com/setup_10.x | sudo bash - sudo apt install nodejs  Once you have installed Node.js you can then run the base-16builder install:\nsudo npm install --global base16-builder  You need to change directory access to the configstore directory just created:\nsudo chown -R [your_username] /home/[your_username]/.config/configstore  Now you need to apply the scheme to the terminator config file:\nmkdir -p .config/terminator base16-builder -s solarized -t terminator -b dark \u0026gt; .config/terminator/config  Dircolors To change the dircolors you can use Solarized dircolors on Github and downloaded them to .dir_colors:\nwget https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.256dark mv dircolors.256dark .dir_colors  Finally, added this to your .zshrc to eval the Solarized dircolors on startup:\nif [ -f ~/.dir_colors ]; then eval `dircolors ~/.dir_colors` fi  Launching Terminator Directly To launch a hidden command window using the WShell Object in VBS you need to type the folowing script into a text document.\nRight click on your desktop and create a new text doc. Then copy the following and save the file with the .vbs extension (e.g. startTerminator.vbs):\nargs = \u0026quot;-c\u0026quot; \u0026amp; \u0026quot; -l \u0026quot; \u0026amp; \u0026quot;\u0026quot;\u0026quot;DISPLAY=:0 terminator\u0026quot;\u0026quot;\u0026quot; WScript.CreateObject(\u0026quot;Shell.Application\u0026quot;).ShellExecute \u0026quot;bash\u0026quot;, args, \u0026quot;\u0026quot;, \u0026quot;open\u0026quot;, 0  Move this .vbs file into a safe place such as \u0026ldquo;C:\\Users[your_username]\u0026rdquo;. Right click on the file and \u0026lsquo;Send to\u0026rsquo; the desktop as a shortcut. Right click on the new shortcut and select properties. In the \u0026lsquo;Target\u0026rsquo; field type:\nC:\\Windows\\System32\\wscript.exe C:\\Users\\*[your_username]*\\startTerminator.vbs  Click \u0026lsquo;Apply\u0026rsquo;. You can then set the icon of the shortcut by saving this icon file to the same place you saved the .vbs file. Right click on the shortcut again, properties and at the bottom select \u0026lsquo;Change Icon\u0026hellip;\u0026rsquo;. From here you can select the icon file you just downloaded.\nIn the \u0026lsquo;Start in\u0026rsquo; field type:\n%USERPROFILE%  It\u0026rsquo;s impossible to have Termiator start in your Linux home directory through this method since that path is not \u0026ldquo;known\u0026rdquo; to Windows. To get around it, add this to your .zshrc so it CD\u0026rsquo;s to your home directory on startup:\nvi ~/.zshrc  if [ -t 1 ]; then cd ~ fi  Other customizations If you want to further modify your terminator theme you can add lines to the file ~/.config/terminator/config.\nTo change the opening size of the terminal window add the variable size under layouts:\nvi ~/.config/terminator/config  [layouts] [[default]] [[[child1]]] parent = window0 profile = Base16 Solarized Dark type = Terminal [[[window0]]] parent = \u0026quot;\u0026quot; size = 1594, 465 type = Window  Close terminator and re-open.\n","date":1517097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1517097600,"objectID":"1fb58ef05c792f7b1b166788492b8f10","permalink":"https://greydongilmore.github.io/post/wsl_docs/wsl_terminator/","publishdate":"2018-01-28T00:00:00Z","relpermalink":"/post/wsl_docs/wsl_terminator/","section":"post","summary":"Installing an X Server To run an X Window application, you will need to have an X Server installed and running on your Windows 10 machine. The most popular application is: VcXsrv","tags":["Windows"],"title":"Install Terminator Linux Emulator","type":"post"},{"authors":["Sara Memar","Mehdi Delrobaei","Greydon Gilmore","Kenneth McIsaac","Mandar Jog"],"categories":null,"content":"","date":1509494400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509494400,"objectID":"744408938fbc0e23edd092bf3b64c7e7","permalink":"https://greydongilmore.github.io/publication/2017_memar_segmentation/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/2017_memar_segmentation/","section":"publication","summary":"","tags":[""],"title":"Segmentation and detection of physical activities during a sitting task in Parkinson’s disease participants using multiple inertial sensors","type":"publication"},{"authors":["Mehdi Delrobaei","Navid Baktash","Greydon Gilmore","Kenneth McIsaac","Mandar Jog"],"categories":null,"content":"","date":1509321600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1509321600,"objectID":"e7f7d386e3b2b1cc1f7ff9857637eeec","permalink":"https://greydongilmore.github.io/publication/2017_delrobaei_dyskinesia/","publishdate":"2017-10-30T00:00:00Z","relpermalink":"/publication/2017_delrobaei_dyskinesia/","section":"publication","summary":"","tags":[],"title":"Using Wearable Technology to Generate Objective Parkinson’s Disease Dyskinesia Severity Score: Possibilities for Home Monitoring","type":"publication"},{"authors":["Greydon Gilmore","Donald H Lee","Andrew Parrent","Mandar Jog"],"categories":null,"content":"","date":1496275200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1496275200,"objectID":"037e76e9558c02320054ebec9d711759","permalink":"https://greydongilmore.github.io/publication/2017_gilmore_dbsimaging/","publishdate":"2017-06-01T00:00:00Z","relpermalink":"/publication/2017_gilmore_dbsimaging/","section":"publication","summary":"","tags":[],"title":"The current state of postoperative imaging in the presence of deep brain stimulation electrodes","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Run Install Run the following code in a linux terminal:\nsudo apt-get install dcm2niix  Install Dependencies There are a few packages that allow dcm2niix to run faster:\nsudo apt-get install python-gdcm sudo apt-get install pigz  ","date":1495929600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495929600,"objectID":"e359d93f982300b4217fd2d304c0ebd0","permalink":"https://greydongilmore.github.io/post/wsl_docs/dcm2niix/","publishdate":"2017-05-28T00:00:00Z","relpermalink":"/post/wsl_docs/dcm2niix/","section":"post","summary":"Run Install Run the following code in a linux terminal:\nsudo apt-get install dcm2niix  Install Dependencies There are a few packages that allow dcm2niix to run faster:\nsudo apt-get install python-gdcm sudo apt-get install pigz  ","tags":["Neuro Software"],"title":"Dcm2niix Installation","type":"post"},{"authors":["Greydon Gilmore","Mandar Jog"],"categories":null,"content":"","date":1490140800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490140800,"objectID":"41581b95b18146c1f3cbbff27875ee5f","permalink":"https://greydongilmore.github.io/publication/2017_gilmore_perspectives/","publishdate":"2017-03-22T00:00:00Z","relpermalink":"/publication/2017_gilmore_perspectives/","section":"publication","summary":"","tags":[],"title":"Future Perspectives: Assessment Tools and Rehabilitation in the New Age","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"  Install the latest stable installer of WinFSP\n  Install the latest stable installer of SSHFS-Win\n  Open File Explorer, right-click on This PC and choose Map network drive. Choose a drive to mount at and enter the following in the folder field:\n\\\\sshfs\\[your_login_name]@graham.computecanada.ca/projects/rrg-akhanf/cfmm-bids    Ensure you check the box Connect using different credentials if your computer login password is different from Sharcnet.\n  You should then see the network drive in your file explorer!  ","date":1469664000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1469664000,"objectID":"d26de75dcb214b2bdb208aba37e521b0","permalink":"https://greydongilmore.github.io/post/windows_docs/windows_sshfs/","publishdate":"2016-07-28T00:00:00Z","relpermalink":"/post/windows_docs/windows_sshfs/","section":"post","summary":"Install the latest stable installer of WinFSP\n  Install the latest stable installer of SSHFS-Win\n  Open File Explorer, right-click on This PC and choose Map network drive.","tags":["Windows"],"title":"Mount Remote Drive with SSHFS","type":"post"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://greydongilmore.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":null,"categories":null,"content":"","date":1448928000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1448928000,"objectID":"6651156bada9e3e5f4ceede56842739b","permalink":"https://greydongilmore.github.io/publication/2015_gilmore_msc/","publishdate":"2015-12-01T00:00:00Z","relpermalink":"/publication/2015_gilmore_msc/","section":"publication","summary":"","tags":[],"title":"Deep brain stimulation and its effects on Parkinson disease spatiotemporal gait parameters","type":"publication"},{"authors":["Greydon Gilmore"],"categories":null,"content":"Turn on linux subsystem feature Open Windows PowerShell as administrator and run the command:\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux  Restart your computer when prompted.\nDownload the linux distro   Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu):\n Ubuntu Debian    From the distro\u0026rsquo;s page, select \u0026ldquo;Get\u0026rdquo;.\n  To complete the initialization of your newly installed distro, launch a new instance by searching in the Start menu and launching the distro.\n  The first time a newly installed distro runs, a Console window will open, and you\u0026rsquo;ll be asked to wait for a minute or two for the installation to complete.\n  Once installation is complete, you will be prompted to create a new user account (and its password).\n  Most distros ship with an empty/minimal package catalog. I strongly recommend regularly updating your package catalog, and upgrading your installed packages using your distro\u0026rsquo;s preferred package manager.\nsudo apt update \u0026amp;\u0026amp; sudo apt upgrade    Add link to the linux subsystem in Windows Quick Access Depending on the version of linux you installed, the absolute path will be found either:\n C:\\Users\\*[your_username]*\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_*[unique_code]*\\LocalState\\rootfs C:\\Users\\*[your_username]*\\AppData\\Local\\lxss  When you find the correct location, right click on the parent folder and select \u0026lsquo;Pin to Quick Access\u0026rsquo;\n","date":1422403200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1422403200,"objectID":"f69adf8d435a170d4bb7eddfa753c431","permalink":"https://greydongilmore.github.io/post/wsl_docs/wsl/","publishdate":"2015-01-28T00:00:00Z","relpermalink":"/post/wsl_docs/wsl/","section":"post","summary":"Turn on linux subsystem feature Open Windows PowerShell as administrator and run the command:\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux  Restart your computer when prompted.\nDownload the linux distro   Open the Microsoft Store and choose your favorite Linux distribution by searching for them (I prefer Ubuntu):","tags":["Windows"],"title":"Activating Windows Linux Subsystem (WSL)","type":"post"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://greydongilmore.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"},{"authors":null,"categories":null,"content":"Linear Regression The linear regression (LR) model is a simple machine learning approach used for target variables that are continuous (i.e. variables that are real-valued). The LR model takes as its input both a vector of features (conventionally labeled X) and a vector of labels (y). Often different terminology is used —calling X our set of variables or predictors, and y our outcome or dependent variable—but the idea is the same. The data are plotted, and a straight line is then fit to these data points. The objective is to fit the line to the data points so that the distance between the line and points are minimized.\n ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"6a5c3fa3409451bfc0441d7d1bc5ffb5","permalink":"https://greydongilmore.github.io/courses/ml_intro/05_linear_regression/05_01_linear_regression/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ml_intro/05_linear_regression/05_01_linear_regression/","section":"courses","summary":"Linear Regression The linear regression (LR) model is a simple machine learning approach used for target variables that are continuous (i.e. variables that are real-valued). The LR model takes as its input both a vector of features (conventionally labeled X) and a vector of labels (y).","tags":null,"title":"","type":"courses"},{"authors":null,"categories":null,"content":"Linear Regression Let\u0026rsquo;s return to our running house price-prediction example. Predicting sales price from the features is a regression problem, because sale price varies continuously. What we\u0026rsquo;re trying to find is some optimal function that, given a matrix of feature scores, can produce a set of continuous values that best approximates (for whatever definition of \u0026ldquo;best\u0026rdquo; we like) the true house price of our houses.\nFirst we import the required libraries then investigate the data:\nimport pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline all_data = pd.read_csv('../data/house_prices.csv', sep=',', index_col=0).reset_index(drop=True) all_data.info()  \u0026lt;class 'pandas.core.frame.DataFrame'\u0026gt; RangeIndex: 1460 entries, 0 to 1459 Data columns (total 80 columns): MSSubClass 1460 non-null int64 MSZoning 1460 non-null object LotFrontage 1201 non-null float64 LotArea 1460 non-null int64 Street 1460 non-null object Alley 91 non-null object LotShape 1460 non-null object LandContour 1460 non-null object Utilities 1460 non-null object LotConfig 1460 non-null object LandSlope 1460 non-null object Neighborhood 1460 non-null object Condition1 1460 non-null object Condition2 1460 non-null object BldgType 1460 non-null object HouseStyle 1460 non-null object OverallQual 1460 non-null int64 OverallCond 1460 non-null int64 YearBuilt 1460 non-null int64 YearRemodAdd 1460 non-null int64 RoofStyle 1460 non-null object RoofMatl 1460 non-null object Exterior1st 1460 non-null object Exterior2nd 1460 non-null object MasVnrType 1452 non-null object MasVnrArea 1452 non-null float64 ExterQual 1460 non-null object ExterCond 1460 non-null object Foundation 1460 non-null object BsmtQual 1423 non-null object BsmtCond 1423 non-null object BsmtExposure 1422 non-null object BsmtFinType1 1423 non-null object BsmtFinSF1 1460 non-null int64 BsmtFinType2 1422 non-null object BsmtFinSF2 1460 non-null int64 BsmtUnfSF 1460 non-null int64 TotalBsmtSF 1460 non-null int64 Heating 1460 non-null object HeatingQC 1460 non-null object CentralAir 1460 non-null object Electrical 1459 non-null object 1stFlrSF 1460 non-null int64 2ndFlrSF 1460 non-null int64 LowQualFinSF 1460 non-null int64 GrLivArea 1460 non-null int64 BsmtFullBath 1460 non-null int64 BsmtHalfBath 1460 non-null int64 FullBath 1460 non-null int64 HalfBath 1460 non-null int64 BedroomAbvGr 1460 non-null int64 KitchenAbvGr 1460 non-null int64 KitchenQual 1460 non-null object TotRmsAbvGrd 1460 non-null int64 Functional 1460 non-null object Fireplaces 1460 non-null int64 FireplaceQu 770 non-null object GarageType 1379 non-null object GarageYrBlt 1379 non-null float64 GarageFinish 1379 non-null object GarageCars 1460 non-null int64 GarageArea 1460 non-null int64 GarageQual 1379 non-null object GarageCond 1379 non-null object PavedDrive 1460 non-null object WoodDeckSF 1460 non-null int64 OpenPorchSF 1460 non-null int64 EnclosedPorch 1460 non-null int64 3SsnPorch 1460 non-null int64 ScreenPorch 1460 non-null int64 PoolArea 1460 non-null int64 PoolQC 7 non-null object Fence 281 non-null object MiscFeature 54 non-null object MiscVal 1460 non-null int64 MoSold 1460 non-null int64 YrSold 1460 non-null int64 SaleType 1460 non-null object SaleCondition 1460 non-null object SalePrice 1460 non-null int64 dtypes: float64(3), int64(34), object(43) memory usage: 912.6+ KB  # Select only columns that are numeric all_data = all_data.select_dtypes(['number']) # Remove any rows that contain NaN for ifeature in list(all_data): all_data = all_data[pd.notnull(all_data[ifeature])] all_data.shape  (1121, 37)  Let\u0026rsquo;s also plot our target variable, Sales Price, to see what the distribution looks like:\nsns.distplot(all_data['SalePrice'])     Training a Linear Regression Model We will need to first split up our data into an X array that contains the features to train on, and a y array with the target variable, in this case the Sale Price. We start by setting the X and y variables, split into train and test sets using scikit learns train_test_split function and initialize the LinearRegression estimator:\nfrom sklearn.model_selection import train_test_split # Set input features and output variable y = all_data['SalePrice'] X = all_data.drop(['SalePrice'], axis =1) # Split data into test and train sets X_train, X_test, y_train, y_test = train_test_split(X, y.to_numpy().ravel(), test_size=0.30, random_state=101) # OLS (and many other variants of regression) is housed in the linear_model module from sklearn.linear_model import LinearRegression # initialize the model lr_model = LinearRegression()  The LinearRegression estimator, unlike many others, has very few configurable parameters. Above, we initialize it with all of the default values by passing no arguments to the function. Now we\u0026rsquo;re ready to fit some data! We can do that by calling the .fit() method. This will be true for every Estimator in scikit-learn. We will use our training sub-datasets we created:\n# Fit the model lr_model.fit(X_train, y_train);  Now we have a fitted model we need to evaluate the accuracy of this training process. We always want to evaluate the trained model prior to applying it to test data.\n# The sklearn convention is to denote fitted parameters with a trailing underscore print('Model y intercept:',lr_model.intercept_,'\\n') print('Model feature coefficients:',lr_model.coef_,'\\n')  Model y intercept: -1348228.3926262031 Model feature coefficients: [-8.75772924e+01 5.95600326e+01 1.18930737e+00 1.38647884e+04 4.91899261e+03 4.10628404e+02 1.81486446e+02 1.51819223e+01 2.69056767e+01 -1.07411164e+00 -3.69107465e-01 2.54624576e+01 1.84098928e+01 2.14677482e+01 7.35941390e+00 4.72370548e+01 -8.14206679e+02 -6.09318362e+03 -1.52754837e+03 -1.82409326e+03 -1.58292462e+04 -2.59304669e+04 5.44696494e+03 -4.36801780e+01 -4.51893373e+01 4.11495671e+03 2.38219900e+01 4.82163185e+00 2.38325092e+01 3.04386635e+01 9.87034508e+00 4.14229568e+01 1.26489368e+02 -2.30107736e+00 2.62862323e+02 1.01150684e+02]  We can use these parameter estimates (y intercept and coefficients) to manually construct and apply a prediction equation (i.e., $\\hat{y} = -0.557 + 1.43x$) if we want to. The other thing we can look at is the coefficient.\ncoeff_df = pd.DataFrame(lr_model.coef_,X.columns,columns=['Coefficient']) coeff_df.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  Coefficient     MSSubClass -87.577292   LotFrontage 59.560033   LotArea 1.189307   OverallQual 13864.788358   OverallCond 4918.992610     Interpreting the coefficients:\n Holding all other features fixed, a 1 unit increase in Lot Frontage is associated with an **increase of $59.56 **. Holding all other features fixed, a 1 unit increase in Lot Area is associated with an **increase of $1.18 **. Holding all other features fixed, a 1 unit increase in Overall Condition is associated with an **increase of $4918.99 **.  The next step is to use the trained model to predict new house Sale Price on new data. We do this by making use of the .predict() method that all Estimator classes implement. For example, here are the predicted scores for our X test data:\nlr_predictions = lr_model.predict(X_test) plt.scatter(y_test,lr_predictions); plt.xlabel('Test Data Actual Sales Price'); plt.ylabel('Predicted Sales Price');     We can also plot the residual:\nsns.distplot((y_test-lr_predictions),bins=50);     Just to underscore how little we had to do, here\u0026rsquo;s the whole example again, in three lines:\n# Initialize the linear regression estimator lr_model = LinearRegression() # Fit the model lr_model.fit(X_train, y_train) # Generate predictions lr_predictions = lr_model.predict(X_test)  Performance metrics Once we\u0026rsquo;ve fit our model, it\u0026rsquo;s natural to want to know how well it performs. In machine learning, the focus of model performance is on prediction; typically, we have some objective quantitative metric we care about, and to the degree that a model can produce better values on that metric, we incline to evaluate it more favorably. This doesn\u0026rsquo;t mean that we have to single-mindedly base our evaluation of model on just one quantity; in practice, many other considerations may come into play (e.g., computational efficiency, interpretability, etc.). The point is mainly that machine learning practitioners—at least in applied settings—tend to care much more than traditional scientists do about what models can actually do, and much less about what\u0026rsquo;s going on inside them.\nThe coefficient of determination For the rest of this tutorial, we\u0026rsquo;re going to focus our attention on one particular metric of predictive performance: the coefficient of determination, or $R^2$. $R^2$ quantifies the proportion of variance in the outcome variable (e.g., house price) explained by the fitted model:\nR-squared (R2) is the measure used to determine which line minimizes this distance:\n\n$R^2$ is the most widely used measure of performance in the individual differences literature, and we\u0026rsquo;ll stick with tradition here. But this shouldn\u0026rsquo;t be taken as an indication that there\u0026rsquo;s anything particularly special about $R^2$. In fact, in many applications, it\u0026rsquo;s a pretty bad metric, because it\u0026rsquo;s defined with reference to the relative variation in a particular sample, and completely ignores the absolute deviation of predictions from the true scores (i.e., a model can have an $R^2$ of 1 while generating a predicted score distribution entirely outside the range of the true scores). For our purposes though, $R^2$ is a sensible metric, because for most individual differences variables, absolute scores don\u0026rsquo;t really mean anything anyway—we\u0026rsquo;re almost always interested in how variation across individuals relates to variation in some other measure or construct.\nHere are three other common evaluation metrics for machine learning problems:\nMean Absolute Error (MAE) is the mean of the absolute value of the errors:\n$$\\frac 1n\\sum_{i=1}^n|y_i-\\hat{y}_i|$$\nMean Squared Error (MSE) is the mean of the squared errors:\n$$\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2$$\nRoot Mean Squared Error (RMSE) is the square root of the mean of the squared errors:\n$$\\sqrt{\\frac 1n\\sum_{i=1}^n(y_i-\\hat{y}_i)^2}$$\nComparing these metrics:\n MAE is the easiest to understand, because it\u0026rsquo;s the average error. MSE is more popular than MAE, because MSE \u0026ldquo;punishes\u0026rdquo; larger errors, which tends to be useful in the real world. RMSE is even more popular than MSE, because RMSE is interpretable in the \u0026ldquo;y\u0026rdquo; units.  All of these are loss functions, because we want to minimize them.\nHow well did we do? Let\u0026rsquo;s see how well the linear regression model we fitted earlier (using the house features as predictors) explains the variance in sales price. We\u0026rsquo;ll make use of scikit-learn\u0026rsquo;s metrics module, which contains a large number of predefined performance metrics. As is true of Estimator objects, all metrics in scikit-learn follow the same usage pattern: we pass in the true scores and the model\u0026rsquo;s predicted scores, respectively.\n# the metrics module contains predefined scoring functions # for commonly used metrics like r^2, MSE, etc. from sklearn import metrics # scoring functions are called by passing an array of # true scores and and an array of predicted scores as # inputs print('Model score:', metrics.r2_score(y_test, lr_predictions)) print('MAE:', metrics.mean_absolute_error(y_test, lr_predictions)) print('MSE:', metrics.mean_squared_error(y_test, lr_predictions)) print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, lr_predictions)))  Model score: 0.5238801531365112 MAE: 26110.712069211004 MSE: 3851956330.37256 RMSE: 62064.130787215254  Looking at the $R^2$ score we get the amount of variance explained by the model, which means we can explain about 52% of the variance in sales price using 27 features of the home.\nFor convenience, scikit-learn estimators have a .score() method you can use as an alternative to the above. Instead of generating predicted scores and then explicitly feeding them to a metric function like r2_score, you can call .score() directly on the estimator after the fit() step, and the prediction will be done implicitly:\n# Initialize the estimator and fit the data, just like before lr_model = LinearRegression() lr_model.fit(X_train, y_train) # Now instead of generating predictions explicitly, # we just call .score(). Note that we lose the ability to # specify the metric: LinearRegression.score() always uses # the R^2 metric. lr_model.score(X_test, y_test)  0.5238801531365112  We can also look at how well we did visually by plotting the predicted vs. actual sales price values:\nrange_plot = range(100,300) fig, ax = plt.subplots(figsize=(10,6)) lr_1 = ax.plot(range_plot, lr_predictions[range_plot], color='blue', label='Linear Regression') lr_2 = ax.plot(range_plot, y_test[range_plot], color='red', label = 'Actual') ax.set_ylim(0, 800000) ax.set_xlim(range_plot[0], range_plot[-1]) plt.title('Linear Regression: Actual vs. Predicted Sales Price', fontweight='bold') plt.xlabel('Sample', fontweight='bold') plt.ylabel('Sales Price (USD)', fontweight='bold') plt.legend(handles=[lr_1[0],lr_2[0]]) plt.show()     ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"55a2dfe55daed13eadbcaf85b2af91ba","permalink":"https://greydongilmore.github.io/courses/ml_intro/05_linear_regression/05_02_linear_regression/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ml_intro/05_linear_regression/05_02_linear_regression/","section":"courses","summary":"Linear Regression Let\u0026rsquo;s return to our running house price-prediction example. Predicting sales price from the features is a regression problem, because sale price varies continuously. What we\u0026rsquo;re trying to find is some optimal function that, given a matrix of feature scores, can produce a set of continuous values that best approximates (for whatever definition of \u0026ldquo;best\u0026rdquo; we like) the true house price of our houses.","tags":null,"title":"","type":"courses"},{"authors":null,"categories":null,"content":"Logistic Regression For this section we will work with the Titanic Data Set from Kaggle. We\u0026rsquo;ll be trying to predict a classification problem - survival or deceased. Let\u0026rsquo;s begin our understanding of implementing Logistic Regression in Python for classification. We\u0026rsquo;ll use a \u0026ldquo;semi-cleaned\u0026rdquo; version of the titanic data set, if you use the data set hosted directly on Kaggle, you may need to do some additional cleaning not shown in this notebook.\nLet\u0026rsquo;s import some libraries and load the dataset:\nimport pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline train = pd.read_csv('../data/titanic_train.csv')  Let\u0026rsquo;s view the data present in the dataset:\ntrain.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked     0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S   1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C   2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S   3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S   4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S     Exploratory Data Analysis Let\u0026rsquo;s begin some exploratory data analysis! We\u0026rsquo;ll start by checking out missing data!\nMissing Data We can use seaborn to create a simple heatmap to see where we are missing data!\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis');     Roughly 20 percent of the Age data is missing. The proportion of Age missing is likely small enough for reasonable replacement with some form of imputation. Looking at the Cabin column, it looks like we are just missing too much of that data to do something useful with at a basic level. We\u0026rsquo;ll probably drop this later, or change it to another feature like \u0026ldquo;Cabin Known: 1 or 0\u0026rdquo;\nLet\u0026rsquo;s continue on by visualizing some more of the data such as our target variable survival:\nsns.set_style('whitegrid'); sns.countplot(x='Survived',data=train,palette='RdBu_r');     We can manipulate the data a bit and look at the difference in survival betwen men and women:\nsns.set_style('whitegrid'); sns.countplot(x='Survived',hue='Sex',data=train,palette='RdBu_r');     We can also split the data up based on the class level of the passengers:\nsns.set_style('whitegrid'); sns.countplot(x='Survived',hue='Pclass',data=train,palette='rainbow');     Let\u0026rsquo;s now look at the distribution of age for the passengers:\nsns.distplot(train['Age'].dropna(),kde=False,color='darkred',bins=30);     Data Cleaning We want to fill in missing age data instead of just dropping the missing age data rows. One way to do this is by filling in the mean age of all the passengers (imputation). However we can be smarter about this and check the average age by passenger class. For example:\nplt.figure(figsize=(12, 7)); sns.boxplot(x='Pclass',y='Age',data=train,palette='winter');     We can see the wealthier passengers in the higher classes tend to be older, which makes sense. We\u0026rsquo;ll use these average age values to impute based on Pclass for Age.\ndef impute_age(cols): Age = cols[0] Pclass = cols[1] if pd.isnull(Age): if Pclass == 1: return 37 elif Pclass == 2: return 29 else: return 24 else: return Age  Now apply that function:\ntrain['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)  Now let\u0026rsquo;s check that heat map again!\nsns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis');     Great! Let\u0026rsquo;s go ahead and drop the Cabin column and the row in Embarked that is NaN.\ntrain.drop('Cabin',axis=1,inplace=True); train.dropna(inplace=True); train.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Embarked     0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 S   1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C   2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 S   3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 S   4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 S     Converting Categorical Features We\u0026rsquo;ll need to convert categorical features to dummy variables using pandas. If we do not convert then our machine learning algorithm won\u0026rsquo;t be able to directly take in those features as inputs.\ntrain.info()  \u0026lt;class 'pandas.core.frame.DataFrame'\u0026gt; Int64Index: 889 entries, 0 to 890 Data columns (total 11 columns): PassengerId 889 non-null int64 Survived 889 non-null int64 Pclass 889 non-null int64 Name 889 non-null object Sex 889 non-null object Age 889 non-null float64 SibSp 889 non-null int64 Parch 889 non-null int64 Ticket 889 non-null object Fare 889 non-null float64 Embarked 889 non-null object dtypes: float64(2), int64(5), object(4) memory usage: 83.3+ KB  sex = pd.get_dummies(train['Sex'],drop_first=True) embark = pd.get_dummies(train['Embarked'],drop_first=True)  train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)  train = pd.concat([train,sex,embark],axis=1)  train.head()   .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }  \n  PassengerId Survived Pclass Age SibSp Parch Fare male Q S     0 1 0 3 22.0 1 0 7.2500 1 0 1   1 2 1 1 38.0 1 0 71.2833 0 0 0   2 3 1 3 26.0 0 0 7.9250 0 0 1   3 4 1 1 35.0 1 0 53.1000 0 0 1   4 5 0 3 35.0 0 0 8.0500 1 0 1     Great! Our data is ready for our model!\nBuilding a Logistic Regression model Let\u0026rsquo;s start by splitting our data into a training set and test set (there is another test.csv file that you can play around with in case you want to use all this data for training).\nTrain Test Split from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(train.drop('Survived',axis=1), train['Survived'], test_size=0.30, random_state=101)  Training and Predicting from sklearn.linear_model import LogisticRegression logmodel = LogisticRegression() logmodel.fit(X_train,y_train)  predictions = logmodel.predict(X_test)  Let\u0026rsquo;s move on to evaluate our model!\nEvaluation We can check precision,recall,f1-score using classification report!\nfrom sklearn.metrics import classification_report print(classification_report(y_test,predictions))  Not so bad! You might want to explore other feature engineering and the other titanic_text.csv file, some suggestions for feature engineering:\n Try grabbing the Title (Dr.,Mr.,Mrs,etc..) from the name as a feature Maybe the Cabin letter could be a feature Is there any info you can get from the ticket?  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"d7fe2a33bb1adaafa3ab55cacbabc7b5","permalink":"https://greydongilmore.github.io/courses/ml_intro/06_logistic_regression/06_01_logistic_regression/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/courses/ml_intro/06_logistic_regression/06_01_logistic_regression/","section":"courses","summary":"Logistic Regression For this section we will work with the Titanic Data Set from Kaggle. We\u0026rsquo;ll be trying to predict a classification problem - survival or deceased. Let\u0026rsquo;s begin our understanding of implementing Logistic Regression in Python for classification.","tags":null,"title":"","type":"courses"}]